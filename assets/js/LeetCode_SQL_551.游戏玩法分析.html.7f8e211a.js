"use strict";(self.webpackChunkvuepress_theme_hope_template=self.webpackChunkvuepress_theme_hope_template||[]).push([[519],{2789:(s,i)=>{i.A=(s,i)=>{const a=s.__vccOpts||s;for(const[s,n]of i)a[s]=n;return a}},9781:(s,i,a)=>{a.r(i),a.d(i,{comp:()=>t,data:()=>h});var n=a(7829);const l=[(0,n.Fv)('<div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">-- LeetCode </span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">-- 551.游戏玩法分析</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> player_id,</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">min</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(event_date) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> first_login  </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> Activity  </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">group by</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> player_id</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">-- 简短，易懂</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">select distinct</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">player_id</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">FIRST_VALUE</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">A</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">event_date</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">Over</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  PARTITION</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> BY</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> </span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  A</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">player_id</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  ORDER BY</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> </span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  A</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">event_date</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> </span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)  </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">AS</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> first_login</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> </span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">Activity </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> A</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">-- PARTITION BY A.player_id：这表示窗口函数将按 player_id 进行分区。每个不同的 player_id 都会创建一个独立的分区。</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">-- ORDER BY A.event_date：这表示在每个分区内，数据将按 event_date 升序排序。FIRST_VALUE() 将返回每个分区内第一个（最早的）event_date。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">SUM</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(amount) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">OVER</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">ORDER BY</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> visited_on </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">ROWS</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> BETWEEN</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 6</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> PRECEDING</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> AND</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> CURRENT </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">ROW</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">AS</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> sum_past_6_days </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">-- 计算当前行和前六行的数据的amount的总和</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> COUNT</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">OVER</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">ORDER BY</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> visited_on </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">ROWS</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> BETWEEN</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 6</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> PRECEDING</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> AND</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> CURRENT </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">ROW</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">AS</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> days_count </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">-- 计数前六行和当前行的数据</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> </span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> ROW_NUMBER</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">OVER</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">ORDER BY</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> visited_on) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">AS</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> rn </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">-- ROW_NUMBER()：为结果集中的每一行分配一个唯一的序号，通常基于ORDER BY子句定义的顺序。</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> </span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> RANK</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()：为结果集中的每一行分配一个排名，排名相同（即并列）的行会得到相同的排名，后续的排名会跳过。</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">DENSE_RANK</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()：与RANK()类似，但是排名不会跳过，即使存在并列排名。</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">NTILE</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(n)：将结果集分为n个大致相等的组，返回每行所属的组号。</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">LEAD</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(column)：返回当前行之后第n行的数据，如果没有后续行，则返回NULL。</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">LAG</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(column)：返回当前行之前第n行的数据，如果没有前面的行，则返回NULL。</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">FIRST_VALUE</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() 是一个窗口函数，它返回在每个分区内按指定顺序的第一个值。</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">FIRST_VALUE</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">A</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">event_date</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">OVER</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    PARTITION</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> BY</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">      A</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">player_id</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    ORDER BY</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">      A</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">event_date</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  )</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">-- PARTITION BY A.player_id：这表示窗口函数将按 player_id 进行分区。每个不同的 player_id 都会创建一个独立的分区。</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">-- ORDER BY A.event_date：这表示在每个分区内，数据将按 event_date 升序排序。FIRST_VALUE() 将返回每个分区内第一个（最早的）event_date。</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">LAST_VALUE</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()：返回窗口定义中指定的排序后最后一行的数据。</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">SUM</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()：计算窗口中的总和。</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">AVG</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()：计算窗口中的平均值。</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">MIN</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()：找到窗口中的最小值。</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">MAX</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()：找到窗口中的最大值。</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">STDDEV_POP()：计算窗口内值的总体标准差。</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">STDDEV_SAMP()：计算窗口内值的样本标准差。</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">VAR_POP()：计算窗口内值的总体方差。</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">VAR_SAMP()：计算窗口内值的样本方差。</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">PERCENT_RANK</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()：返回窗口中每行的百分比排名。</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">CUME_DIST</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()：返回当前行及其之前所有行的累积分布。</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">#todo 窗口函数通常搭配OVER()函数使用</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',2)],e={},t=(0,a(2789).A)(e,[["render",function(s,i){return(0,n.uX)(),(0,n.CE)("div",null,l)}]]),h=JSON.parse('{"path":"/LeetCode/SQL/551.%E6%B8%B8%E6%88%8F%E7%8E%A9%E6%B3%95%E5%88%86%E6%9E%90.html","title":"551.游戏玩法分析","lang":"zh-CN","frontmatter":{"title":"551.游戏玩法分析","date":"2024-04-15T00:00:00.000Z","tags":["leecode"],"categories":["leecode","sql"],"head":[["meta",{"property":"og:url","content":"https://flipped1001.cn/LeetCode/SQL/551.%E6%B8%B8%E6%88%8F%E7%8E%A9%E6%B3%95%E5%88%86%E6%9E%90.html"}],["meta",{"property":"og:site_name","content":"Flipped"}],["meta",{"property":"og:title","content":"551.游戏玩法分析"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-17T13:51:21.000Z"}],["meta",{"property":"article:author","content":"Flipped"}],["meta",{"property":"article:tag","content":"leecode"}],["meta",{"property":"article:published_time","content":"2024-04-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-17T13:51:21.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"551.游戏玩法分析\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-15T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-17T13:51:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Flipped\\"}]}"]]},"headers":[],"git":{"createdTime":1721224082000,"updatedTime":1721224281000,"contributors":[{"name":"flipped1001","email":"3154147351@qq.com","commits":2}]},"readingTime":{"minutes":2.1,"words":631},"filePathRelative":"LeetCode/SQL/551.游戏玩法分析.md","localizedDate":"2024年4月15日","excerpt":"<div class=\\"language-sql line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"sql\\" data-title=\\"sql\\" style=\\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes github-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\\">-- LeetCode </span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\\">-- 551.游戏玩法分析</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">select</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\"> player_id,</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#56B6C2\\">min</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">(event_date) </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">as</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\"> first_login  </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">from</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\"> Activity  </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">group by</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\"> player_id</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\\">-- 简短，易懂</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">select distinct</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#D19A66\\"> A</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#D19A66\\">player_id</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#005CC5;--shiki-dark:#56B6C2\\">FIRST_VALUE</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#D19A66\\">A</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#D19A66\\">event_date</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">)</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">Over</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">(</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">  PARTITION</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\"> BY</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\"> </span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#005CC5;--shiki-dark:#D19A66\\">  A</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#D19A66\\">player_id</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">  ORDER BY</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\"> </span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#005CC5;--shiki-dark:#D19A66\\">  A</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#D19A66\\">event_date</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\"> </span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">)  </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">AS</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\"> first_login</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">from</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\"> </span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">Activity </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">as</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\"> A</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\\">-- PARTITION BY A.player_id：这表示窗口函数将按 player_id 进行分区。每个不同的 player_id 都会创建一个独立的分区。</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\\">-- ORDER BY A.event_date：这表示在每个分区内，数据将按 event_date 升序排序。FIRST_VALUE() 将返回每个分区内第一个（最早的）event_date。</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}')}}]);