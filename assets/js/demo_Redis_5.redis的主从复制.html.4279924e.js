"use strict";(self.webpackChunkvuepress_theme_hope_template=self.webpackChunkvuepress_theme_hope_template||[]).push([[7078],{6786:(e,i)=>{i.A=(e,i)=>{const s=e.__vccOpts||e;for(const[e,t]of i)s[e]=t;return s}},8698:(e,i,s)=>{s.r(i),s.d(i,{comp:()=>d,data:()=>n});var t=s(2758);const a=[(0,t.Fv)('<h4 id="主从复制" tabindex="-1"><a class="header-anchor" href="#主从复制"><span>主从复制</span></a></h4><p>主服务器上可以进行读写操作，当发生写操作时自动将写操作同步到从服务器，而从服务器一般是只读状态，并接受服务器同步过来写操作命令，然后执行</p><h2 id="第一次同步" tabindex="-1"><a class="header-anchor" href="#第一次同步"><span><strong>第一次同步</strong></span></a></h2><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 服务器执行</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">replicaof</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">服务器A的IP地</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">址</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">服务器A的Redis端口</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">号</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>之后服务器B就会变成A的从</p><ul><li><p>第一阶段建立连接，同步协商</p><p>从服务器向主服务器发送<code>psync</code>命令，包含<strong>主服务器的<code>runID</code><strong>和</strong>复制进度<code>offset</code></strong></p><ol><li>runID，每个Redis服务器在启动的时候都会产生一个随机ID来标识自己。第一次同步的时候由于不知道主服务器的<code>runID</code>所以设置为“ ? ”</li><li>offset,表示复制进度，第一次同步时，其值为-1</li></ol><p>主服务器在接收之后，会返回<code>FULLRESYNC</code>，带着两个参数主服务器<code>runID</code>和目前的复制进度<code>offset</code>，从服务器接收后会记录下来，</p><p><code>FULLRESYNC</code>命令意图时<strong>全量复制</strong>，也就是主服务器的所有数据全部同步到从服务器</p></li><li><p>第二阶段是主服务器同步数据给从服务器</p><p>主服务器用<code>bgsave</code>命令来异步生成<code>RDB</code>，然后发送给从服务器。</p><p>从服务在接收之后会清空当前数据，然后载入<code>RDB</code>文件。</p><p>为了保证数据一致性，主服务器会在下面三个时间段内的写操作，写入到<code>replication buffer</code>缓冲区里</p><ol><li>主服务器生成<code>RDB</code>期间</li><li>主服务器发送<code>RDB</code>文件给从服务器期间</li><li>从服务器加载<code>RDB</code>文件期间</li></ol></li><li><p>第三阶段是主服务器发送新的写操作命令给从服务器</p><p>在从服务器完成<code>RDB</code>的载入之后，主服务器会将<code>replication buffer</code>内的操作命令发送给从服务器，从服务器执行命令完成数据一致</p></li></ul><p>之后双方会维持一个<code>TCP</code>长连接，后续主服务器通过这个连接实现命令传播，称之为<strong>基于长连接的命令传播</strong></p><h2 id="分摊压力" tabindex="-1"><a class="header-anchor" href="#分摊压力"><span>分摊压力</span></a></h2><p>为了避免从服务器过多，主服务器频繁生成<strong>子进程</strong>或者在大数据量的情况下发生阻塞，以及传输<code>RDB</code>占用服务器流量</p><p>从库也可以有从库（从从库），然后可以将复制交给这个有从库的从库</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">replicaof</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">目标服务器IP地</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">址</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 6379</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="增量复制" tabindex="-1"><a class="header-anchor" href="#增量复制"><span>增量复制</span></a></h2><p>在网络断开之后恢复，主从服务器会采用<strong>增量复制</strong>继续同步，就只是把网络断开期间主服务器接收到的写操作命令，同步给从服务器<code>CONTINUE</code></p><ol><li><p><code>repl_backlog_buffer</code>：是一个[环形] 缓冲区，用于主从服务器断连后，从中找到差异的数据</p></li><li><p><code>replication offset</code>：标记上面那个缓冲区的同步进度，主从服务器都有各自的偏移量，主服务器使用<code>master_repl_offset</code>来记录自己[写] 到的位置，从服务器使用<code>slave repl offset</code>来记录自己[读]到的位置。</p></li></ol><p>在主服务器进行命令传播时，不仅会将写命令发送给从服务器，还会将写命令写入到<code>repl backlog bufer</code>缓冲区里，因此这个缓冲区里会保存着最近传播的写命令</p><p>网络断开后，在从服务器重新连接主服务器时，从服务器会通过 psync 命令将自己的复制偏移量<code>slave repl offset</code>发送给主服务器，主服务器根据自己的<code>master repl offset</code>和<code>slave repl offset</code>之间的差距，然后来决定对从服务器执行哪种同步操作:</p><ul><li>如果判断出从服务器要读取的数据还在<code>repl backlog buffer</code>缓冲区里，那么主服务器将采用<strong>增量同步</strong>的方式</li><li>相反，如果判断出从服务器要读取的数据已经不存在<code>repl backlog buffer</code>缓冲区里，那么主服务器将采用<strong>全量同步</strong>的方式。</li></ul><p>当主服务器在<code>repl backlog buffer</code>中找到主从服务器差异(增量)的数据后，就会将增量的数据写入到<code>replication buffer</code>缓冲区</p><p>为了避免在网络恢复时，服务器频繁的使用全量同步的方式，可以调整<strong>repl_backlog_buffer 缓冲区大小，尽可能的大一些</strong>减少出现从服务器要读取的数据被覆盖的概率，从而使得主服务器采用增量同步的方式</p><h2 id="在主从库中如何确定对方还活着" tabindex="-1"><a class="header-anchor" href="#在主从库中如何确定对方还活着"><span>在主从库中如何确定对方还活着</span></a></h2><p>相互<code>ping-pong</code>心态检测，如果有一半以上的节点去<code>ping</code>一个节点没有<code>pong</code>回应，集群就会认为这个节点挂掉了，会断开与这个节点的连接</p><p>Redis 主从节点发送的心态间隔是不一样的，而且作用也有一点区别：</p><ul><li><code>Redis</code> 主节点默认每隔 10 秒对从节点发送<code>ping</code>命令，判断从节点的存活性和连接状态，可通过参数<code>repl-ping-slave-period</code>控制发送频率。</li><li><code>Redis</code> 从节点每隔1秒发送<code>replconf ack{offset}</code>命令，给主节点上报自身当前的复制偏移量，目的是为 <ol><li>实时监测主从节点网络状态</li><li>上报自身复制偏移量，检查复制数据是否丢失，如果从节点数据丢失，再从主节点的复制缓冲区中拉取丢失数据</li></ol></li></ul><p><strong>过期一个Key，主库会模拟一个del命令</strong></p>',24)],l={},d=(0,s(6786).A)(l,[["render",function(e,i){return(0,t.uX)(),(0,t.CE)("div",null,a)}]]),n=JSON.parse('{"path":"/demo/Redis/5.redis%E7%9A%84%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6.html","title":"redis的主从复制","lang":"zh-CN","frontmatter":{"title":"redis的主从复制","date":"2024-04-05T00:00:00.000Z","tags":["redis"],"categories":["redis","主从复制","高性能"],"description":"主从复制 主服务器上可以进行读写操作，当发生写操作时自动将写操作同步到从服务器，而从服务器一般是只读状态，并接受服务器同步过来写操作命令，然后执行 第一次同步 之后服务器B就会变成A的从 第一阶段建立连接，同步协商 从服务器向主服务器发送psync命令，包含主服务器的runID和复制进度offset runID，每个Redis服务器在启动的时候都会产生...","head":[["meta",{"property":"og:url","content":"https://flipped1001.cn/demo/Redis/5.redis%E7%9A%84%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6.html"}],["meta",{"property":"og:site_name","content":"Flipped"}],["meta",{"property":"og:title","content":"redis的主从复制"}],["meta",{"property":"og:description","content":"主从复制 主服务器上可以进行读写操作，当发生写操作时自动将写操作同步到从服务器，而从服务器一般是只读状态，并接受服务器同步过来写操作命令，然后执行 第一次同步 之后服务器B就会变成A的从 第一阶段建立连接，同步协商 从服务器向主服务器发送psync命令，包含主服务器的runID和复制进度offset runID，每个Redis服务器在启动的时候都会产生..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-13T12:06:08.000Z"}],["meta",{"property":"article:author","content":"Flipped"}],["meta",{"property":"article:tag","content":"redis"}],["meta",{"property":"article:published_time","content":"2024-04-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-13T12:06:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"redis的主从复制\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-05T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-13T12:06:08.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Flipped\\",\\"url\\":\\"www.flipped1001.cn\\"}]}"]]},"headers":[{"level":2,"title":"第一次同步","slug":"第一次同步","link":"#第一次同步","children":[]},{"level":2,"title":"分摊压力","slug":"分摊压力","link":"#分摊压力","children":[]},{"level":2,"title":"增量复制","slug":"增量复制","link":"#增量复制","children":[]},{"level":2,"title":"在主从库中如何确定对方还活着","slug":"在主从库中如何确定对方还活着","link":"#在主从库中如何确定对方还活着","children":[]}],"git":{"createdTime":1723285542000,"updatedTime":1723550768000,"contributors":[{"name":"flipped1001","email":"3154147351@qq.com","commits":1}]},"readingTime":{"minutes":4.74,"words":1423},"filePathRelative":"demo/Redis/5.redis的主从复制.md","localizedDate":"2024年4月5日","excerpt":"<h4>主从复制</h4>\\n<p>主服务器上可以进行读写操作，当发生写操作时自动将写操作同步到从服务器，而从服务器一般是只读状态，并接受服务器同步过来写操作命令，然后执行</p>\\n<h2><strong>第一次同步</strong></h2>\\n<div class=\\"language-bash line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"bash\\" data-title=\\"bash\\" style=\\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes github-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\\"># 服务器执行</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\">replicaof</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#ABB2BF\\"> &lt;</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\">服务器A的IP地</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">址</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#ABB2BF\\">&gt;</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#ABB2BF\\"> &lt;</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\">服务器A的Redis端口</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">号</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#ABB2BF\\">&gt;</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}')}}]);