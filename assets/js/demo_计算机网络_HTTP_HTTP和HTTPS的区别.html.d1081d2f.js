"use strict";(self.webpackChunkvuepress_theme_hope_template=self.webpackChunkvuepress_theme_hope_template||[]).push([[8129],{6786:(t,e)=>{e.A=(t,e)=>{const r=t.__vccOpts||t;for(const[t,p]of e)r[t]=p;return r}},7449:(t,e,r)=>{r.r(e),r.d(e,{comp:()=>s,data:()=>l});var p=r(2758);const n=(0,p.Fv)('<h2 id="http和https" tabindex="-1"><a class="header-anchor" href="#http和https"><span>HTTP和HTTPS：</span></a></h2><h3 id="_1-http和https的区别" tabindex="-1"><a class="header-anchor" href="#_1-http和https的区别"><span>1.HTTP和HTTPS的区别：</span></a></h3><ol><li>安全性：HTTP是明文传输不安全，HTTPS在<strong>TCP和HTTTP网络层</strong>之间加入了<strong>SSL/TLS协议</strong>（报文可以加密传输）更安全</li><li>建立连接的复杂程度上：HTTP连接简单<strong>三次握手之后</strong>就可以进行报文的传输，而HTTPS在<strong>三次握手之后还需要进行一次SSL/TLS的握手</strong>过程之后可以进行加密传输</li><li>默认端口：HTTP是80，HTTPS是443</li><li>HTTPS需要向CA申请数字证书，来保证服务器的身份是可信的</li></ol><h3 id="_2-https解决了http的那些问题" tabindex="-1"><a class="header-anchor" href="#_2-https解决了http的那些问题"><span>2.HTTPS解决了HTTP的那些问题?</span></a></h3><ul><li>安全上:<strong>通信加密</strong>(防止信息泄露),<strong>校验机制</strong>(防止通信内容被篡改),<strong>身份验证</strong>(防止被假网站骗)</li></ul><h4 id="如何解决的" tabindex="-1"><a class="header-anchor" href="#如何解决的"><span>如何解决的?</span></a></h4><ul><li><strong>混合加密</strong>:在通信建立之前使用非对称加密,通信过程中使用对称加密</li></ul><ol><li><p><strong>对称加密和非对称加密</strong></p><p>对称加密:加密和解密使用相同的密钥,加密速度非常快,但是双方需要<strong>共享密钥</strong>容易造成<strong>密钥的丢失</strong> 非对称加密:公钥加密私钥解密,加密和解密过程慢,但是只有对应的<strong>私钥</strong>才能解密更安全</p></li></ol><ul><li><p>摘要算法+数字签名:</p><p>1.摘要算法:对内容进行哈希,计算出一个唯一的哈希值(可以保证内容不被篡改,但是如果连哈希值和内容一起被篡改,还是会造成内容的篡改) 2.数字签名:采用非对称加密算法,公钥和私钥可以双向解密 <strong>私钥加密，公钥解密</strong>。这个目的是为了<strong>保证消息不会被冒充</strong>，非对称加密的用途主要在于<strong>通过「私钥加密，公钥解密」的方式，来确认消息的身份</strong>,加密的不是内容而是<strong>哈希值</strong></p></li><li><p>数字证书:</p><p>防止公钥是假的</p></li></ul><h3 id="_3-https是如何建立连接的-期间交互了什么" tabindex="-1"><a class="header-anchor" href="#_3-https是如何建立连接的-期间交互了什么"><span>3.HTTPS是如何建立连接的,期间交互了什么?</span></a></h3><p>SSL/TLS 协议基本流程：</p><ul><li>客户端向服务器索要并验证服务器的公钥。</li><li>双方协商生产「会话秘钥」。</li><li>双方采用「会话秘钥」进行加密通信。</li></ul><p><strong>TLS四次握手:（RSA）</strong></p><p>RSA算法的缺陷：不支持向前保密</p><p><strong>首先客户端发送<code>ClientHello</code>(加密通信)请求</strong></p><p>（1）客户端支持的 TLS 协议版本，如 TLS 1.2 版本。</p><p>（2）客户端生产的随机数（<code>Client Random</code>），后面用于生成「会话秘钥」条件之一。</p><p>（3）客户端支持的密码套件列表，如RSA 加密算法。</p><p><strong>服务器收到客户端请求后，向客户端发出响应 <code>SeverHello</code></strong></p><p>（1）确认 TLS 协议版本，如果浏览器不支持，则关闭加密通信。</p><p>（2）服务器生产的随机数（<code>Server Random</code>），也是后面用于生产「会话秘钥」条件之一。</p><p>（3）确认的密码套件列表，如 RSA 加密算法。<strong>密钥交换算法 + 签名算法 + 对称加密算法 + 摘要算法</strong>（握手时密钥交换算法和签名算法都是使用 RSA）</p><p>（4）服务器的数字证书「<strong>Server Certificate</strong>」。</p><p>「<strong>Server Hello Done</strong>」结束</p><p><strong>客户端收到服务器的回应之后，确认服务器的数字证书的真实性。从数字证书中取出服务器的公钥，然后使用它加密报文，向服务器发送如下信息「<strong>Client Key Exchange</strong>」：</strong></p><p>（1）一个随机数（<code>pre-master key</code>）。该随机数会被服务器公钥加密。</p><p>（2）加密通信算法改变通知「<strong>Change Cipher Spec</strong>」，表示随后的信息都将用「会话秘钥」加密通信。</p><p>（3）客户端握手结束通知，表示客户端的握手阶段已经结束。这一项同时「<strong>Encrypted Handshake Message（Finishd）<strong>把</strong>之前所有内容的发生的数据做个摘要，用来供服务端校验。</strong></p><p><strong>服务器收到客户端的第三个随机数（<code>pre-master key</code>）之后，通过协商的加密算法，计算出本次通信的「会话秘钥」。</strong></p><p>（1）加密通信算法改变通知「<strong>Change Cipher Spec</strong>」，<strong>Encrypted Handshake Message</strong>验证，表示随后的信息都将用「会话秘钥」加密通信。</p><p>（2）服务器握手结束通知，表示服务器的握手阶段已经结束。这一项同时把之前所有内容的发生的数据做个摘要，用来供客户端校验。</p><p><strong>TLS四次握手:（ECDHE）</strong></p><p><strong>可以不用等最后一次握手结束就可以传输消息</strong></p><p><strong>DH 算法分为两种实现：</strong></p><ul><li>static DH 算法，一方的私钥是静态的，不具有前向安全性；</li><li>DHE 算法，两方的密钥全部随机，现在常用的，计算性能不佳；</li><li>ECDHE算法， ECC 椭圆曲线特性，可以用更少的计算量计算出公钥</li></ul><p><strong>使用了 ECDHE，在 TLS 第四次握手前，客户端就已经发送了加密的 HTTP 数据</strong>，而对于 RSA 握手过程，必须要完成 TLS 四次握手，才能传输应用数据。</p><p><strong>首先客户端发送<code>ClientHello</code>(加密通信)请求</strong></p><p>（1）客户端支持的 TLS 协议版本，如 TLS 1.2 版本。</p><p>（2）客户端生产的随机数（<code>Client Random</code>），后面用于生成「会话秘钥」条件之一。</p><p>（3）客户端支持的密码套件列表，如RSA 加密算法。</p><p><strong>服务器收到客户端请求后，向客户端发出响应 <code>SeverHello</code></strong></p><p>（1）确认 TLS 协议版本，如果浏览器不支持，则关闭加密通信。</p><p>（2）服务器生产的随机数（<code>Server Random</code>）</p><p>（4）确认的密码套件列表，如 RSA 加密算法。<strong>密钥交换算法 + 签名算法 + 对称加密算法 + 摘要算法</strong></p><ul><li>密钥协商算法使用 ECDHE；</li><li>签名算法使用 RSA</li></ul><p>（5）服务器的数字证书「<strong>Certificate</strong>」消息，会把证书也发给客户端，「<strong>Server Key Exchange</strong>」这个过程中 服务器生产的随机数（<code>Server Random</code>）作为服务端的私钥，基点 G 和私钥计算出<strong>服务端的椭圆曲线公钥</strong>。。</p><p>「<strong>Server Hello Done</strong>」结束</p><p>第二轮结束后共享的消息：<strong>Client Random、Server Random 、使用的椭圆曲线、椭圆曲线基点 G、服务端椭圆曲线的公钥</strong></p><p><strong>客户端收到服务器的回应之后，确认服务器的数字证书的真实性。从数字证书中取出服务器的公钥，然后使用它加密报文，向服务器发送如下信息「<strong>Client Key Exchange</strong>」：</strong></p><p>（1）一个随机数（<code>pre-master key</code>）作为客户端椭圆曲线的私钥。生成<strong>客户端的椭圆曲线公钥</strong>。</p><p>（2）<strong>最终的会话密钥，就是用「客户端随机数 + 服务端随机数 + x（ECDHE 算法算出的共享密钥） 」三个材料生成的</strong>。</p><p>（3）加密通信算法改变通知「<strong>Change Cipher Spec</strong>」，表示随后的信息都将用「会话秘钥」加密通信。</p><p>（4）客户端握手结束通知，表示客户端的握手阶段已经结束。这一项同时「<strong>Encrypted Handshake Message（Finishd）<strong>把</strong>之前所有内容的发生的数据做个摘要，用来供服务端校验。</strong></p><p><strong>服务器收到客户端的第三个随机数（<code>pre-master key</code>）之后，通过协商的加密算法，计算出本次通信的「会话秘钥」。</strong></p><p>（1）加密通信算法改变通知「<strong>Change Cipher Spec</strong>，表示随后的信息都将用「会话秘钥」加密通信。</p><p>（2）服务器握手结束通知，表示服务器的握手阶段已经结束。这一项同时把之前所有内容的发生的数据做个摘要，用来供客户端校验。</p><h3 id="_4-https的应用数据时如保证完整性的" tabindex="-1"><a class="header-anchor" href="#_4-https的应用数据时如保证完整性的"><span>4.HTTPS的应用数据时如保证完整性的</span></a></h3><p>TLS 在实现上分为<strong>握手协议</strong>和<strong>记录协议</strong>两层：</p><ul><li>TLS 握手协议就是我们前面说的 TLS 四次握手的过程，负责协商加密算法和生成对称密钥，后续用此密钥来保护应用程序数据（即 HTTP 数据）；</li><li>TLS 记录协议负责保护应用程序数据并验证其完整性和来源，所以对 HTTP 数据加密是使用记录协议；</li></ul><p><strong>HTTPS 协议本身到目前为止还是没有任何漏洞的，即使你成功进行中间人攻击，本质上是利用了客户端的漏洞（用户点击继续访问或者被恶意导入伪造的根证书），并不是 HTTPS 不够安全</strong>。</p><p>假基站和抓包工具</p>',61),o={},s=(0,r(6786).A)(o,[["render",function(t,e){return(0,p.uX)(),(0,p.CE)("div",null,[(0,p.Q3)(" more "),n])}]]),l=JSON.parse('{"path":"/demo/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/HTTP/HTTP%E5%92%8CHTTPS%E7%9A%84%E5%8C%BA%E5%88%AB.html","title":"HTTP和HTTPS的区别","lang":"zh-CN","frontmatter":{"title":"HTTP和HTTPS的区别","date":"2023-11-22T00:00:00.000Z","tags":["计算机基础","计算机网络","HTTP","HTTPS"],"categories":["计算机网络"],"head":[["meta",{"property":"og:url","content":"https://flipped1001.cn/demo/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/HTTP/HTTP%E5%92%8CHTTPS%E7%9A%84%E5%8C%BA%E5%88%AB.html"}],["meta",{"property":"og:site_name","content":"Flipped"}],["meta",{"property":"og:title","content":"HTTP和HTTPS的区别"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-16T10:13:48.000Z"}],["meta",{"property":"article:author","content":"Flipped"}],["meta",{"property":"article:tag","content":"计算机基础"}],["meta",{"property":"article:tag","content":"计算机网络"}],["meta",{"property":"article:tag","content":"HTTP"}],["meta",{"property":"article:tag","content":"HTTPS"}],["meta",{"property":"article:published_time","content":"2023-11-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-16T10:13:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"HTTP和HTTPS的区别\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-11-22T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-16T10:13:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Flipped\\",\\"url\\":\\"www.flipped1001.cn\\"}]}"]]},"headers":[{"level":2,"title":"HTTP和HTTPS：","slug":"http和https","link":"#http和https","children":[{"level":3,"title":"1.HTTP和HTTPS的区别：","slug":"_1-http和https的区别","link":"#_1-http和https的区别","children":[]},{"level":3,"title":"2.HTTPS解决了HTTP的那些问题?","slug":"_2-https解决了http的那些问题","link":"#_2-https解决了http的那些问题","children":[]},{"level":3,"title":"3.HTTPS是如何建立连接的,期间交互了什么?","slug":"_3-https是如何建立连接的-期间交互了什么","link":"#_3-https是如何建立连接的-期间交互了什么","children":[]},{"level":3,"title":"4.HTTPS的应用数据时如保证完整性的","slug":"_4-https的应用数据时如保证完整性的","link":"#_4-https的应用数据时如保证完整性的","children":[]}]}],"git":{"createdTime":1721124828000,"updatedTime":1721124828000,"contributors":[{"name":"flipped1001","email":"3154147351@qq.com","commits":1}]},"readingTime":{"minutes":7.15,"words":2145},"filePathRelative":"demo/计算机网络/HTTP/HTTP和HTTPS的区别.md","localizedDate":"2023年11月22日","excerpt":""}')}}]);