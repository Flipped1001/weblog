"use strict";(self.webpackChunkvuepress_theme_hope_template=self.webpackChunkvuepress_theme_hope_template||[]).push([[1519],{6786:(e,a)=>{a.A=(e,a)=>{const p=e.__vccOpts||e;for(const[e,t]of a)p[e]=t;return p}},7830:(e,a,p)=>{p.r(a),p.d(a,{comp:()=>s,data:()=>d});var t=p(2758);const n=[(0,t.Fv)('<p>计网部分：</p><h4 id="_1-tcp和udp的区别" tabindex="-1"><a class="header-anchor" href="#_1-tcp和udp的区别"><span>1.TCP和UDP的区别</span></a></h4><p>TCP和UDP是传输层常见的两种传输协议，提供一种可靠的数据传输和通信方式；</p><p>其中，TCP的特点是：面向连接，可靠的，基于字节流的</p><p>提供一种可靠的数据传输，所以一般适用于上传下载，网页请求，邮件发送等场景</p><p>UDP的特点是：无连接，不可靠的，面向报文的 提供一种快速，但相对不可靠的数据传输，所以常用在对数据实时性要求较高，对数据完整性和正确性不那么高的场景，比如音视频通话，一些实时游戏</p><h4 id="_2-tcp是如何做链接管理的" tabindex="-1"><a class="header-anchor" href="#_2-tcp是如何做链接管理的"><span>2.TCP是如何做链接管理的？</span></a></h4><p>TCP在连接时使用三次握手，在断开时使用四次握手；确保连接的稳定和可靠</p><hr><h4 id="_3-tcp是如何保证可靠的" tabindex="-1"><a class="header-anchor" href="#_3-tcp是如何保证可靠的"><span>3.TCP是如何保证可靠的？</span></a></h4><p>通过确认应答机制以及重传机制来保证数据传输的可靠</p><h4 id="_4-重传机制有哪些" tabindex="-1"><a class="header-anchor" href="#_4-重传机制有哪些"><span>4.重传机制有哪些？</span></a></h4><p>1.超时重传：已建立连接或者正在建立连接的两方，其中一方在发出数据包之后超一定时间，不返回ACK包，那么这一方就会认定出现丢包现象，重传这个数据包</p><p>2.快速重传：已建立连接或者正在建立连接的两方，其中一方在发出数据包之后，重复三次收到相同的ACK包，那么这一方就会认为数据包丢失，重传数据包； <strong>快速重传解决了超时重传重传周期太长的问题，但是超时重传和快速重传都具有一个问题：在一端 发送一堆数据包之后，其中某一个/几个数据包丢失时，无法精准定位是哪一个/几个，所以会选择将这个数据包之后的所有数据包全部重传一遍，容易造成资源的浪费，和网络的负担</strong></p><p>3.SACK：在TCP头部加一个SACK字段在每次接收完数据之后，将接收到数据的信息放到ACK包的这个字段，告知对方接收了哪些数据；<u><strong>这样如果出现数据丢失，发送方根据这一字段就可以精准定位这个丢失包，并且重发这个包</strong></u></p><p>4.Duplicate SACK：又称<code>D_SACK</code>，用于通知发送方哪些数据被重复接收了；<em><strong>让发送方知道时丢包还是网络延迟</strong></em></p><hr><h4 id="_5-tcp是如何保证有序的" tabindex="-1"><a class="header-anchor" href="#_5-tcp是如何保证有序的"><span>5.TCP是如何保证有序的？</span></a></h4><p>在发送方，当传输层使用TCP协议时，数据包在经过传输层时可能会被拆分成多个小数据包，这个时候在TCP报文段中，每段数据都会被标记上一个序列号，表示数据在数据流中的位置</p><p>在发送方接受到这些数据包的时候，会将它放到缓冲区，并根据序列号进行排序和重新组装，以确保数据的有序性</p><h4 id="_6-粘包问题" tabindex="-1"><a class="header-anchor" href="#_6-粘包问题"><span>6.粘包问题？</span></a></h4><p>TCP时一个面向字节流的协议，所谓字节流就是一串没有边界的二进制数据</p><p>在当使用TCP协议时，在传输层，一个完整的数据包可能会被拆分成多个小的数据包，也可能多个小的数据包会被合并成一个大数据包发送，就会出现连包和拆包的问题，导致接收方无法正确解析数据边界，造成数据处理错误</p><p><strong>解决方法：</strong></p><p>1.固定数据长度：在发送数据的同时，将每个包的长度固定</p><p>2.使用特殊符号标识边界：例如在每一个完整的数据之后加一个特殊字符</p><p>3.自定义消息结构：我们可以自定义一个消息结构，由头部和消息体组成，在头部保存当前整个消息的长度</p><p>4.通过自定义协议</p><hr><h4 id="_7-滑动窗口" tabindex="-1"><a class="header-anchor" href="#_7-滑动窗口"><span>7.滑动窗口</span></a></h4><p>在TCP建立连接的时候，双方协商缓冲区大小，通过Window字段告知对方本端的缓冲区大小， 并在TCP连接建立之后开辟出一片缓冲区</p><p>在连接建立之后，发送端就可以跟据接收端和本端窗口大小，向对方发送相应的字节数；接收放在接收完数据之后将其放到缓冲区，等待上层应用读取，当数据被读取，相应的缓冲区就会被释放；并跟据本端剩余缓冲区大小通告对方当前能接受数据的缓冲区大小</p><p>发送方根据接收方的窗口变化，相应改变本端的窗口大小；然后发送方就可以根据接收端和本端窗口大小继续发送数据</p><h4 id="_8-拥塞控制" tabindex="-1"><a class="header-anchor" href="#_8-拥塞控制"><span>8.拥塞控制</span></a></h4><p>1.慢启动：在TCP连接建立完成之后，它发送数据的能力会呈指数形式增长，每收到1次ACK，拥塞窗口加1</p><p>2.拥塞避免：当拥塞窗口超过慢启动门限，就会进入拥塞避免算法，此时他发送数据的能力呈线性增长，<strong>每当收到一个 ACK 时，cwnd 增加 1/cwnd。</strong></p><p>3.拥塞发生：</p><ul><li>发生超时重传的拥塞发生算法：慢启动门限变成<strong>拥塞窗口/2</strong>，直接将拥塞窗口降为1</li><li>发生快速重传的拥塞发生算法：将拥塞窗口减半，慢启动门限等于当前拥塞窗口，进入快恢复算法</li></ul><p>4.快速恢复：</p><ul><li>拥塞窗口 <code>cwnd = ssthresh + 3</code> （ 3 的意思是确认有 3 个数据包被收到了）；</li><li>重传丢失的数据包；</li><li>如果再收到重复的 ACK，那么 cwnd 增加 1；</li><li>如果收到新数据的 ACK 后，把 cwnd 设置为第一步中的 ssthresh 的值，原因是该 ACK 确认了新的数据，说明从 duplicated ACK 时的数据都已收到，该恢复过程已经结束，可以回到恢复之前的状态了，也即再次进入拥塞避免状态；</li></ul><h4 id="_9-tcp的三次握手和四次挥手" tabindex="-1"><a class="header-anchor" href="#_9-tcp的三次握手和四次挥手"><span>9.TCP的三次握手和四次挥手？</span></a></h4><h5 id="三次握手" tabindex="-1"><a class="header-anchor" href="#三次握手"><span>三次握手</span></a></h5><h6 id="_1-第一次握手" tabindex="-1"><a class="header-anchor" href="#_1-第一次握手"><span>1.第一次握手</span></a></h6><p><strong>首先双方都处于<code>closed</code>状态，客户端会发送一个带有<code>SYN</code>（同步序列编号）标志的TCP报文到服务器，表示客户端请求连接；并且在其中客户端还会选择一个<code>ISN</code>（初始序列号）放入<code>SYN</code>报文段中</strong></p><p>第一次握手之后：客户端处于<code>SYN_SENT</code>状态（同步已发送），服务器处于<code>LISTEN</code>（监听状态）</p><h6 id="_2-第二次握手" tabindex="-1"><a class="header-anchor" href="#_2-第二次握手"><span>2.第二次握手</span></a></h6><p><strong>服务器同意建立连接，会回复一个带有<code>SYN</code>和<code>ACK</code>（确认号）标识的TCP报文；服务器也会选择一个初始序列号用于标识服务器到客户端的数据流</strong></p><p>第二次握手之后：客户端处于<code>SYN_SENT</code>状态，服务器处于<code>SYN-RCVD</code>（半连接状态）</p><h6 id="_3-第三次握手" tabindex="-1"><a class="header-anchor" href="#_3-第三次握手"><span>3.第三次握手</span></a></h6><p><strong>客户端在接收服务器的带有<code>SYN</code>和<code>ACK</code>（确认号）标识的TCP报文之后，会向服务器发送一个带有<code>ACK</code>标志的确认报文段;并且这个报文字段包含客户端收到的服务端的<code>ISN</code>，以及<code>ACK</code>（表示客户端希望下一次接受的序列号）</strong></p><p>第三次握手之后：客户端和服务器都进入<code>ESTABLISHED</code></p><p>三次握手的目的是<strong>确认双方都有发送和接受的能力</strong></p><h5 id="四次挥手" tabindex="-1"><a class="header-anchor" href="#四次挥手"><span>四次挥手</span></a></h5><h6 id="_1-第一次挥手" tabindex="-1"><a class="header-anchor" href="#_1-第一次挥手"><span>1.第一次挥手</span></a></h6><p>客户端主动想要断开连接，向服务器发送一个FIN报文，之后客户端进入FIN_WAIT_1状态</p><h6 id="_2-第二次挥手" tabindex="-1"><a class="header-anchor" href="#_2-第二次挥手"><span>2.第二次挥手</span></a></h6><p>服务端收到该报文，向客户端发送一个ACK报文，服务端进入CLOSE_WAIT状态，客户端接收之后进入FIN_WAIT_2状态</p><h6 id="_3-第三次挥手" tabindex="-1"><a class="header-anchor" href="#_3-第三次挥手"><span>3.第三次挥手</span></a></h6><p>服务端可能还有数据需要处理和发送，等服务端不再发送数据时，发送FIN报文，之后服务端进入LAST_ACK状态</p><h6 id="_4-第四次挥手" tabindex="-1"><a class="header-anchor" href="#_4-第四次挥手"><span>4.第四次挥手</span></a></h6><p>客户端向服务端发送ACK报文，服务端接收到报文之后进入CLOSE状态，而客户端则会TIME_WAIT(2MSL)之后进入CLOSE状态</p><p><strong>主动关闭连接的，才有 TIME_WAIT 状态。</strong></p><h4 id="_10-time-wait状态的意义" tabindex="-1"><a class="header-anchor" href="#_10-time-wait状态的意义"><span>10.time_wait状态的意义</span></a></h4><p>TIME_WAIT状态标识一个连接已经完成了关闭过程，并且在等最后的确认报文</p><p>有两点作用：</p><p>第一点：</p><ul><li>防止历史连接中的数据，被后面相同四元组的连接错误的接收；</li></ul><p>第二点：</p><ul><li>保证「被动关闭连接」的一方，能被正确的关闭；</li></ul><p>如果没有time_wait状态或者time_wait时间太短，可能导致数据错乱或者连接错误</p><h4 id="_11-为什么需要三次握手而不是四次-两次" tabindex="-1"><a class="header-anchor" href="#_11-为什么需要三次握手而不是四次-两次"><span>11.为什么需要三次握手而不是四次，两次</span></a></h4><h4 id="什么是restful风格" tabindex="-1"><a class="header-anchor" href="#什么是restful风格"><span>什么是restful风格？</span></a></h4><p>RESTful 是一种针对网络应用程序设计的架构风格，它基于 HTTP 协议，强调了资源的标识、状态和操作的统一性。</p>',73)],r={},s=(0,p(6786).A)(r,[["render",function(e,a){return(0,t.uX)(),(0,t.CE)("div",null,n)}]]),d=JSON.parse('{"path":"/%E4%B8%80%E9%97%AE%E4%B8%80%E7%AD%94/%E8%AE%A1%E7%BD%91.html","title":"学习疑问","lang":"zh-CN","frontmatter":{"title":"学习疑问","date":"2022-05-07T00:00:00.000Z","tags":["回答"],"categories":["计网","答疑"],"description":"计网部分： 1.TCP和UDP的区别 TCP和UDP是传输层常见的两种传输协议，提供一种可靠的数据传输和通信方式； 其中，TCP的特点是：面向连接，可靠的，基于字节流的 提供一种可靠的数据传输，所以一般适用于上传下载，网页请求，邮件发送等场景 UDP的特点是：无连接，不可靠的，面向报文的 提供一种快速，但相对不可靠的数据传输，所以常用在对数据实时性要求...","head":[["meta",{"property":"og:url","content":"https://flipped1001.cn/%E4%B8%80%E9%97%AE%E4%B8%80%E7%AD%94/%E8%AE%A1%E7%BD%91.html"}],["meta",{"property":"og:site_name","content":"Flipped"}],["meta",{"property":"og:title","content":"学习疑问"}],["meta",{"property":"og:description","content":"计网部分： 1.TCP和UDP的区别 TCP和UDP是传输层常见的两种传输协议，提供一种可靠的数据传输和通信方式； 其中，TCP的特点是：面向连接，可靠的，基于字节流的 提供一种可靠的数据传输，所以一般适用于上传下载，网页请求，邮件发送等场景 UDP的特点是：无连接，不可靠的，面向报文的 提供一种快速，但相对不可靠的数据传输，所以常用在对数据实时性要求..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-18T12:51:12.000Z"}],["meta",{"property":"article:author","content":"Flipped"}],["meta",{"property":"article:tag","content":"回答"}],["meta",{"property":"article:published_time","content":"2022-05-07T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-18T12:51:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"学习疑问\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-05-07T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-18T12:51:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Flipped\\",\\"url\\":\\"www.flipped1001.cn\\"}]}"]]},"headers":[],"git":{"createdTime":1721299414000,"updatedTime":1721307072000,"contributors":[{"name":"flipped1001","email":"3154147351@qq.com","commits":2}]},"readingTime":{"minutes":7.56,"words":2267},"filePathRelative":"一问一答/计网.md","localizedDate":"2022年5月7日","excerpt":"<p>计网部分：</p>\\n<h4>1.TCP和UDP的区别</h4>\\n<p>TCP和UDP是传输层常见的两种传输协议，提供一种可靠的数据传输和通信方式；</p>\\n<p>其中，TCP的特点是：面向连接，可靠的，基于字节流的</p>\\n<p>提供一种可靠的数据传输，所以一般适用于上传下载，网页请求，邮件发送等场景</p>\\n<p>UDP的特点是：无连接，不可靠的，面向报文的\\n提供一种快速，但相对不可靠的数据传输，所以常用在对数据实时性要求较高，对数据完整性和正确性不那么高的场景，比如音视频通话，一些实时游戏</p>\\n<h4>2.TCP是如何做链接管理的？</h4>\\n<p>TCP在连接时使用三次握手，在断开时使用四次握手；确保连接的稳定和可靠</p>","autoDesc":true}')}}]);