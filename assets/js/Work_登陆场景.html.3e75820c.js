"use strict";(self.webpackChunkvuepress_theme_hope_template=self.webpackChunkvuepress_theme_hope_template||[]).push([[9906],{6786:(i,e)=>{e.A=(i,e)=>{const t=i.__vccOpts||i;for(const[i,s]of e)t[i]=s;return t}},4349:(i,e,t)=>{t.r(e),t.d(e,{comp:()=>o,data:()=>r});var s=t(2758);const l=t.p+"assets/img/2024-05-29-17-03-23.becb0126.png",a=(0,s.Fv)('<h3 id="_1-什么是oauth2-0" tabindex="-1"><a class="header-anchor" href="#_1-什么是oauth2-0"><span>1.什么是OAUTH2.0?</span></a></h3><p>OAuth 2.0 是一种用于授权的开放标准协议，它允许第三方应用程序在资源所有者的许可下访问资源所有者的资源，而无需暴露资源所有者的凭据（如用户名和密码）。它通常用于提供第三方访问HTTP服务，例如社交媒体账户、在线文件存储等。OAuth 2.0 是 OAuth 协议的第二个版本，比 OAuth 1.0 简化了许多流程，增强了灵活性和安全性。</p><p>OAuth 2.0 的工作流程主要涉及以下角色：</p><ol><li><strong>资源所有者（Resource Owner）</strong>：即用户，拥有受保护的资源，并通过授权服务器授予客户端访问这些资源的权限</li><li><strong>客户端（Client）</strong>：想要访问资源拥有者的资源的应用程序。它需要获得授权才能访问资源服务器上的受保护资源。</li><li><strong>授权服务器（Authorization Server）</strong>：处理客户端的授权请求，并颁发访问令牌。授权服务器验证资源拥有者的身份并获取其授权。</li><li><strong>资源服务器（Resource Server）</strong>：托管资源拥有者的受保护资源，并使用访问令牌来验证和处理客户端的请求。</li></ol><p>OAuth 2.0 的基本授权流程如下：</p><ol><li><strong>客户端请求授权</strong>：客户端向资源所有者请求授权，通常通过用户界面引导用户进行授权。</li><li><strong>资源所有者授予授权</strong>：资源所有者同意授权，并通过授权服务器生成授权代码（Authorization Code）。</li><li><strong>客户端获取授权代码</strong>：客户端收到授权代码。</li><li><strong>客户端交换授权代码</strong>：客户端将授权代码发送给授权服务器，交换访问令牌。</li><li><strong>授权服务器颁发访问令牌</strong>：授权服务器验证授权代码并向客户端颁发访问令牌。</li><li><strong>客户端访问资源</strong>：客户端使用访问令牌访问资源服务器上的资源。</li></ol><h6 id="a-oauth-2-0-授权模式" tabindex="-1"><a class="header-anchor" href="#a-oauth-2-0-授权模式"><span>a. OAuth 2.0 授权模式</span></a></h6><p>OAuth 2.0 定义了多种授权模式，以满足不同的应用场景：</p><ol><li><strong>授权码模式（Authorization Code Grant）</strong>：最常用的模式，适用于服务器端应用，包含了授权码的获取和交换流程。</li><li><strong>简化模式（Implicit Grant）</strong>：主要用于浏览器中的单页应用，省略了授权码的交换步骤，直接获取访问令牌。</li><li><strong>密码模式（Resource Owner Password Credentials Grant）</strong>：用户直接向客户端提供用户名和密码，适用于信任级别较高的应用。</li><li><strong>客户端凭证模式（Client Credentials Grant）</strong>：客户端以自身身份获取访问令牌，用于访问自身资源或服务端间的交互。</li></ol><h3 id="_2-用户扫码是如何实现的" tabindex="-1"><a class="header-anchor" href="#_2-用户扫码是如何实现的"><span>2.用户扫码是如何实现的</span></a></h3><p>这边以微信登陆为例：</p><ol><li>首先用户点击微信登陆，第三方网站或应用程序生成一个用于登录的二维码，并将其展示给用户。</li><li>用户使用微信扫描该二维码。</li><li>微信客户端将请求发送到微信服务器，并请求用户授权该第三方应用程序访问其个人信息。</li><li>用户在微信客户端上看到授权请求，可以选择允许或拒绝。</li><li>如果用户同意授权，微信服务器带着授权码回调到回调地址上，然后第三方网站或应用程序带着这个授权码向微信服务器请求令牌</li><li>微信服务器在校验授权码有效性之后，将向第三方应用程序颁发一个访问令牌（Access Token），该令牌用于代表用户访问其个人信息。</li><li>第三方应用程序可以使用此访问令牌来获取用户的个人信息，例如昵称、头像等。用户在第三方应用程序中进行操作，第三方应用程序使用访问令牌向微信服务器请求用户的个人信息。</li></ol><figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_3-如果要实现不同域名下的cookie正常使用-应该怎么处理" tabindex="-1"><a class="header-anchor" href="#_3-如果要实现不同域名下的cookie正常使用-应该怎么处理"><span>3. 如果要实现不同域名下的cookie正常使用，应该怎么处理？</span></a></h3><ol><li><strong>设置 Cookie 的域名属性：</strong> 当设置 Cookie 时，可以通过指定域名属性来确保 Cookie 在不同子域名之间共享。例如，如果你希望 Cookie 在<code>example.com</code>和<code>subdomain.example.com</code>之间共享，则可以设置 Cookie 的域名属性为<code>.example.com</code>（注意前面的点号），这样 Cookie 就可以在所有以<code>example.com</code>为结尾的子域名下共享。</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">document</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">cookie</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;name=value; domain=.example.com; path=/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="2"><li><strong>设置跨域资源共享（CORS）：</strong> 如果是通过 AJAX 或 Fetch 发起的跨域请求，需要在服务器端设置适当的 CORS 头来允许跨域请求。服务器响应中应包含 <code>Access-Control-Allow-Origin</code> 头，并设置为允许访问的域名。例如：</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">Access</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">Control</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">Allow</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E06C75;">Origin</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E06C75;">https</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//example.com</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="3"><li><p><strong>使用代理：</strong> 如果跨域请求不能通过上述方法解决，可以考虑在服务器端设置代理，即在同一域名下创建一个中间层，由该中间层代理请求到其他域名，然后再将结果返回给客户端。这种方法可以绕过浏览器的同源策略限制。</p></li><li><p><strong>设置 Cookie 的路径</strong>：确保路径参数设置为 Cookie 所在的路径。通常，将路径设置为根路径 <code>/</code> 是最简单和最通用的方法，使得 Cookie 在整个网站的所有页面中可用。</p></li></ol><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">document</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">cookie</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;name=value; domain=.example.com; path=/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_4-假如1亿用户体量-如何设计一个登录验签服务" tabindex="-1"><a class="header-anchor" href="#_4-假如1亿用户体量-如何设计一个登录验签服务"><span>4.假如1亿用户体量，如何设计一个登录验签服务？</span></a></h3><p>设计一个支持 1 亿用户体量的登录验签服务需要考虑到高可用性、安全性和性能等因素。以下是一个可能的设计方案：</p><ol><li><p><strong>负载均衡</strong>：使用负载均衡技术将流量分发到多个服务器上，以确保服务的高可用性和可扩展性。可以考虑使用负载均衡器如 Nginx 或 AWS ELB。</p></li><li><p><strong>分布式架构</strong>：采用分布式架构，将用户数据和登录状态分布在多个服务器上，以应对大规模用户的访问。可以使用分布式数据库（如MySQL Cluster、Cassandra等）或 NoSQL 数据库（如MongoDB、Redis等）来存储用户数据和登录状态。</p></li><li><p><strong>安全性</strong>：</p><ul><li>使用 HTTPS 协议进行通信，以保障数据的安全传输。</li><li>对用户密码进行加密存储，推荐使用哈希函数加盐存储用户密码，如 bcrypt。</li><li>使用 JWT（JSON Web Token）或类似的令牌机制来生成并验证用户身份，避免在服务端存储用户的敏感信息。</li><li>实施防火墙、DDoS 防护和安全审计等安全措施，保护系统免受恶意攻击。</li></ul></li><li><p><strong>高性能</strong>：</p><ul><li>使用缓存技术加速登录验签过程，例如，将经常访问的用户信息存储在缓存中，减少数据库访问次数。</li><li>使用异步处理技术，如消息队列，将请求分发给多个工作节点并行处理，提高系统的响应速度和吞吐量。</li><li>对数据库进行优化，如索引、分片等，以提高查询性能和扩展性。</li></ul></li><li><p><strong>监控和日志</strong>：建立完善的监控系统，实时监控系统运行状态、性能指标和异常情况，并及时进行预警和处理。同时，记录日志以便追踪和排查问题。</p></li><li><p><strong>容灾备份</strong>：定期进行数据备份，并建立容灾备份系统，以防止数据丢失和系统故障导致的服务中断。</p></li><li><p><strong>合理的访问限制</strong>：实施合理的访问限制策略，如限制登录失败次数、IP 访问频率等，以防止暴力破解和恶意攻击。</p></li><li><p><strong>持续优化</strong>：定期进行性能测试和优化，不断改进系统架构和代码实现，以适应不断增长的用户体量和变化的需求。</p></li></ol>',23),n={},o=(0,t(6786).A)(n,[["render",function(i,e){return(0,s.uX)(),(0,s.CE)("div",null,[(0,s.Q3)(" more "),a])}]]),r=JSON.parse('{"path":"/Work/%E7%99%BB%E9%99%86%E5%9C%BA%E6%99%AF.html","title":"用户登录","lang":"zh-CN","frontmatter":{"title":"用户登录","date":"2024-05-16T00:00:00.000Z","tags":["用户登录"],"categories":["业务场景"],"head":[["meta",{"property":"og:url","content":"https://flipped1001.cn/Work/%E7%99%BB%E9%99%86%E5%9C%BA%E6%99%AF.html"}],["meta",{"property":"og:site_name","content":"Flipped"}],["meta",{"property":"og:title","content":"用户登录"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-09T13:05:22.000Z"}],["meta",{"property":"article:author","content":"Flipped"}],["meta",{"property":"article:tag","content":"用户登录"}],["meta",{"property":"article:published_time","content":"2024-05-16T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-09T13:05:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"用户登录\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-16T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-09T13:05:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Flipped\\",\\"url\\":\\"www.flipped1001.cn\\"}]}"]]},"headers":[{"level":3,"title":"1.什么是OAUTH2.0?","slug":"_1-什么是oauth2-0","link":"#_1-什么是oauth2-0","children":[]},{"level":3,"title":"2.用户扫码是如何实现的","slug":"_2-用户扫码是如何实现的","link":"#_2-用户扫码是如何实现的","children":[]},{"level":3,"title":"3. 如果要实现不同域名下的cookie正常使用，应该怎么处理？","slug":"_3-如果要实现不同域名下的cookie正常使用-应该怎么处理","link":"#_3-如果要实现不同域名下的cookie正常使用-应该怎么处理","children":[]},{"level":3,"title":"4.假如1亿用户体量，如何设计一个登录验签服务？","slug":"_4-假如1亿用户体量-如何设计一个登录验签服务","link":"#_4-假如1亿用户体量-如何设计一个登录验签服务","children":[]}],"git":{"createdTime":1721299414000,"updatedTime":1723208722000,"contributors":[{"name":"flipped1001","email":"3154147351@qq.com","commits":5}]},"readingTime":{"minutes":6.82,"words":2045},"filePathRelative":"Work/登陆场景.md","localizedDate":"2024年5月16日","excerpt":""}')}}]);