"use strict";(self.webpackChunkvuepress_theme_hope_template=self.webpackChunkvuepress_theme_hope_template||[]).push([[5879],{6786:(t,o)=>{o.A=(t,o)=>{const n=t.__vccOpts||t;for(const[t,e]of o)n[t]=e;return n}},103:(t,o,n)=>{n.r(o),n.d(o,{comp:()=>l,data:()=>d});var e=n(2758);const r=n.p+"assets/img/2024-05-16-21-42-43.8bba890c.png",s=n.p+"assets/img/2024-05-16-21-43-01.7cfa75fa.png",i=n.p+"assets/img/2024-05-16-21-43-14.2c8f6bf8.png",a=n.p+"assets/img/2024-05-16-21-43-25.f540a656.png",g=n.p+"assets/img/2024-05-16-21-43-39.99d0540b.png",p=(0,e.Fv)('<h1 id="键入网址到网页显示-期间发生了什么" tabindex="-1"><a class="header-anchor" href="#键入网址到网页显示-期间发生了什么"><span>键入网址到网页显示，期间发生了什么？</span></a></h1><h3 id="_1-浏览器第一步工作是解析ulr-然后生产http请求消息-然后会委托操作系统发送消息" tabindex="-1"><a class="header-anchor" href="#_1-浏览器第一步工作是解析ulr-然后生产http请求消息-然后会委托操作系统发送消息"><span>1.浏览器第一步工作是解析ULR，然后生产HTTP请求消息，然后会<strong>委托操作系统发送消息</strong></span></a></h3><h3 id="_2-在发送之前-必须查询服务器域名对应的ip地址-在委托操作系统发送消息时必须提供通讯对象的ip地址" tabindex="-1"><a class="header-anchor" href="#_2-在发送之前-必须查询服务器域名对应的ip地址-在委托操作系统发送消息时必须提供通讯对象的ip地址"><span>2.在发送之前，<strong>必须查询服务器域名对应的IP地址</strong>，在委托操作系统发送消息时必须提供<strong>通讯对象的IP地址</strong></span></a></h3><h4 id="dns服务器-专门保存了-web-服务器域名与-ip-的对应关系" tabindex="-1"><a class="header-anchor" href="#dns服务器-专门保存了-web-服务器域名与-ip-的对应关系"><span>DNS服务器:专门保存了 <code>Web</code> 服务器域名与 <code>IP</code> 的对应关系</span></a></h4><p><code>www.server.com.</code>，<code>.</code> 根域是在最顶层，它的下一层就是 <code>.com</code> 顶级域，再下面是 <code>server.com</code>。</p><p>所以域名的层级关系类似一个树状结构：</p><ul><li>根 DNS 服务器（.）</li><li>顶级域 DNS 服务器（.com）</li><li>权威 DNS 服务器（server.com）</li></ul><p><strong>根域的 DNS 服务器信息保存在互联网中所有的 DNS 服务器中。</strong> 户端只要能够找到任意一台 DNS 服务器，就可以通过它找到根域 DNS 服务器，然后再一路顺藤摸瓜找到位于下层的某台目标 DNS 服务器。</p><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h6 id="只指路不带路" tabindex="-1"><a class="header-anchor" href="#只指路不带路"><span>只指路不带路</span></a></h6><h3 id="_3-通过dns获取到ip后-把传输工作给操作系统中的协议栈" tabindex="-1"><a class="header-anchor" href="#_3-通过dns获取到ip后-把传输工作给操作系统中的协议栈"><span>3.通过DNS获取到IP后，把传输工作给操作系统中的协议栈</span></a></h3><p>应用程序（浏览器）通过调用 Socket 库，来委托协议栈工作。</p><figure><img src="'+s+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>协议栈的上半部分有两块，分别是负责收发数据的 TCP 和 UDP 协议，这两个传输协议会接受应用层的委托执行收发数据的操作</strong><strong>下面一半是用 IP 协议控制网络包收发操作，在互联网上传数据时，数据会被切分成一块块的网络包，而将网络包发送给对方的操作就是由 IP 负责的</strong></p><p>此外 IP 中还包括 <code>ICMP</code> 协议和 <code>ARP</code> 协议。</p><ul><li><code>ICMP</code> 用于告知网络包传送过程中产生的错误以及各种控制信息。</li><li><code>ARP</code> 用于根据 IP 地址查询相应的以太网 MAC 地址。</li></ul><p>IP 下面的网卡驱动程序负责控制网卡硬件，而最下面的网卡则负责完成实际的收发操作，也就是对网线中的信号执行发送和接收操作。</p><h3 id="_4-http协议是基于tcp协议传输的" tabindex="-1"><a class="header-anchor" href="#_4-http协议是基于tcp协议传输的"><span>4.http协议是基于TCP协议传输的</span></a></h3><p>在 HTTP 传输数据之前，首先需要 TCP 建立连接，TCP 连接的建立，通常称为<strong>三次握手</strong>。</p><h6 id="_1-第一次握手" tabindex="-1"><a class="header-anchor" href="#_1-第一次握手"><span>1.第一次握手</span></a></h6><p><strong>首先双方都处于<code>closed</code>状态，客户端会发送一个带有<code>SYN</code>（同步序列编号）标志的TCP报文到服务器，表示客户端请求连接；并且在其中客户端还会选择一个<code>ISN</code>（初始序列号）放入<code>SYN</code>报文段中</strong></p><p><strong>ISN</strong>：用于标识客户端到服务器的数据流</p><p><strong>SYN</strong>：SYN 标志用于指示一个 TCP 报文段是一个连接请求（SYN=1，ACK=0）或连接接受（SYN=1，ACK=1）</p><p>第一次握手之后：客户端处于<code>SYN_SENT</code>状态（同步已发送），服务器处于<code>LISTEN</code>（监听状态）</p><h6 id="_2-第二次握手" tabindex="-1"><a class="header-anchor" href="#_2-第二次握手"><span>2.第二次握手</span></a></h6><p><strong>服务器同意建立连接，会回复一个带有<code>SYN</code>和<code>ACK</code>（确认号）标识的TCP报文；服务器也会选择一个初始序列号用于标识服务器到客户端的数据流</strong></p><p><strong>ACK</strong>：ACK标识表示确认号表示服务器希望下一次接受的下一序列号，是 SYN 报文段的序列号加一</p><p>第二次握手之后：客户端处于<code>SYN_SENT</code>状态，服务器处于<code>SYN-RCVD</code>（半连接状态）</p><h6 id="_3-第三次握手" tabindex="-1"><a class="header-anchor" href="#_3-第三次握手"><span>3.第三次握手</span></a></h6><p><strong>客户端在接收服务器的带有<code>SYN</code>和<code>ACK</code>（确认号）标识的TCP报文之后，会向服务器发送一个带有<code>ACK</code>标志的确认报文段;并且这个报文字段包含客户端收到的服务端的<code>ISN</code>，以及<code>ACK</code>（表示客户端希望下一次接受的序列号）</strong></p><p>第三次握手之后：客户端和服务器都进入<code>ESTABLISHED</code></p><p>三次握手的目的是<strong>确认双方都有发送和接受的能力</strong></p><figure><img src="'+i+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h6 id="完整的tcp报文" tabindex="-1"><a class="header-anchor" href="#完整的tcp报文"><span>完整的TCP报文：</span></a></h6><figure><img src="'+a+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h6 id="_4-ip" tabindex="-1"><a class="header-anchor" href="#_4-ip"><span>4.IP</span></a></h6><p>TCP模块在执行链接，收发，断开等各阶段操作时，都需要委托IP模块将数据封装成<strong>网络包</strong>发送给通信对象</p><p>IP协议需要<strong>源IP</strong>和<strong>目标地址IP</strong>：</p><ul><li>源地址IP，即是客户端输出的 IP 地址；</li><li>目标地址，即通过 DNS 域名解析得到的 Web 服务器 IP。</li></ul><figure><img src="'+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在IP包头的<strong>协议号</strong>要填写<strong>16</strong>进制的，表示协议为TCP 在客户端有多个网卡的时候，选择源IP时将<strong>目标地址的网络号</strong>（IP与子网掩码做与运算）与<strong>网卡的IP地址</strong>比较选择相同的那个网卡。 如果其它条目都无法匹配自动匹配<strong>默认网关</strong>（目标地址和子网掩码都是 <code>0.0.0.0</code>）</p><p><strong>一个完整的网络包</strong>：</p><figure><img src="https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost/计算机网络/键入网址过程/17.jpg" alt="IP 层报文" tabindex="0" loading="lazy"><figcaption>IP 层报文</figcaption></figure><h6 id="_5-mac" tabindex="-1"><a class="header-anchor" href="#_5-mac"><span>5.MAC</span></a></h6><p>在生成IP包头之后，还需要在网络包前面加一个<strong>MAC头部</strong> MAC头部是以太网使用的头部： 在MAC头里面要包含<strong>发送方MAC地址</strong>和<strong>接收方MAC地址</strong>，用于<strong>两点之间的传输</strong></p><p>在一般的TCP/IP通信里，MAC协议只有两种：</p><ul><li><code>0800</code> ： IP 协议（当以太网数据帧中的以太类型字段的值为0800，数据帧包含的是IP协议的数据）</li><li><code>0806</code> ： ARP 协议（当以太网数据帧中的以太类型字段的值为0806，数据帧包含的是APR协议的数据）</li></ul><p>获取对方的MAC地址，首先根据路由表找到对方IP地址，再跟据APR协议找到对方MAC地址 <strong>APR协议：通过广播的形式从局域网中找到响应者的MAC地址</strong>然后保存到<strong>APR缓存</strong>中，下次先访问<strong>缓存</strong></p><p>通过0806以太类型字段值发送ARP请求来获取目标设备MAC地址与0800以太类型字段值发送ARP请求的方法<strong>类似</strong>，只是前者明确了数据帧中包含的是<strong>ARP协议的数据</strong>。</p><p><strong>MAC报文</strong>：</p><figure><img src="https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost/计算机网络/键入网址过程/21.jpg" alt="MAC 层报文" tabindex="0" loading="lazy"><figcaption>MAC 层报文</figcaption></figure><h3 id="_5-网卡-真正的数据发送" tabindex="-1"><a class="header-anchor" href="#_5-网卡-真正的数据发送"><span>5.网卡（真正的数据发送）</span></a></h3><p><strong>网卡驱动程序</strong>获取网络包，将其<strong>复制</strong>到网卡的<strong>缓存区</strong>，在其开头加上<strong>报头</strong>和<strong>起始帧分界符</strong>，<strong>在末尾加上用于检测错误的帧校验序列</strong></p><figure><img src="https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost4/网络/数据包.drawio.png" alt="数据包" tabindex="0" loading="lazy"><figcaption>数据包</figcaption></figure><ul><li>起始帧分界符是一个用来表示包起始位置的标记</li><li>末尾的 <code>FCS</code>（帧校验序列）用来检查包传输过程是否有损坏</li></ul><p>最后将<strong>数字信息（网络包中的二进制数据）<strong>转为</strong>电信号</strong>，通过网线发送出去</p><h3 id="_6-交换机" tabindex="-1"><a class="header-anchor" href="#_6-交换机"><span>6.交换机</span></a></h3><p>交换机的设计是将网络包<strong>原样</strong>转发到目的地 交换机工作在MAC层，也称<strong>二层网络设备</strong></p><p>首先当电信号到达<strong>网线接口</strong>，交换机将<strong>电信号</strong>转变为<strong>数字信号</strong>，如果没问题则放到<strong>缓存区</strong></p><p>接下来，<strong>交换机通过查询MAC地址表，将信号发送到对应端口</strong></p><p>当在表中找不到的时候，交换机会将包转发到除了<strong>源端口之外的所有端口</strong>，确保设备可以接收**（这样做是没什么问题的，以太网的设计本身就是将包发送到整个网络，只有接收者才会接受，其他则会忽略这个包）**</p><p>如果接受方MAC地址是一个<strong>广播地址</strong>，交换机会将包转发到除了<strong>源端口之外的所有端口</strong></p><p><strong>网卡和交换机的区别</strong>：</p><ul><li>计算机的<strong>网卡本身具有MAC地址</strong>，通过核对收到的<strong>包的接收方</strong>的MAC地址判断是不是发送给自己的，如果不是就丢弃。</li><li><strong>交换机的端口不具有MAC地址</strong>，不核对收到的<strong>包的接收方</strong>的MAC地址，而是直接接受所有包并存在缓冲区</li></ul><p><strong>MAC地址表：</strong></p><ul><li>一个是设备的 MAC 地址，</li><li>另一个是该设备连接在交换机的哪个端口上</li></ul><p><strong>以下两个属于广播地址</strong>：</p><ul><li>MAC 地址中的 <code>FF:FF:FF:FF:FF:FF</code></li><li>IP 地址中的 <code>255.255.255.255</code></li></ul><h3 id="_7-路由器" tabindex="-1"><a class="header-anchor" href="#_7-路由器"><span>7.路由器</span></a></h3><p>网络包经过交换机之后，现在到达了<strong>路由器</strong>，并在此被转发到下一个路由器或目标设备。 当转发包时，首先<strong>路由器端口</strong>会接收发给自己的以太网包，然后<strong>路由表</strong>查询转发目标，再由相应的端口作为发送方将以太网包发送出去。</p><p><strong>路由器接受包：</strong> 首先，电信号到达网线接口部分，路由器中的模块会将电信号转成数字信号，检查 MAC 头部中的<strong>接收方 MAC 地址</strong>，看看是不是发给自己的包，如果是就放到接收缓冲区中，否则就丢弃这个包。</p><p>在完成接收之后，路由器会去掉包<strong>MAC</strong>头部，跟据<strong>IP头部</strong>进行包的转发，跟据<strong>路由表</strong></p><p><strong>路由器发送包</strong>：</p><p>首先，我们需要根据<strong>路由表的网关列</strong>判断对方的地址。</p><ul><li>如果网关是一个 IP 地址，则这个IP 地址就是我们要转发到的目标地址，<strong>还未抵达终点</strong>，还需继续需要路由器转发。</li><li>如果网关为空，则 IP 头部中的接收方 IP 地址就是要转发到的目标地址，也是就终于找到 IP 包头里的目标地址了，说明<strong>已抵达终点</strong>。</li></ul><p>知道对方的 IP 地址之后，接下来需要通过 <code>ARP</code> 协议根据 IP 地址查询 MAC 地址，并将查询的结果作为接收方 MAC 地址。</p><p><strong>路由器和交换机是有区别的</strong>：</p><ul><li>因为<strong>路由器</strong>是基于 IP 设计的，俗称<strong>三层</strong>网络设备，路由器的各个端口都具有 MAC 地址和 IP 地址；</li><li>而<strong>交换机</strong>是基于以太网设计的，俗称<strong>二层</strong>网络设备，交换机的端口不具有 MAC 地址。</li></ul><p>在网络包传输的过程中，<strong>源 IP 和目标 IP 始终是不会变的，一直变化的是 MAC 地址</strong>，因为需要 MAC 地址在以太网内进行<strong>两个设备</strong>之间的包传输。</p><h3 id="_8-客户端-服务器" tabindex="-1"><a class="header-anchor" href="#_8-客户端-服务器"><span>8.客户端&amp;服务器</span></a></h3><p><strong>四次挥手：</strong></p><ul><li>第一次挥手：客户端向服务器发送连接释放请求（FIN）。</li><li>第二次挥手：服务器收到客户端的连接释放请求后，向客户端发送确认（ACK）。</li><li>第三次挥手：服务器准备好关闭连接时，向客户端发送连接释放请求（FIN）。</li><li>第四次挥手：客户端收到服务器的连接释放请求后，向服务器发送确认（ACK），完成连接的关闭。</li></ul>',82),c={},l=(0,n(6786).A)(c,[["render",function(t,o){return(0,e.uX)(),(0,e.CE)("div",null,[(0,e.Q3)(" more "),p])}]]),d=JSON.parse('{"path":"/demo/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/%E9%94%AE%E5%85%A5URL%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88%EF%BC%9F.html","title":"键入一个URL网络世界发生了什么？","lang":"zh-CN","frontmatter":{"title":"键入一个URL网络世界发生了什么？","date":"2023-11-18T00:00:00.000Z","tags":["计算机基础","计算机网络"],"categories":["计算机网络"],"head":[["meta",{"property":"og:url","content":"https://flipped1001.cn/demo/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/%E9%94%AE%E5%85%A5URL%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88%EF%BC%9F.html"}],["meta",{"property":"og:site_name","content":"Flipped"}],["meta",{"property":"og:title","content":"键入一个URL网络世界发生了什么？"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E9%94%AE%E5%85%A5%E7%BD%91%E5%9D%80%E8%BF%87%E7%A8%8B/17.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-16T10:13:48.000Z"}],["meta",{"property":"article:author","content":"Flipped"}],["meta",{"property":"article:tag","content":"计算机基础"}],["meta",{"property":"article:tag","content":"计算机网络"}],["meta",{"property":"article:published_time","content":"2023-11-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-16T10:13:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"键入一个URL网络世界发生了什么？\\",\\"image\\":[\\"https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E9%94%AE%E5%85%A5%E7%BD%91%E5%9D%80%E8%BF%87%E7%A8%8B/17.jpg\\",\\"https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E9%94%AE%E5%85%A5%E7%BD%91%E5%9D%80%E8%BF%87%E7%A8%8B/21.jpg\\",\\"https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost4/%E7%BD%91%E7%BB%9C/%E6%95%B0%E6%8D%AE%E5%8C%85.drawio.png\\"],\\"datePublished\\":\\"2023-11-18T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-16T10:13:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Flipped\\",\\"url\\":\\"www.flipped1001.cn\\"}]}"]]},"headers":[{"level":3,"title":"1.浏览器第一步工作是解析ULR，然后生产HTTP请求消息，然后会委托操作系统发送消息","slug":"_1-浏览器第一步工作是解析ulr-然后生产http请求消息-然后会委托操作系统发送消息","link":"#_1-浏览器第一步工作是解析ulr-然后生产http请求消息-然后会委托操作系统发送消息","children":[]},{"level":3,"title":"2.在发送之前，必须查询服务器域名对应的IP地址，在委托操作系统发送消息时必须提供通讯对象的IP地址","slug":"_2-在发送之前-必须查询服务器域名对应的ip地址-在委托操作系统发送消息时必须提供通讯对象的ip地址","link":"#_2-在发送之前-必须查询服务器域名对应的ip地址-在委托操作系统发送消息时必须提供通讯对象的ip地址","children":[]},{"level":3,"title":"3.通过DNS获取到IP后，把传输工作给操作系统中的协议栈","slug":"_3-通过dns获取到ip后-把传输工作给操作系统中的协议栈","link":"#_3-通过dns获取到ip后-把传输工作给操作系统中的协议栈","children":[]},{"level":3,"title":"4.http协议是基于TCP协议传输的","slug":"_4-http协议是基于tcp协议传输的","link":"#_4-http协议是基于tcp协议传输的","children":[]},{"level":3,"title":"5.网卡（真正的数据发送）","slug":"_5-网卡-真正的数据发送","link":"#_5-网卡-真正的数据发送","children":[]},{"level":3,"title":"6.交换机","slug":"_6-交换机","link":"#_6-交换机","children":[]},{"level":3,"title":"7.路由器","slug":"_7-路由器","link":"#_7-路由器","children":[]},{"level":3,"title":"8.客户端&服务器","slug":"_8-客户端-服务器","link":"#_8-客户端-服务器","children":[]}],"git":{"createdTime":1721124828000,"updatedTime":1721124828000,"contributors":[{"name":"flipped1001","email":"3154147351@qq.com","commits":1}]},"readingTime":{"minutes":9.46,"words":2838},"filePathRelative":"demo/计算机网络/计算机网络基础/键入URL会发生什么？.md","localizedDate":"2023年11月18日","excerpt":""}')}}]);