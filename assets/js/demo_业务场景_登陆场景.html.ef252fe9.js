"use strict";(self.webpackChunkvuepress_theme_hope_template=self.webpackChunkvuepress_theme_hope_template||[]).push([[2853],{2789:(i,a)=>{a.A=(i,a)=>{const e=i.__vccOpts||i;for(const[i,s]of a)e[i]=s;return e}},58:(i,a,e)=>{e.r(a),e.d(a,{comp:()=>r,data:()=>p});var s=e(7829);const t=e.p+"assets/img/2024-05-29-17-03-23.becb0126.png",n=(0,s.Fv)('<h1 id="面试题" tabindex="-1"><a class="header-anchor" href="#面试题"><span>面试题</span></a></h1><ol><li><strong>僵尸进程</strong>（Zombie Process）：当一个进程完成执行，但其父进程尚未调用<code>wait()</code>或<code>waitpid()</code>来获取其终止状态时，该进程就成为僵尸进程。僵尸进程不再执行任何代码，但在系统进程表中仍然存在，直到其父进程请求并处理了它的终止状态为止。</li><li><strong>孤儿进程</strong>（Orphan Process）：当父进程提前终止或意外退出时，其子进程可能会成为孤儿进程。这些孤儿进程会被 <code>init</code> 进程（在大多数Unix系统中是PID为1的特殊进程）接管。<code>init</code> 进程会成为孤儿进程的新父进程，并负责回收它们的资源，防止它们变成僵尸进程。</li><li><strong>守护进程</strong>（Daemon Process）：守护进程是在后台运行的系统服务进程，通常在系统启动时启动，并一直运行直到系统关闭。它们通常不与用户直接交互，而是执行系统级别的任务，如日志记录、网络服务等。</li><li><strong>饥饿进程</strong>（Starvation Process）：饥饿进程是指因为资源分配问题而无法获得所需资源（如CPU时间、内存等）而无法继续执行的进程。饥饿可能是由于不公平的资源分配策略或竞争条件引起的。</li></ol><h1 id="" tabindex="-1"><a class="header-anchor" href="#"><span></span></a></h1><p>[TOC]</p><p>计网部分：</p><h4 id="_1-tcp和udp的区别" tabindex="-1"><a class="header-anchor" href="#_1-tcp和udp的区别"><span>1.TCP和UDP的区别</span></a></h4><p>TCP和UDP是传输层常见的两种传输协议，提供一种可靠的数据传输和通信方式；</p><p>其中，TCP的特点是：面向连接，可靠的，基于字节流的</p><p>提供一种可靠的数据传输，所以一般适用于上传下载，网页请求，邮件发送等场景</p><p>UDP的特点是：无连接，不可靠的，面向报文的 提供一种快速，但相对不可靠的数据传输，所以常用在对数据实时性要求较高，对数据完整性和正确性不那么高的场景，比如音视频通话，一些实时游戏</p><h4 id="_2-tcp是如何做链接管理的" tabindex="-1"><a class="header-anchor" href="#_2-tcp是如何做链接管理的"><span>2.TCP是如何做链接管理的？</span></a></h4><p>TCP在连接时使用三次握手，在断开时使用四次握手；确保连接的稳定和可靠</p><hr><h4 id="_3-tcp是如何保证可靠的" tabindex="-1"><a class="header-anchor" href="#_3-tcp是如何保证可靠的"><span>3.TCP是如何保证可靠的？</span></a></h4><p>通过确认应答机制以及重传机制来保证数据传输的可靠</p><h4 id="_4-重传机制有哪些" tabindex="-1"><a class="header-anchor" href="#_4-重传机制有哪些"><span>4.重传机制有哪些？</span></a></h4><p>1.超时重传：已建立连接或者正在建立连接的两方，其中一方在发出数据包之后超一定时间，不返回ACK包，那么这一方就会认定出现丢包现象，重传这个数据包</p><p>2.快速重传：已建立连接或者正在建立连接的两方，其中一方在发出数据包之后，重复三次收到相同的ACK包，那么这一方就会认为数据包丢失，重传数据包； <strong>快速重传解决了超时重传重传周期太长的问题，但是超时重传和快速重传都具有一个问题：在一端 发送一堆数据包之后，其中某一个/几个数据包丢失时，无法精准定位是哪一个/几个，所以会选择将这个数据包之后的所有数据包全部重传一遍，容易造成资源的浪费，和网络的负担</strong></p><p>3.SACK：在TCP头部加一个SACK字段在每次接收完数据之后，将接收到数据的信息放到ACK包的这个字段，告知对方接收了哪些数据；<u><strong>这样如果出现数据丢失，发送方根据这一字段就可以精准定位这个丢失包，并且重发这个包</strong></u></p><p>4.Duplicate SACK：又称<code>D_SACK</code>，用于通知发送方哪些数据被重复接收了；<em><strong>让发送方知道时丢包还是网络延迟</strong></em></p><hr><h4 id="_5-tcp是如何保证有序的" tabindex="-1"><a class="header-anchor" href="#_5-tcp是如何保证有序的"><span>5.TCP是如何保证有序的？</span></a></h4><p>在发送方，当传输层使用TCP协议时，数据包在经过传输层时可能会被拆分成多个小数据包，这个时候在TCP报文段中，每段数据都会被标记上一个序列号，表示数据在数据流中的位置</p><p>在发送方接受到这些数据包的时候，会将它放到缓冲区，并根据序列号进行排序和重新组装，以确保数据的有序性</p><h4 id="_6-粘包问题" tabindex="-1"><a class="header-anchor" href="#_6-粘包问题"><span>6.粘包问题？</span></a></h4><p>TCP时一个面向字节流的协议，所谓字节流就是一串没有边界的二进制数据</p><p>在当使用TCP协议时，在传输层，一个完整的数据包可能会被拆分成多个小的数据包，也可能多个小的数据包会被合并成一个大数据包发送，就会出现连包和拆包的问题，导致接收方无法正确解析数据边界，造成数据处理错误</p><p><strong>解决方法：</strong></p><p>1.固定数据长度：在发送数据的同时，将每个包的长度固定</p><p>2.使用特殊符号标识边界：例如在每一个完整的数据之后加一个特殊字符</p><p>3.自定义消息结构：我们可以自定义一个消息结构，由头部和消息体组成，在头部保存当前整个消息的长度</p><p>4.通过自定义协议</p><hr><h4 id="_7-滑动窗口" tabindex="-1"><a class="header-anchor" href="#_7-滑动窗口"><span>7.滑动窗口</span></a></h4><p>在TCP建立连接的时候，双方协商缓冲区大小，通过Window字段告知对方本端的缓冲区大小， 并在TCP连接建立之后开辟出一片缓冲区</p><p>在连接建立之后，发送端就可以跟据接收端和本端窗口大小，向对方发送相应的字节数；接收放在接收完数据之后将其放到缓冲区，等待上层应用读取，当数据被读取，相应的缓冲区就会被释放；并跟据本端剩余缓冲区大小通告对方当前能接受数据的缓冲区大小</p><p>发送方根据接收方的窗口变化，相应改变本端的窗口大小；然后发送方就可以根据接收端和本端窗口大小继续发送数据</p><h4 id="_8-拥塞控制" tabindex="-1"><a class="header-anchor" href="#_8-拥塞控制"><span>8.拥塞控制</span></a></h4><p>1.慢启动：在TCP连接建立完成之后，它发送数据的能力会呈指数形式增长，每收到1次ACK，拥塞窗口加1</p><p>2.拥塞避免：当拥塞窗口超过慢启动门限，就会进入拥塞避免算法，此时他发送数据的能力呈线性增长，<strong>每当收到一个 ACK 时，cwnd 增加 1/cwnd。</strong></p><p>3.拥塞发生：</p><ul><li>发生超时重传的拥塞发生算法：慢启动门限变成<strong>拥塞窗口/2</strong>，直接将拥塞窗口降为1</li><li>发生快速重传的拥塞发生算法：将拥塞窗口减半，慢启动门限等于当前拥塞窗口，进入快恢复算法</li></ul><p>4.快速恢复：</p><ul><li>拥塞窗口 <code>cwnd = ssthresh + 3</code> （ 3 的意思是确认有 3 个数据包被收到了）；</li><li>重传丢失的数据包；</li><li>如果再收到重复的 ACK，那么 cwnd 增加 1；</li><li>如果收到新数据的 ACK 后，把 cwnd 设置为第一步中的 ssthresh 的值，原因是该 ACK 确认了新的数据，说明从 duplicated ACK 时的数据都已收到，该恢复过程已经结束，可以回到恢复之前的状态了，也即再次进入拥塞避免状态；</li></ul><h4 id="_9-tcp的三次握手和四次挥手" tabindex="-1"><a class="header-anchor" href="#_9-tcp的三次握手和四次挥手"><span>9.TCP的三次握手和四次挥手？</span></a></h4><h5 id="三次握手" tabindex="-1"><a class="header-anchor" href="#三次握手"><span>三次握手</span></a></h5><h6 id="_1-第一次握手" tabindex="-1"><a class="header-anchor" href="#_1-第一次握手"><span>1.第一次握手</span></a></h6><p><strong>首先双方都处于<code>closed</code>状态，客户端会发送一个带有<code>SYN</code>（同步序列编号）标志的TCP报文到服务器，表示客户端请求连接；并且在其中客户端还会选择一个<code>ISN</code>（初始序列号）放入<code>SYN</code>报文段中</strong></p><p>第一次握手之后：客户端处于<code>SYN_SENT</code>状态（同步已发送），服务器处于<code>LISTEN</code>（监听状态）</p><h6 id="_2-第二次握手" tabindex="-1"><a class="header-anchor" href="#_2-第二次握手"><span>2.第二次握手</span></a></h6><p><strong>服务器同意建立连接，会回复一个带有<code>SYN</code>和<code>ACK</code>（确认号）标识的TCP报文；服务器也会选择一个初始序列号用于标识服务器到客户端的数据流</strong></p><p>第二次握手之后：客户端处于<code>SYN_SENT</code>状态，服务器处于<code>SYN-RCVD</code>（半连接状态）</p><h6 id="_3-第三次握手" tabindex="-1"><a class="header-anchor" href="#_3-第三次握手"><span>3.第三次握手</span></a></h6><p><strong>客户端在接收服务器的带有<code>SYN</code>和<code>ACK</code>（确认号）标识的TCP报文之后，会向服务器发送一个带有<code>ACK</code>标志的确认报文段;并且这个报文字段包含客户端收到的服务端的<code>ISN</code>，以及<code>ACK</code>（表示客户端希望下一次接受的序列号）</strong></p><p>第三次握手之后：客户端和服务器都进入<code>ESTABLISHED</code></p><p>三次握手的目的是<strong>确认双方都有发送和接受的能力</strong></p><h5 id="四次挥手" tabindex="-1"><a class="header-anchor" href="#四次挥手"><span>四次挥手</span></a></h5><h6 id="_1-第一次挥手" tabindex="-1"><a class="header-anchor" href="#_1-第一次挥手"><span>1.第一次挥手</span></a></h6><p>客户端主动想要断开连接，向服务器发送一个FIN报文，之后客户端进入FIN_WAIT_1状态</p><h6 id="_2-第二次挥手" tabindex="-1"><a class="header-anchor" href="#_2-第二次挥手"><span>2.第二次挥手</span></a></h6><p>服务端收到该报文，向客户端发送一个ACK报文，服务端进入CLOSE_WAIT状态，客户端接收之后进入FIN_WAIT_2状态</p><h6 id="_3-第三次挥手" tabindex="-1"><a class="header-anchor" href="#_3-第三次挥手"><span>3.第三次挥手</span></a></h6><p>服务端可能还有数据需要处理和发送，等服务端不再发送数据时，发送FIN报文，之后服务端进入LAST_ACK状态</p><h6 id="_4-第四次挥手" tabindex="-1"><a class="header-anchor" href="#_4-第四次挥手"><span>4.第四次挥手</span></a></h6><p>客户端向服务端发送ACK报文，服务端接收到报文之后进入CLOSE状态，而客户端则会TIME_WAIT(2MSL)之后进入CLOSE状态</p><p><strong>主动关闭连接的，才有 TIME_WAIT 状态。</strong></p><h4 id="_10-time-wait状态的意义" tabindex="-1"><a class="header-anchor" href="#_10-time-wait状态的意义"><span>10.time_wait状态的意义</span></a></h4><p>TIME_WAIT状态标识一个连接已经完成了关闭过程，并且在等最后的确认报文</p><p>有两点作用：</p><p>第一点：</p><ul><li>防止历史连接中的数据，被后面相同四元组的连接错误的接收；</li></ul><p>第二点：</p><ul><li>保证「被动关闭连接」的一方，能被正确的关闭；</li></ul><p>如果没有time_wait状态或者time_wait时间太短，可能导致数据错乱或者连接错误</p><h4 id="_11-为什么需要三次握手而不是四次-两次" tabindex="-1"><a class="header-anchor" href="#_11-为什么需要三次握手而不是四次-两次"><span>11.为什么需要三次握手而不是四次，两次</span></a></h4><h4 id="什么是restful风格" tabindex="-1"><a class="header-anchor" href="#什么是restful风格"><span>什么是restful风格？</span></a></h4><p>RESTful 是一种针对网络应用程序设计的架构风格，它基于 HTTP 协议，强调了资源的标识、状态和操作的统一性。</p><h4 id="用户登录" tabindex="-1"><a class="header-anchor" href="#用户登录"><span>用户登录：</span></a></h4><h5 id="_1-什么是oauth2-0" tabindex="-1"><a class="header-anchor" href="#_1-什么是oauth2-0"><span>1.什么是OAUTH2.0?</span></a></h5><p>OAuth 2.0 是一种用于授权的开放标准协议，它允许第三方应用程序在资源所有者的许可下访问资源所有者的资源，而无需暴露资源所有者的凭据（如用户名和密码）。它通常用于提供第三方访问HTTP服务，例如社交媒体账户、在线文件存储等。OAuth 2.0 是 OAuth 协议的第二个版本，比 OAuth 1.0 简化了许多流程，增强了灵活性和安全性。</p><p>OAuth 2.0 的工作流程主要涉及以下角色：</p><ol><li><strong>资源所有者（Resource Owner）</strong>：即用户，拥有受保护的资源，并通过授权服务器授予客户端访问这些资源的权限</li><li><strong>客户端（Client）</strong>：想要访问资源拥有者的资源的应用程序。它需要获得授权才能访问资源服务器上的受保护资源。</li><li><strong>授权服务器（Authorization Server）</strong>：处理客户端的授权请求，并颁发访问令牌。授权服务器验证资源拥有者的身份并获取其授权。</li><li><strong>资源服务器（Resource Server）</strong>：托管资源拥有者的受保护资源，并使用访问令牌来验证和处理客户端的请求。</li></ol><p>OAuth 2.0 的基本授权流程如下：</p><ol><li><strong>客户端请求授权</strong>：客户端向资源所有者请求授权，通常通过用户界面引导用户进行授权。</li><li><strong>资源所有者授予授权</strong>：资源所有者同意授权，并通过授权服务器生成授权代码（Authorization Code）。</li><li><strong>客户端获取授权代码</strong>：客户端收到授权代码。</li><li><strong>客户端交换授权代码</strong>：客户端将授权代码发送给授权服务器，交换访问令牌。</li><li><strong>授权服务器颁发访问令牌</strong>：授权服务器验证授权代码并向客户端颁发访问令牌。</li><li><strong>客户端访问资源</strong>：客户端使用访问令牌访问资源服务器上的资源。</li></ol><h6 id="a-oauth-2-0-授权模式" tabindex="-1"><a class="header-anchor" href="#a-oauth-2-0-授权模式"><span>a. OAuth 2.0 授权模式</span></a></h6><p>OAuth 2.0 定义了多种授权模式，以满足不同的应用场景：</p><ol><li><strong>授权码模式（Authorization Code Grant）</strong>：最常用的模式，适用于服务器端应用，包含了授权码的获取和交换流程。</li><li><strong>简化模式（Implicit Grant）</strong>：主要用于浏览器中的单页应用，省略了授权码的交换步骤，直接获取访问令牌。</li><li><strong>密码模式（Resource Owner Password Credentials Grant）</strong>：用户直接向客户端提供用户名和密码，适用于信任级别较高的应用。</li><li><strong>客户端凭证模式（Client Credentials Grant）</strong>：客户端以自身身份获取访问令牌，用于访问自身资源或服务端间的交互。</li></ol><h5 id="_2-用户扫码是如何实现的" tabindex="-1"><a class="header-anchor" href="#_2-用户扫码是如何实现的"><span>2.用户扫码是如何实现的</span></a></h5><p>这边以微信登陆为例：</p><ol><li>首先用户点击微信登陆，第三方网站或应用程序生成一个用于登录的二维码，并将其展示给用户。</li><li>用户使用微信扫描该二维码。</li><li>微信客户端将请求发送到微信服务器，并请求用户授权该第三方应用程序访问其个人信息。</li><li>用户在微信客户端上看到授权请求，可以选择允许或拒绝。</li><li>如果用户同意授权，微信服务器带着授权码回调到回调地址上，然后第三方网站或应用程序带着这个授权码向微信服务器请求令牌</li><li>微信服务器在校验授权码有效性之后，将向第三方应用程序颁发一个访问令牌（Access Token），该令牌用于代表用户访问其个人信息。</li><li>第三方应用程序可以使用此访问令牌来获取用户的个人信息，例如昵称、头像等。用户在第三方应用程序中进行操作，第三方应用程序使用访问令牌向微信服务器请求用户的个人信息。</li></ol><figure><img src="'+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h5 id="_3-如果要实现不同域名下的cookie正常使用-应该怎么处理" tabindex="-1"><a class="header-anchor" href="#_3-如果要实现不同域名下的cookie正常使用-应该怎么处理"><span>3. 如果要实现不同域名下的cookie正常使用，应该怎么处理？</span></a></h5><ol><li><strong>设置 Cookie 的域名属性：</strong> 当设置 Cookie 时，可以通过指定域名属性来确保 Cookie 在不同子域名之间共享。例如，如果你希望 Cookie 在<code>example.com</code>和<code>subdomain.example.com</code>之间共享，则可以设置 Cookie 的域名属性为<code>.example.com</code>（注意前面的点号），这样 Cookie 就可以在所有以<code>example.com</code>为结尾的子域名下共享。</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">document</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">cookie</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;name=value; domain=.example.com; path=/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="2"><li><strong>设置跨域资源共享（CORS）：</strong> 如果是通过 AJAX 或 Fetch 发起的跨域请求，需要在服务器端设置适当的 CORS 头来允许跨域请求。服务器响应中应包含 <code>Access-Control-Allow-Origin</code> 头，并设置为允许访问的域名。例如：</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">Access</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">Control</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">Allow</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E06C75;">Origin</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E06C75;">https</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//example.com</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="3"><li><p><strong>使用代理：</strong> 如果跨域请求不能通过上述方法解决，可以考虑在服务器端设置代理，即在同一域名下创建一个中间层，由该中间层代理请求到其他域名，然后再将结果返回给客户端。这种方法可以绕过浏览器的同源策略限制。</p></li><li><p><strong>设置 Cookie 的路径</strong>：确保路径参数设置为 Cookie 所在的路径。通常，将路径设置为根路径 <code>/</code> 是最简单和最通用的方法，使得 Cookie 在整个网站的所有页面中可用。</p></li></ol><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">document</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">cookie</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;name=value; domain=.example.com; path=/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h5 id="_4-假如1亿用户体量-如何设计一个登录验签服务" tabindex="-1"><a class="header-anchor" href="#_4-假如1亿用户体量-如何设计一个登录验签服务"><span>4.假如1亿用户体量，如何设计一个登录验签服务？</span></a></h5><p>设计一个支持 1 亿用户体量的登录验签服务需要考虑到高可用性、安全性和性能等因素。以下是一个可能的设计方案：</p><ol><li><p><strong>负载均衡</strong>：使用负载均衡技术将流量分发到多个服务器上，以确保服务的高可用性和可扩展性。可以考虑使用负载均衡器如 Nginx 或 AWS ELB。</p></li><li><p><strong>分布式架构</strong>：采用分布式架构，将用户数据和登录状态分布在多个服务器上，以应对大规模用户的访问。可以使用分布式数据库（如MySQL Cluster、Cassandra等）或 NoSQL 数据库（如MongoDB、Redis等）来存储用户数据和登录状态。</p></li><li><p><strong>安全性</strong>：</p><ul><li>使用 HTTPS 协议进行通信，以保障数据的安全传输。</li><li>对用户密码进行加密存储，推荐使用哈希函数加盐存储用户密码，如 bcrypt。</li><li>使用 JWT（JSON Web Token）或类似的令牌机制来生成并验证用户身份，避免在服务端存储用户的敏感信息。</li><li>实施防火墙、DDoS 防护和安全审计等安全措施，保护系统免受恶意攻击。</li></ul></li><li><p><strong>高性能</strong>：</p><ul><li>使用缓存技术加速登录验签过程，例如，将经常访问的用户信息存储在缓存中，减少数据库访问次数。</li><li>使用异步处理技术，如消息队列，将请求分发给多个工作节点并行处理，提高系统的响应速度和吞吐量。</li><li>对数据库进行优化，如索引、分片等，以提高查询性能和扩展性。</li></ul></li><li><p><strong>监控和日志</strong>：建立完善的监控系统，实时监控系统运行状态、性能指标和异常情况，并及时进行预警和处理。同时，记录日志以便追踪和排查问题。</p></li><li><p><strong>容灾备份</strong>：定期进行数据备份，并建立容灾备份系统，以防止数据丢失和系统故障导致的服务中断。</p></li><li><p><strong>合理的访问限制</strong>：实施合理的访问限制策略，如限制登录失败次数、IP 访问频率等，以防止暴力破解和恶意攻击。</p></li><li><p><strong>持续优化</strong>：定期进行性能测试和优化，不断改进系统架构和代码实现，以适应不断增长的用户体量和变化的需求。</p></li></ol>',101),o={},r=(0,e(2789).A)(o,[["render",function(i,a){return(0,s.uX)(),(0,s.CE)("div",null,[(0,s.Q3)(" more "),n])}]]),p=JSON.parse('{"path":"/demo/%E4%B8%9A%E5%8A%A1%E5%9C%BA%E6%99%AF/%E7%99%BB%E9%99%86%E5%9C%BA%E6%99%AF.html","title":"用户登录","lang":"zh-CN","frontmatter":{"title":"用户登录","date":"2024-05-16T00:00:00.000Z","tags":["用户登录"],"categories":["业务场景"],"head":[["meta",{"property":"og:url","content":"https://flipped1001.cn/demo/%E4%B8%9A%E5%8A%A1%E5%9C%BA%E6%99%AF/%E7%99%BB%E9%99%86%E5%9C%BA%E6%99%AF.html"}],["meta",{"property":"og:site_name","content":"博客主页"}],["meta",{"property":"og:title","content":"用户登录"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-16T10:13:48.000Z"}],["meta",{"property":"article:author","content":"Flipped"}],["meta",{"property":"article:tag","content":"用户登录"}],["meta",{"property":"article:published_time","content":"2024-05-16T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-16T10:13:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"用户登录\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-16T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-16T10:13:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Flipped\\"}]}"]]},"headers":[],"git":{"createdTime":1721124828000,"updatedTime":1721124828000,"contributors":[{"name":"flipped1001","email":"3154147351@qq.com","commits":1}]},"readingTime":{"minutes":15.48,"words":4643},"filePathRelative":"demo/业务场景/登陆场景.md","localizedDate":"2024年5月16日","excerpt":""}')}}]);