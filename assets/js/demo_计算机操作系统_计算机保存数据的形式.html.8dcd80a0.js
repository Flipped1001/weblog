"use strict";(self.webpackChunkvuepress_theme_hope_template=self.webpackChunkvuepress_theme_hope_template||[]).push([[8700],{6786:(e,t)=>{t.A=(e,t)=>{const o=e.__vccOpts||e;for(const[e,a]of t)o[e]=a;return o}},9719:(e,t,o)=>{o.r(t),o.d(t,{comp:()=>x,data:()=>A});var a=o(2758);const p=o.p+"assets/img/2024-05-23-20-17-17.aa0b625c.png",i=o.p+"assets/img/2024-05-23-20-18-24.29293061.png",n=o.p+"assets/img/2024-05-23-20-19-12.144fda64.png",g=o.p+"assets/img/2024-05-23-20-20-08.b7095e1f.png",c=o.p+"assets/img/2024-05-23-20-20-37.ba5a8701.png",d=o.p+"assets/img/2024-05-23-20-21-01.49efed7b.png",r=o.p+"assets/img/2024-05-23-20-21-35.0699ead8.png",s=o.p+"assets/img/2024-05-23-20-22-22.290cf501.png",l=o.p+"assets/img/2024-05-23-20-23-00.221d3f55.png",f=o.p+"assets/img/2024-05-23-20-23-28.d3d34cf1.png",m=o.p+"assets/img/2024-05-23-20-23-47.6f43cdef.png",u=o.p+"assets/img/2024-05-23-20-24-19.1332400a.png",E=o.p+"assets/img/2024-05-23-20-24-41.82ab6914.png",h=o.p+"assets/img/2024-05-23-20-25-08.de1a48c2.png",b=(0,a.Fv)('<h1 id="计算机保存数据的形式" tabindex="-1"><a class="header-anchor" href="#计算机保存数据的形式"><span>计算机保存数据的形式</span></a></h1><h4 id="用补码的形式保存负数" tabindex="-1"><a class="header-anchor" href="#用补码的形式保存负数"><span>用补码的形式保存负数：</span></a></h4><p>我们以 <code>int</code> 类型的数字作为例子，int 类型是 <code>32</code> 位的，其中<strong>最高位是作为「符号标志位」</strong>，正数的符号位是 <code>0</code>，负数的符号位是 <code>1</code>，<strong>剩余的 31 位则表示二进制数据</strong>。</p><p>那么，对于 int 类型的数字 1 的二进制数表示如下：</p><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>而负数就比较特殊了点，负数在计算机中是以「补码」表示的，<strong>所谓的补码就是把正数的二进制全部取反再加 1</strong>，比如 -1 的二进制是把数字 1 的二进制取反后再加 1，如下图：</p><figure><img src="'+i+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>为什么计算机要用补码的方式来表示负数？</p><p>假设不用补码的方式来表示负数，而只是把最高位的符号标志位变为 1 表示负数，如下图过程：</p><figure><img src="'+n+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如果采用这种方式来表示负数的二进制的话，试想一下 <code>-2 + 1</code> 的运算过程，如下图：</p><figure><img src="'+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>上面的运算过程中得到结果是 <code>-3</code>，这种负数的表示方式是不能用常规的加法来计算了，就需要特殊处理，要先判断数字是否为负数，如果是负数就要把加法操作变成减法操作才可以得到正确对结果。</p><p>到这里，我们就可以回答前面提到的「负数为什么要用补码方式来表示」的问题了。</p><p>如果负数不是使用补码的方式表示，则在做基本对加减法运算的时候，<strong>还需要多一步操作来判断是否为负数，如果为负数，还得把加法反转成减法，或者把减法反转成加法</strong>，这就非常不好了，毕竟加减法运算在计算机里是很常使用的，所以为了性能考虑，应该要尽量简化这个运算过程。</p><p><strong>而用了补码的表示方式，对于负数的加减法操作，实际上是和正数加减法操作一样的</strong>。你可以看到下图，用补码表示的负数在运算 <code>-2 + 1</code> 过程的时候，其结果是正确的：</p><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="十进制小数与二进制的转换" tabindex="-1"><a class="header-anchor" href="#十进制小数与二进制的转换"><span>十进制小数与二进制的转换</span></a></h4><p>小数部分的转换不同于整数部分，它采用的是<strong>乘 2 取整法</strong>，将十进制中的小数部分乘以 2 作为二进制的一位，然后继续取小数部分乘以 2 作为下一位，直到不存在小数为止。</p><p>以 <code>8.625</code> 转二进制作为例子</p><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>最后把「整数部分 + 小数部分」结合在一起后，其结果就是 <code>1000.101</code>。</p><p>但是，并不是所有小数都可以用二进制表示，前面提到的 0.625 小数是一个特例，刚好通过乘 2 取整法的方式完整的转换成二进制。</p><p>如果我们用相同的方式，来把 <code>0.1</code> 转换成二进制，过程如下：</p><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可以发现，<code>0.1</code> 的二进制表示是无限循环的。</p><p><strong>由于计算机的资源是有限的，所以是没办法用二进制精确的表示 0.1，只能用「近似值」来表示，就是在有限的精度情况下，最大化接近 0.1 的二进制数，于是就会造成精度缺失的情况</strong>。</p><p>对于二进制小数转十进制时，需要注意一点，小数点后面的指数幂是<strong>负数</strong>。</p><p>举个例子，二进制 <code>1010.101</code> 转十进制的过程，如下图：</p><figure><img src="'+s+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h4 id="计算机是怎么存小数的" tabindex="-1"><a class="header-anchor" href="#计算机是怎么存小数的"><span>计算机是怎么存小数的？</span></a></h4><p>计算机存储小数的采用的是<strong>浮点数</strong>，名字里的「浮点」表示小数点是可以浮动的。</p><p>比如 <code>1000.101</code> 这个二进制数，可以表示成 <code>1.000101 x 2^3</code>，类似于数学上的科学记数法。</p><p>该方法在小数点左边只有一个数字，而且把这种整数部分没有前导 0 的数字称为<strong>规格化</strong>，比如 <code>1.0 x 10^(-9)</code> 是规格化的科学记数法，而 <code>0.1 x 10^(-9)</code> 和 <code>10.0 x 10^(-9)</code> 就不是了。</p><p>因此，如果二进制要用到科学记数法，同时要规范化，那么不仅要保证基数为 2，还要保证小数点左侧只有 1 位，而且必须为 1。</p><p>所以通常将 <code>1000.101</code> 这种二进制数，规格化表示成 <code>1.000101 x 2^3</code>，其中，最为关键的是 000101 和 3 这两个东西，它就可以包含了这个二进制小数的所有信息：</p><ul><li><code>000101</code> 称为<strong>尾数</strong>，即小数点后面的数字；</li><li><code>3</code> 称为<strong>指数</strong>，指定了小数点在数据中的位置；</li></ul><p>现在绝大多数计算机使用的浮点数，一般采用的是 IEEE 制定的国际标准，这种标准形式如下图：</p><figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这三个重要部分的意义如下：</p><ul><li><em>符号位</em>：表示数字是正数还是负数，为 0 表示正数，为 1 表示负数；</li><li><em>指数位</em>：指定了小数点在数据中的位置，指数可以是负数，也可以是正数，<strong>指数位的长度越长则数值的表达范围就越大</strong>；</li><li><em>尾数位</em>：小数点右侧的数字，也就是小数部分，比如二进制 1.0011 x 2^(-2)，尾数部分就是 0011，而且<strong>尾数的长度决定了这个数的精度</strong>，因此如果要表示精度更高的小数，则就要提高尾数位的长度；</li></ul><p>用 <code>32</code> 位来表示的浮点数，则称为<strong>单精度浮点数</strong>，也就是我们编程语言中的 <code>float</code> 变量，而用 <code>64</code> 位来表示的浮点数，称为<strong>双精度浮点数</strong>，也就是 <code>double</code> 变量，它们的结构如下：</p><figure><img src="'+f+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可以看到：</p><ul><li>double 的尾数部分是 52 位，float 的尾数部分是 23 位，由于同时都带有一个固定隐含位（这个后面会说），所以 double 有 53 个二进制有效位，float 有 24 个二进制有效位，所以所以它们的精度在十进制中分别是 <code>log10(2^53)</code> 约等于 <code>15.95</code> 和 <code>log10(2^24)</code> 约等于 <code>7.22</code> 位，因此 double 的有效数字是 <code>15~16</code> 位，float 的有效数字是 <code>7~8</code> 位，这些有效位是包含整数部分和小数部分；</li><li>double 的指数部分是 11 位，而 float 的指数位是 8 位，意味着 double 相比 float 能表示更大的数值范围；</li></ul><p>那二进制小数，是如何转换成二进制浮点数的呢？</p><p>我们就以 <code>10.625</code> 作为例子，看看这个数字在 float 里是如何存储的。</p><figure><img src="'+m+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>首先，我们计算出 10.625 的二进制小数为 1010.101。</p><p>然后<strong>把小数点，移动到第一个有效数字后面</strong>，即将 1010.101 右移 <code>3</code> 位成 <code>1.010101</code>，右移 3 位就代表 +3，左移 3 位就是 -3。</p><p><strong>float 中的「指数位」就跟这里移动的位数有关系，把移动的位数再加上「偏移量」，float 的话偏移量是 127，相加后就是指数位的值了</strong>，即指数位这 8 位存的是 <code>10000010</code>（十进制 130），因此你可以认为「指数位」相当于指明了小数点在数据中的位置。</p><p><code>1.010101</code> 这个数的<strong>小数点右侧的数字就是 float 里的「尾数位」</strong>，由于尾数位是 23 位，则后面要补充 0，所以最终尾数位存储的数字是 <code>01010100000000000000000</code>。</p><p>在算指数的时候，你可能会有疑问为什么要加上偏移量呢？</p><p>前面也提到，指数可能是正数，也可能是负数，即指数是有符号的整数，而有符号整数的计算是比无符号整数麻烦的，所以为了减少不必要的麻烦，在实际存储指数的时候，需要把指数转换成<strong>无符号整数</strong>。</p><p>float 的指数部分是 8 位，IEEE 标准规定单精度浮点的指数取值范围是 <code>-126 ~ +127</code>，于是为了把指数转换成无符号整数，就要加个<strong>偏移量</strong>，比如 float 的指数偏移量是 <code>127</code>，这样指数就不会出现负数了。</p><p>比如，指数如果是 8，则实际存储的指数是 8 + 127（偏移量）= 135，即把 135 转换为二进制之后再存储，而当我们需要计算实际的十进制数的时候，再把指数减去「偏移量」即可。</p><p>细心的朋友肯定发现，移动后的小数点左侧的有效位（即 1）消失了，它并没有存储到 float 里。</p><p>这是因为 IEEE 标准规定，二进制浮点数的小数点左侧只能有 1 位，并且还只能是 1，<strong>既然这一位永远都是 1，那就可以不用存起来了</strong>。</p><p>于是就让 23 位尾数只存储小数部分，然后在计算时会<strong>自动把这个 1 加上，这样就可以节约 1 位的空间，尾数就能多存一位小数，相应的精度就更高了一点</strong>。</p><p>那么，对于我们在从 float 的二进制浮点数转换成十进制时，要考虑到这个隐含的 1，转换公式如下：</p><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>举个例子，我们把下图这个 float 的数据转换成十进制，过程如下：</p><figure><img src="'+E+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="在计算机中-0-1-0-2-并不等于完整的-0-3。" tabindex="-1"><a class="header-anchor" href="#在计算机中-0-1-0-2-并不等于完整的-0-3。"><span><strong>在计算机中 0.1 + 0.2 并不等于完整的 0.3</strong>。</span></a></h4><p><strong>因为有的小数无法可以用「完整」的二进制来表示，所以计算机里只能采用近似数的方式来保存，那两个近似数相加，得到的必然也是一个近似数</strong>。</p><p>我们在 goland里执行 0.1 + 0.2，你会得到下面这个结果：</p><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>而我们二进制只能精准表达 2 除尽的数字 1/2, 1/4, 1/8，但是对于 0.1(1/10) 和 0.2(1/5)，在二进制中都无法精准表示时，需要根据精度舍入。</p>',69),y={},x=(0,o(6786).A)(y,[["render",function(e,t){return(0,a.uX)(),(0,a.CE)("div",null,[(0,a.Q3)(" more "),b])}]]),A=JSON.parse('{"path":"/demo/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BF%9D%E5%AD%98%E6%95%B0%E6%8D%AE%E7%9A%84%E5%BD%A2%E5%BC%8F.html","title":"计算机保存数据的形式","lang":"zh-CN","frontmatter":{"title":"计算机保存数据的形式","date":"2023-05-22T00:00:00.000Z","tags":["计算机基础","操作系统"],"categories":["操作系统"],"head":[["meta",{"property":"og:url","content":"https://flipped1001.cn/demo/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BF%9D%E5%AD%98%E6%95%B0%E6%8D%AE%E7%9A%84%E5%BD%A2%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"Flipped"}],["meta",{"property":"og:title","content":"计算机保存数据的形式"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-16T10:13:48.000Z"}],["meta",{"property":"article:author","content":"Flipped"}],["meta",{"property":"article:tag","content":"计算机基础"}],["meta",{"property":"article:tag","content":"操作系统"}],["meta",{"property":"article:published_time","content":"2023-05-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-16T10:13:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"计算机保存数据的形式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-05-22T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-16T10:13:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Flipped\\"}]}"]]},"headers":[],"git":{"createdTime":1721124828000,"updatedTime":1721124828000,"contributors":[{"name":"flipped1001","email":"3154147351@qq.com","commits":1}]},"readingTime":{"minutes":8.55,"words":2565},"filePathRelative":"demo/计算机操作系统/计算机保存数据的形式.md","localizedDate":"2023年5月22日","excerpt":""}')}}]);