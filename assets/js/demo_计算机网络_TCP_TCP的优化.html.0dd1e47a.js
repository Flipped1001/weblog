"use strict";(self.webpackChunkvuepress_theme_hope_template=self.webpackChunkvuepress_theme_hope_template||[]).push([[5297],{6786:(e,t)=>{t.A=(e,t)=>{const p=e.__vccOpts||e;for(const[e,a]of t)p[e]=a;return p}},5903:(e,t,p)=>{p.r(t),p.d(t,{comp:()=>i,data:()=>c});var a=p(2758);const o=p.p+"assets/img/2024-05-16-20-35-40.2a9cbef2.png",r=(0,a.Fv)('<h2 id="如何优化tcp" tabindex="-1"><a class="header-anchor" href="#如何优化tcp"><span>如何优化TCP？</span></a></h2><h4 id="tcp三次握手的性能提升" tabindex="-1"><a class="header-anchor" href="#tcp三次握手的性能提升"><span>TCP三次握手的性能提升？</span></a></h4><p>客户端优化：</p><p>SYN_SENT优化，跟据服务器的繁忙程度修改SNY重传次数</p><p>服务端优化：</p><p>SYN_RCV状态的优化,同样是修改重发次数 调整半连接队列的大小</p><p>如何绕过三次握手：</p><p>TCP_FAST_OPEN功能，第一次建立握手时还是三次链接，之后建立连接就不需要握手了 需要双方同时打开才能有效</p><h4 id="tcp四次挥手性能的提升" tabindex="-1"><a class="header-anchor" href="#tcp四次挥手性能的提升"><span>TCP四次挥手性能的提升？</span></a></h4><p>主动方的优化：</p><blockquote><p>CLOSE函数和SHUTDOWN函数的区别：</p><p>close函数是直接完全断开连接，双方都不能发送或者接受消息， <strong>此时，调用了 close 函数的一方的连接叫做「孤儿连接」</strong></p><p>shutdown函数是优雅的可以控制只关闭一个方向的连接</p><ul><li>SHUT_RD(0)：<strong>关闭连接的「读」这个方向</strong>，如果接收缓冲区有已接收的数据，则将会被丢弃，并且后续再收到新的数据，会对数据进行 ACK，然后悄悄地丢弃。也就是说，对端还是会接收到 ACK，在这种情况下根本不知道数据已经被丢弃了。</li><li>SHUT_WR(1)：<strong>关闭连接的「写」这个方向</strong>，这就是常被称为「半关闭」的连接。如果发送缓冲区还有未发送的数据，将被立即发送出去，并发送一个 FIN 报文给对端。</li><li>SHUT_RDWR(2)：相当于 SHUT_RD 和 SHUT_WR 操作各一次，<strong>关闭套接字的读和写两个方向</strong>。</li></ul></blockquote><p>被动方的优化：</p><blockquote><p>如果双方同时关闭连接会出现什么？</p><p><strong>双方在等待 ACK 报文的过程中，都等来了 FIN 报文。这是一种新情况，所以连接会进入一种叫做 CLOSING 的新状态，它替代了 FIN_WAIT2 状态</strong></p></blockquote><h4 id="tcp传输数据的性能提升" tabindex="-1"><a class="header-anchor" href="#tcp传输数据的性能提升"><span>TCP传输数据的性能提升？</span></a></h4><p>TCP 连接是由内核维护的，内核会为每个连接建立内存缓冲区：</p><ul><li>如果连接的内存配置过小，就无法充分使用网络带宽，TCP 传输效率就会降低；</li><li>如果连接的内存配置过大，很容易把服务器资源耗尽，这样就会导致新连接无法建立；</li></ul><p>滑动窗口是如何影像传输速度的？ TCP报文发出去之后不会从内存中立马删除，因为重传的时候还需要用到</p><p>这样看来，只要进程能及时地调用 read 函数读取数据，并且接收缓冲区配置得足够大，那么接收窗口就可以无限地放大，发送方也就无限地提升发送速度。</p><p>这是不能可能的，因为网络的传输能力是有限的，当发送方依据发送窗口，发送超过网络处理能力的报文时，路由器会直接丢弃这些报文。因此，缓冲区的内存并不是越大越好。</p><p>如何确定最大传输速度？</p><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',21),n={},i=(0,p(6786).A)(n,[["render",function(e,t){return(0,a.uX)(),(0,a.CE)("div",null,[(0,a.Q3)(" more "),r])}]]),c=JSON.parse('{"path":"/demo/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/TCP/TCP%E7%9A%84%E4%BC%98%E5%8C%96.html","title":"TCP的优化","lang":"zh-CN","frontmatter":{"title":"TCP的优化","date":"2023-11-27T00:00:00.000Z","tags":["计算机基础","计算机网络","TCP"],"categories":["计算机网络"],"head":[["meta",{"property":"og:url","content":"https://flipped1001.cn/demo/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/TCP/TCP%E7%9A%84%E4%BC%98%E5%8C%96.html"}],["meta",{"property":"og:site_name","content":"Flipped"}],["meta",{"property":"og:title","content":"TCP的优化"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-16T10:13:48.000Z"}],["meta",{"property":"article:author","content":"Flipped"}],["meta",{"property":"article:tag","content":"计算机基础"}],["meta",{"property":"article:tag","content":"计算机网络"}],["meta",{"property":"article:tag","content":"TCP"}],["meta",{"property":"article:published_time","content":"2023-11-27T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-16T10:13:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"TCP的优化\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-11-27T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-16T10:13:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Flipped\\"}]}"]]},"headers":[{"level":2,"title":"如何优化TCP？","slug":"如何优化tcp","link":"#如何优化tcp","children":[]}],"git":{"createdTime":1721124828000,"updatedTime":1721124828000,"contributors":[{"name":"flipped1001","email":"3154147351@qq.com","commits":1}]},"readingTime":{"minutes":2.59,"words":778},"filePathRelative":"demo/计算机网络/TCP/TCP的优化.md","localizedDate":"2023年11月27日","excerpt":""}')}}]);