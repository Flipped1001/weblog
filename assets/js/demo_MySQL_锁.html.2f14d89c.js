"use strict";(self.webpackChunkvuepress_theme_hope_template=self.webpackChunkvuepress_theme_hope_template||[]).push([[2578],{6786:(s,i)=>{i.A=(s,i)=>{const e=s.__vccOpts||s;for(const[s,a]of i)e[s]=a;return e}},5084:(s,i,e)=>{e.r(i),e.d(i,{comp:()=>t,data:()=>h});var a=e(2758);const n=[(0,a.Fv)('<h3 id="全局锁" tabindex="-1"><a class="header-anchor" href="#全局锁"><span>全局锁</span></a></h3><p>一般适用于：数据库的备份以及迁移</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">flush tables </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">with</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> read</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> lock</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>加上全局锁之后，数据库就属于只读的状态。其他操作都会被阻塞，直到全局锁被释放。</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">unlock</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> tables</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="表级锁定" tabindex="-1"><a class="header-anchor" href="#表级锁定"><span>表级锁定</span></a></h3><h4 id="普通表锁" tabindex="-1"><a class="header-anchor" href="#普通表锁"><span>普通表锁：</span></a></h4><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">//</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">表级别的共享锁，也就是读锁；</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">lock tables table_name </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">//</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">表级别的独占锁，也就是写锁；</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">lock tables table_name write;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">unlock</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> tables</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="元数据锁-mdl" tabindex="-1"><a class="header-anchor" href="#元数据锁-mdl"><span>元数据锁（MDL）</span></a></h4><p>在数据库中不需要直接加上元数据锁：</p><ul><li>在MySQL中当我们进行CURD时，会自动给这个表加上<strong>MDL读锁</strong></li><li>当我们进行结构操作时，会自动加上<strong>MDL写锁</strong></li></ul><p>在语句执行的时候会立即加锁，但是在语句执行完毕之后不会立即释放，一直到事务提交才会释放锁</p><blockquote><p>[!CAUTION]</p><p>在数据库被大量调用的时候，轻易不要去改变数据库的结构包括增加一个字段或者去增加一个索引，会造成严重的业务问题</p></blockquote><h4 id="意向锁" tabindex="-1"><a class="header-anchor" href="#意向锁"><span>意向锁</span></a></h4><p>在innodb对数据加锁之前会先在表级加上一个意向锁</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">//</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">先在表上加上意向共享锁，然后对读取的记录加共享锁</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> ... lock </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> share mode;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">//</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">先表上加上意向独占锁，然后对读取的记录加独占锁</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> ... </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> update</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>意向共享锁和意向独占锁是表级锁，不会和行级的共享锁和独占锁发生冲突，而且意向锁之间也不会发生冲突，只会和共享表锁（<em>lock tables ... read</em>）和独占表锁（<em>lock tables ... write</em>）发生冲突。</strong></p><p>当一个被插上意向锁，说明这个表中是有锁的。</p><h4 id="auto-inc-锁" tabindex="-1"><a class="header-anchor" href="#auto-inc-锁"><span>AUTO-INC 锁</span></a></h4><p><strong>在插入数据时，会加一个表级别的 AUTO-INC 锁</strong>，然后为被 <code>AUTO_INCREMENT</code> 修饰的字段赋值递增的值，等插入语句执行完成后，才会把 AUTO-INC 锁释放掉。</p><p>其他事务的如果要向该表插入语句都会被阻塞，从而保证插入数据时，被 <code>AUTO_INCREMENT</code> 修饰的字段的值是连续递增的。</p><p>InnoDB 存储引擎提供了一种<strong>轻量级的锁</strong>来实现自增。一样也是在插入数据的时候，会为被 <code>AUTO_INCREMENT</code> 修饰的字段加上轻量级锁，<strong>然后给该字段赋值一个自增的值，就把这个轻量级锁释放了，而不需要等待整个插入语句执行完后才释放锁</strong>。</p><h3 id="行级锁" tabindex="-1"><a class="header-anchor" href="#行级锁"><span>行级锁</span></a></h3><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">//</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">对读取的记录加共享锁</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> ... lock </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> share mode;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">//</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">对读取的记录加独占锁</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> ... </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> update</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>共享锁（S锁）满足读读共享，读写共享。独占锁（X锁）满足写写互斥，读写互斥。</p><h4 id="record-lock" tabindex="-1"><a class="header-anchor" href="#record-lock"><span>Record Lock</span></a></h4><p>Record Lock 称为记录锁，锁住的是一条记录。而且记录锁是有 S 锁和 X 锁之分的：</p><ul><li>当一个事务对一条记录加了 S 型记录锁后，其他事务也可以继续对该记录加 S 型记录锁（S 型与 S 锁兼容），但是不可以对该记录加 X 型记录锁（S 型与 X 锁不兼容）;</li><li>当一个事务对一条记录加了 X 型记录锁后，其他事务既不可以对该记录加 S 型记录锁（S 型与 X 锁不兼容），也不可以对该记录加 X 型记录锁（X 型与 X 锁不兼容）。</li></ul><h4 id="gap-lock" tabindex="-1"><a class="header-anchor" href="#gap-lock"><span>Gap Lock</span></a></h4><p>间隙锁虽然存在 X 型间隙锁和 S 型间隙锁，但是并没有什么区别，<strong>间隙锁之间是兼容的，即两个事务可以同时持有包含共同间隙范围的间隙锁，并不存在互斥关系，因为间隙锁的目的是防止插入幻影记录而提出的</strong></p><h4 id="next-key-lock" tabindex="-1"><a class="header-anchor" href="#next-key-lock"><span>Next-Key Lock</span></a></h4><p><strong>next-key lock 是包含间隙锁+记录锁的，如果一个事务获取了 X 型的 next-key lock，那么另外一个事务在获取相同范围的 X 型的 next-key lock 时，是会被阻塞的</strong></p><h4 id="插入意向锁" tabindex="-1"><a class="header-anchor" href="#插入意向锁"><span>插入意向锁</span></a></h4><p>一个事务在插入一条记录的时候，需要判断插入位置是否已被其他事务加了间隙锁（next-key lock 也包含间隙锁）。</p><p>如果有的话，插入操作就会发生<strong>阻塞</strong>，直到拥有间隙锁的那个事务提交为止（释放间隙锁的时刻），在此期间会生成一个<strong>插入意向锁</strong>，将锁的状态设置为等待状态，表明有事务想在某个区间插入新记录，但是现在处于等待状态。</p><blockquote><p>[!IMPORTANT]</p><p>MySQL 加锁时，是先生成锁结构，然后设置锁的状态，如果锁状态是等待状态，并不是意味着事务成功获取到了锁，只有当锁状态为正常状态时，才代表事务成功获取到了锁</p></blockquote>',36)],l={},t=(0,e(6786).A)(l,[["render",function(s,i){return(0,a.uX)(),(0,a.CE)("div",null,n)}]]),h=JSON.parse('{"path":"/demo/MySQL/%E9%94%81.html","title":"MySQL的锁","lang":"zh-CN","frontmatter":{"title":"MySQL的锁","date":"2022-06-25T00:00:00.000Z","tags":["sql"],"categories":["mysql"],"description":"全局锁 一般适用于：数据库的备份以及迁移 加上全局锁之后，数据库就属于只读的状态。其他操作都会被阻塞，直到全局锁被释放。 表级锁定 普通表锁： 元数据锁（MDL） 在数据库中不需要直接加上元数据锁： 在MySQL中当我们进行CURD时，会自动给这个表加上MDL读锁 当我们进行结构操作时，会自动加上MDL写锁 在语句执行的时候会立即加锁，但是在语句执行完...","head":[["meta",{"property":"og:url","content":"https://flipped1001.cn/demo/MySQL/%E9%94%81.html"}],["meta",{"property":"og:site_name","content":"Flipped"}],["meta",{"property":"og:title","content":"MySQL的锁"}],["meta",{"property":"og:description","content":"全局锁 一般适用于：数据库的备份以及迁移 加上全局锁之后，数据库就属于只读的状态。其他操作都会被阻塞，直到全局锁被释放。 表级锁定 普通表锁： 元数据锁（MDL） 在数据库中不需要直接加上元数据锁： 在MySQL中当我们进行CURD时，会自动给这个表加上MDL读锁 当我们进行结构操作时，会自动加上MDL写锁 在语句执行的时候会立即加锁，但是在语句执行完..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-26T00:55:05.000Z"}],["meta",{"property":"article:author","content":"Flipped"}],["meta",{"property":"article:tag","content":"sql"}],["meta",{"property":"article:published_time","content":"2022-06-25T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-26T00:55:05.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MySQL的锁\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-06-25T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-26T00:55:05.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Flipped\\"}]}"]]},"headers":[{"level":3,"title":"全局锁","slug":"全局锁","link":"#全局锁","children":[]},{"level":3,"title":"表级锁定","slug":"表级锁定","link":"#表级锁定","children":[]},{"level":3,"title":"行级锁","slug":"行级锁","link":"#行级锁","children":[]}],"git":{"createdTime":1721955305000,"updatedTime":1721955305000,"contributors":[{"name":"flipped1001","email":"3154147351@qq.com","commits":1}]},"readingTime":{"minutes":4.09,"words":1227},"filePathRelative":"demo/MySQL/锁.md","localizedDate":"2022年6月25日","excerpt":"<h3>全局锁</h3>\\n<p>一般适用于：数据库的备份以及迁移</p>\\n<div class=\\"language-sql line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"sql\\" data-title=\\"sql\\" style=\\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes github-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">flush tables </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">with</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\"> read</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\"> lock</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div>","autoDesc":true}')}}]);