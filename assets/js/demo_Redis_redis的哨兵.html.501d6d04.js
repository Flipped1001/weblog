"use strict";(self.webpackChunkvuepress_theme_hope_template=self.webpackChunkvuepress_theme_hope_template||[]).push([[9124],{6786:(e,t)=>{t.A=(e,t)=>{const p=e.__vccOpts||e;for(const[e,r]of t)p[e]=r;return p}},3244:(e,t,p)=>{p.r(t),p.d(t,{comp:()=>i,data:()=>l});var r=p(2758);const o=[(0,r.Fv)('<p><strong>哨兵的作用</strong></p><p>实现主从节点故障转移，发现主节点挂掉之后，会将一个从节点切换为主节点，并把主节点的相关信息通知给从节点和客户端</p><h2 id="监控" tabindex="-1"><a class="header-anchor" href="#监控"><span><strong>监控</strong></span></a></h2><p>哨兵会每隔一秒向从节点发送PING命令，如果主从节点在规定时间内没有回复，哨兵就会将他们标记为【主观下线】</p><p>哨兵在部署的时候要用多个节点，使用<strong>哨兵集群</strong>的形式（至少要三台服务器），通过多个哨兵节点一起判断，就可以避免单个哨兵也因为自身网络状况，而误判的情况</p><p>当哨兵判定主节点【主观下线】之后，会向其他哨兵发起命令，其他哨兵会根据自身和主节点的状态做出投票，当赞同数达到阈值之后，改主节点就会标记为**【客观下线】<strong>，然后</strong>哨兵就需要重新选择主节点**</p><h2 id="由哪个哨兵进行故障转移" tabindex="-1"><a class="header-anchor" href="#由哪个哨兵进行故障转移"><span><strong>由哪个哨兵进行故障转移</strong></span></a></h2><p>哪个哨兵判断主节点【客观下线】，谁就是候选者</p><p>候选者会向其他哨兵发送命令，表明希望成为 Leader 来执行主从切换</p><p>每个哨兵只有一次投票机会，如果用完后就不能参与投票了，可以投给自己或投给别人，但是只有候选者才能把票投给自己。</p><p>那么在投票过程中，任何一个[候选者] ，要满足两个条件：</p><ul><li>第一，拿到半数以上的赞成票</li><li>第二，拿到的票数同时还需要大于等于哨兵配置文件中的 quorum 值</li></ul><p>如果有两个候选者，先投给哪个就是哪个，谁先满足条件谁就是Leader</p><p>quorum的值建议为哨兵个数的二分之一加1且为奇数</p><h2 id="主从故障转移的过程" tabindex="-1"><a class="header-anchor" href="#主从故障转移的过程"><span>主<strong>从故障转移的过程</strong></span></a></h2><p>主从故障转移操作包含以下四个步骤</p><ul><li><p>第一步：在已下线主节点(旧主节点)属下的所有[从节点]里面，挑选出一个从节点，并将其转换为主节点，哨兵发送<code>SLAVEOF no one</code>命令，然后一秒一次<code>INFO</code>观察角色信息，当从slave变为master转移完毕。</p><p>先过滤掉网络状态不好的【判断断连次数】</p><p>在进行每一轮考察的时候，哪个从节点优先胜出，就选择其作为新主节点。</p><ol><li><p>第一轮考察：哨兵首先会根据从节点的优先级来进行排序，优先级最高胜出</p></li><li><p>第二轮考察：如果优先级相同，则查看复制的下标，哪个从[主节点] 接收的复制数据多，哪个就靠前，最靠前的胜出</p></li><li><p>第三轮考察:如果优先级和下标都相同，就选择从节点 ID 较小的那个</p></li></ol></li><li><p>第二步：让已下线主节点属下的所有[从节点]修改复制目标，修改为复制[新主节点]</p><p>哨兵向所有的从节点发送<code>SLAVEOF</code>命令&lt;新主节点的IP和端口&gt;，让他们成为新主节点的从节点</p></li><li><p>第三步：将新主节点的IP地址和信息，通过[发布者/订阅者机制]通知给客户端</p><p>主从切换完成后，哨兵就会向<code>+switch-master </code>频道发布新主节点的IP地址和端口的消息，这个时候客户端就可以收到这条信息 通过发布者/订阅者机制机制，可以监控到主从节点切换过程中发生的各个重要事件。</p></li><li><p>第四步：继续监视旧主节点，当这个旧主节点重新上线时，将它设置为新主节点的从节点</p></li></ul><h2 id="如何组成哨兵集群" tabindex="-1"><a class="header-anchor" href="#如何组成哨兵集群"><span>如何组成哨兵集群</span></a></h2><p><strong>哨兵节点之间是通过 Redis 的发布者/订阅者机制来相互发现的</strong>，配置好哨兵IP和端口之后，会发送到<code>__sentinel__:hello</code>频道，其他哨兵就会获取到，从而建立起哨兵集群</p><p>之后，哨兵会向主节点发送<code>INFO</code>，主节点会将从节点列表发给哨兵，然后哨兵就可以和从节点链接了</p>',20)],n={},i=(0,p(6786).A)(n,[["render",function(e,t){return(0,r.uX)(),(0,r.CE)("div",null,o)}]]),l=JSON.parse('{"path":"/demo/Redis/redis%E7%9A%84%E5%93%A8%E5%85%B5.html","title":"哨兵模式","lang":"zh-CN","frontmatter":{"title":"哨兵模式","date":"2022-05-01T00:00:00.000Z","tags":["redis"],"categories":["redis","哨兵"],"description":"哨兵的作用 实现主从节点故障转移，发现主节点挂掉之后，会将一个从节点切换为主节点，并把主节点的相关信息通知给从节点和客户端 监控 哨兵会每隔一秒向从节点发送PING命令，如果主从节点在规定时间内没有回复，哨兵就会将他们标记为【主观下线】 哨兵在部署的时候要用多个节点，使用哨兵集群的形式（至少要三台服务器），通过多个哨兵节点一起判断，就可以避免单个哨兵也...","head":[["meta",{"property":"og:url","content":"https://flipped1001.cn/demo/Redis/redis%E7%9A%84%E5%93%A8%E5%85%B5.html"}],["meta",{"property":"og:site_name","content":"Flipped"}],["meta",{"property":"og:title","content":"哨兵模式"}],["meta",{"property":"og:description","content":"哨兵的作用 实现主从节点故障转移，发现主节点挂掉之后，会将一个从节点切换为主节点，并把主节点的相关信息通知给从节点和客户端 监控 哨兵会每隔一秒向从节点发送PING命令，如果主从节点在规定时间内没有回复，哨兵就会将他们标记为【主观下线】 哨兵在部署的时候要用多个节点，使用哨兵集群的形式（至少要三台服务器），通过多个哨兵节点一起判断，就可以避免单个哨兵也..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-10T10:25:42.000Z"}],["meta",{"property":"article:author","content":"Flipped"}],["meta",{"property":"article:tag","content":"redis"}],["meta",{"property":"article:published_time","content":"2022-05-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-10T10:25:42.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"哨兵模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-05-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-10T10:25:42.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Flipped\\",\\"url\\":\\"www.flipped1001.cn\\"}]}"]]},"headers":[{"level":2,"title":"监控","slug":"监控","link":"#监控","children":[]},{"level":2,"title":"由哪个哨兵进行故障转移","slug":"由哪个哨兵进行故障转移","link":"#由哪个哨兵进行故障转移","children":[]},{"level":2,"title":"主从故障转移的过程","slug":"主从故障转移的过程","link":"#主从故障转移的过程","children":[]},{"level":2,"title":"如何组成哨兵集群","slug":"如何组成哨兵集群","link":"#如何组成哨兵集群","children":[]}],"git":{"createdTime":1723285542000,"updatedTime":1723285542000,"contributors":[{"name":"flipped1001","email":"3154147351@qq.com","commits":1}]},"readingTime":{"minutes":3.56,"words":1068},"filePathRelative":"demo/Redis/redis的哨兵.md","localizedDate":"2022年5月1日","excerpt":"<p><strong>哨兵的作用</strong></p>\\n<p>实现主从节点故障转移，发现主节点挂掉之后，会将一个从节点切换为主节点，并把主节点的相关信息通知给从节点和客户端</p>\\n<h2><strong>监控</strong></h2>\\n<p>哨兵会每隔一秒向从节点发送PING命令，如果主从节点在规定时间内没有回复，哨兵就会将他们标记为【主观下线】</p>\\n<p>哨兵在部署的时候要用多个节点，使用<strong>哨兵集群</strong>的形式（至少要三台服务器），通过多个哨兵节点一起判断，就可以避免单个哨兵也因为自身网络状况，而误判的情况</p>\\n<p>当哨兵判定主节点【主观下线】之后，会向其他哨兵发起命令，其他哨兵会根据自身和主节点的状态做出投票，当赞同数达到阈值之后，改主节点就会标记为**【客观下线】<strong>，然后</strong>哨兵就需要重新选择主节点**</p>","autoDesc":true}')}}]);