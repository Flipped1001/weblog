"use strict";(self.webpackChunkvuepress_theme_hope_template=self.webpackChunkvuepress_theme_hope_template||[]).push([[4661],{6786:(s,i)=>{i.A=(s,i)=>{const a=s.__vccOpts||s;for(const[s,n]of i)a[s]=n;return a}},3949:(s,i,a)=>{a.r(i),a.d(i,{comp:()=>t,data:()=>h});var n=a(2758);const e=[(0,n.Fv)('<h3 id="union" tabindex="-1"><a class="header-anchor" href="#union"><span>UNION</span></a></h3><ul><li><code>UNION</code> 用于合并两个或多个查询的结果，并且结果集中的每行都是唯一的。</li><li>使用 <code>UNION</code> 时，它会进行额外的步骤来消除重复的行。</li></ul><p><strong>示例</strong>：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">复制SELECT column_name(s)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> table1</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">UNION</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> column_name(s)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> table2;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个示例将从 <code>table1</code> 和 <code>table2</code> 中选择列，并合并结果集，但不包括重复的行。</p><h3 id="union-all" tabindex="-1"><a class="header-anchor" href="#union-all"><span>UNION ALL</span></a></h3><ul><li><code>UNION ALL</code> 也用于合并两个或多个查询的结果，但它不会去除重复的行。</li><li>使用 <code>UNION ALL</code> 可以提高查询效率，因为它不需要执行额外的步骤来消除重复的行。</li></ul><p><strong>示例</strong>：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> column_name(s)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> table1</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">UNION ALL</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> column_name(s)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> table2;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个示例将从 <code>table1</code> 和 <code>table2</code> 中选择列，并合并结果集，包括重复的行。</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">-- LeetCode </span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">-- 1907.按分类统计薪水</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> </span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">    &#39;Low Salary&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> AS</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> category,</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">    COUNT</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">CASE</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> WHEN</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> income </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 20000</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> THEN</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> END</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">AS</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> accounts_count</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> </span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    Accounts</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">UNION ALL</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> </span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">    &#39;Average Salary&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> AS</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> category,</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">    COUNT</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">CASE</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> WHEN</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> income </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">BETWEEN</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 20000</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> AND</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 50000</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> THEN</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> END</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">AS</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> accounts_count</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> </span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    Accounts</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">UNION ALL</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> </span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">    &#39;High Salary&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> AS</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> category,</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">    COUNT</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">CASE</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> WHEN</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> income </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 50000</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> THEN</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> END</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">AS</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> accounts_count</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> </span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    Accounts;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    </span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">-- 使用 UNION ALL 来合并三个查询的结果。UNION ALL 允许重复的行，确保每个类别都出现在结果集中。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',11)],l={},t=(0,a(6786).A)(l,[["render",function(s,i){return(0,n.uX)(),(0,n.CE)("div",null,e)}]]),h=JSON.parse('{"path":"/LeetCode/1907.%E6%8C%89%E5%88%86%E7%B1%BB%E7%BB%9F%E8%AE%A1%E8%96%AA%E6%B0%B4.html","title":"1907.按分类统计薪水","lang":"zh-CN","frontmatter":{"title":"1907.按分类统计薪水","date":"2024-04-18T00:00:00.000Z","tags":["leecode"],"categories":["leecode","sql"],"description":"UNION UNION 用于合并两个或多个查询的结果，并且结果集中的每行都是唯一的。 使用 UNION 时，它会进行额外的步骤来消除重复的行。 示例： 这个示例将从 table1 和 table2 中选择列，并合并结果集，但不包括重复的行。 UNION ALL UNION ALL 也用于合并两个或多个查询的结果，但它不会去除重复的行。 使用 UNION...","head":[["meta",{"property":"og:url","content":"https://flipped1001.cn/LeetCode/1907.%E6%8C%89%E5%88%86%E7%B1%BB%E7%BB%9F%E8%AE%A1%E8%96%AA%E6%B0%B4.html"}],["meta",{"property":"og:site_name","content":"Flipped"}],["meta",{"property":"og:title","content":"1907.按分类统计薪水"}],["meta",{"property":"og:description","content":"UNION UNION 用于合并两个或多个查询的结果，并且结果集中的每行都是唯一的。 使用 UNION 时，它会进行额外的步骤来消除重复的行。 示例： 这个示例将从 table1 和 table2 中选择列，并合并结果集，但不包括重复的行。 UNION ALL UNION ALL 也用于合并两个或多个查询的结果，但它不会去除重复的行。 使用 UNION..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-18T10:48:18.000Z"}],["meta",{"property":"article:author","content":"Flipped"}],["meta",{"property":"article:tag","content":"leecode"}],["meta",{"property":"article:published_time","content":"2024-04-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-18T10:48:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"1907.按分类统计薪水\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-18T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-18T10:48:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Flipped\\"}]}"]]},"headers":[{"level":3,"title":"UNION","slug":"union","link":"#union","children":[]},{"level":3,"title":"UNION ALL","slug":"union-all","link":"#union-all","children":[]}],"git":{"createdTime":1721225818000,"updatedTime":1721299698000,"contributors":[{"name":"flipped1001","email":"3154147351@qq.com","commits":1}]},"readingTime":{"minutes":1.05,"words":316},"filePathRelative":"LeetCode/1907.按分类统计薪水.md","localizedDate":"2024年4月18日","excerpt":"<h3>UNION</h3>\\n<ul>\\n<li><code>UNION</code> 用于合并两个或多个查询的结果，并且结果集中的每行都是唯一的。</li>\\n<li>使用 <code>UNION</code> 时，它会进行额外的步骤来消除重复的行。</li>\\n</ul>\\n<p><strong>示例</strong>：</p>\\n<div class=\\"language-sql line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"sql\\" data-title=\\"sql\\" style=\\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes github-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">复制SELECT column_name(s)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">FROM</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\"> table1</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">UNION</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">SELECT</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\"> column_name(s)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">FROM</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\"> table2;</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}')}}]);