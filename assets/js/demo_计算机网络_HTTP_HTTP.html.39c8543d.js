"use strict";(self.webpackChunkvuepress_theme_hope_template=self.webpackChunkvuepress_theme_hope_template||[]).push([[8041],{2789:(t,e)=>{e.A=(t,e)=>{const n=t.__vccOpts||t;for(const[t,o]of e)n[t]=o;return n}},3616:(t,e,n)=>{n.r(e),n.d(e,{comp:()=>a,data:()=>l});var o=n(7829);const r=n.p+"assets/img/2024-05-16-21-50-51.2b71c607.png",p=(0,o.Fv)('<h2 id="http基本概念" tabindex="-1"><a class="header-anchor" href="#http基本概念"><span>HTTP基本概念</span></a></h2><h3 id="http是什么" tabindex="-1"><a class="header-anchor" href="#http是什么"><span>HTTP是什么？</span></a></h3><p>HTTP 是超文本传输协议，也就是<strong>H</strong>yperText <strong>T</strong>ransfer <strong>P</strong>rotocol。 HTTP 是一个用在计算机世界里的<strong>协议</strong>。它使用计算机能够理解的语言确立了一种计算机之间交流通信的规范（<strong>两个以上的参与者</strong>），以及相关的各种控制和错误处理方式（<strong>行为约定和规范</strong>）。 HTTP 协议是一个<strong>双向协议</strong>。 <strong>HTTP 是一个在计算机世界里专门在「两点」之间「传输」文字、图片、音频、视频等「超文本」数据的「约定和规范」</strong></p><h3 id="http常见的状态码" tabindex="-1"><a class="header-anchor" href="#http常见的状态码"><span>HTTP常见的状态码：</span></a></h3><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="http常见字段有哪些" tabindex="-1"><a class="header-anchor" href="#http常见字段有哪些"><span>HTTP常见字段有哪些：</span></a></h3><p><strong><em>Host</em> 字段</strong></p><p>客户端发送请求时，用来指定服务器的域名。</p><p><em><strong>Content-Length 字段</strong></em></p><p>服务器在返回数据时，会有 <code>Content-Length</code> 字段，表明本次回应的数据长度。</p><p><strong>HTTP 协议通过设置回车符、换行符作为 HTTP header 的边界，通过 Content-Length 字段作为 HTTP body 的边界，这两个方式都是为了解决“粘包”的问题</strong>。</p><p><em><strong>Connection 字段</strong></em></p><p><code>Connection</code> 字段最常用于客户端<strong>要求服务器使用「HTTP 长连接」机制</strong>，以便其他请求复用。HTTP 长连接的特点是，只要任意一端没有明确提出断开连接，则<strong>保持 TCP 连接状态。</strong></p><p><em><strong>Content-Type 字段</strong></em></p><p><code>Content-Type</code> 字段用于服务器回应时，告诉客户端，本次数据是什么格式。</p><p><em><strong>Content-Encoding 字段</strong></em></p><p><code>Content-Encoding</code> 字段说明数据的压缩方法。表示服务器返回的数据使用了什么压缩格式</p><h2 id="get与post请求" tabindex="-1"><a class="header-anchor" href="#get与post请求"><span>GET与POST请求:</span></a></h2><h3 id="get与post的区别" tabindex="-1"><a class="header-anchor" href="#get与post的区别"><span>GET与POST的区别:</span></a></h3><p>GET：<strong>从服务器获取指定的资源</strong> GET请求的参数都是在URL，URL 规定只能支持 ASCII，浏览器会对URL的长度进行限制</p><p>POST：<strong>根据请求负荷（报文body）对指定的资源做出处理</strong></p><h3 id="get和post的方法都是安全和幂等的吗" tabindex="-1"><a class="header-anchor" href="#get和post的方法都是安全和幂等的吗"><span>GET和POST的方法都是安全和幂等的吗？</span></a></h3><p>安全：请求方法不会破坏服务器上的资源</p><p>幂等：多次执行相同的操作，结构都是相同的</p><p><strong>GET 的语义是请求获取指定的资源。GET 方法是安全、幂等、浏览器上可被缓存的。</strong></p><p><strong>POST 的语义是根据请求负荷（报文主体）对指定的资源做出处理，具体的处理方式视资源类型而不同。POST 不安全，不幂等，（大部分实现）不可缓存。</strong></p><h2 id="http缓存技术" tabindex="-1"><a class="header-anchor" href="#http缓存技术"><span>HTTP缓存技术</span></a></h2><p><strong>强制缓存和协商缓存</strong></p><h3 id="强缓存" tabindex="-1"><a class="header-anchor" href="#强缓存"><span>强缓存：</span></a></h3><p><strong>指的是只要浏览器判断缓存没有过期</strong>，则直接使用浏览器的<strong>本地</strong>缓存，决定是否使用缓存的<strong>主动</strong>性在于<strong>浏览器</strong>这边。</p><p>强缓存是利用下面这两个 HTTP 响应头部（Response Header）字段实现的，它们都用来表示资源在客户端缓存的有效期：</p><ul><li><code>Cache-Control</code>， 是一个相对时间；</li><li><code>Expires</code>，是一个绝对时间；</li></ul><p><strong>Cache-Control 的优先级高于 Expires</strong></p><p>Cache-control 选项更多一些，设置更加精细，所以建议使用 Cache-Control 来实现强缓存。具体的实现流程如下：</p><ul><li>当浏览器第一次请求访问服务器资源时，服务器会在返回这个资源的同时，在 Response 头部加上 Cache-Control，Cache-Control 中设置了过期时间大小；</li><li>浏览器再次请求访问服务器中的该资源时，会先<strong>通过请求资源的时间与 Cache-Control 中设置的过期时间大小，来计算出该资源是否过期</strong>，如果没有，则使用该缓存，否则重新请求服务器；</li><li>服务器再次收到请求后，会再次更新 Response 头部的 Cache-Control</li></ul><h3 id="协商缓存" tabindex="-1"><a class="header-anchor" href="#协商缓存"><span>协商缓存：</span></a></h3><p><strong>通过服务端告知用户端是否可以使用缓E存的方式是协商缓存</strong></p><p>有两种实现方式：一种是基于时间，一种是基于一个唯一标识符</p><p><strong>Etag 的优先级更高</strong></p><p><strong>协商缓存这两个字段都需要配合强制缓存中 Cache-Control 字段来使用，只有在未能命中强制缓存的时候，才能发起带有协商缓存字段的请求</strong>。</p><h2 id="http特性" tabindex="-1"><a class="header-anchor" href="#http特性"><span>HTTP特性：</span></a></h2><p><strong>优点</strong>：简单，灵活和易于扩展，应用广泛，跨平台</p><p>**缺点：**无状态，明文传输，不安全</p><p><strong>不安全表现在:明文传输,容易被窃听,容易被篡改,无法验证通信方身份信息容易被假的网站冒充</strong></p><p><strong>HTTP 的安全问题，可以用 HTTPS 的方式解决</strong></p><p>「<strong>请求 - 应答</strong>」性能的关键在这两点： 性能：长连接，可以使用管道（减少整体响应时间），容易造成队头阻塞（影响性能）</p>',46),s={},a=(0,n(2789).A)(s,[["render",function(t,e){return(0,o.uX)(),(0,o.CE)("div",null,[(0,o.Q3)(" more "),p])}]]),l=JSON.parse('{"path":"/demo/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/HTTP/HTTP.html","title":"HTTP","lang":"zh-CN","frontmatter":{"title":"HTTP","date":"2023-11-20T00:00:00.000Z","tags":["计算机基础","计算机网络","HTTP"],"categories":["计算机网络"],"head":[["meta",{"property":"og:url","content":"https://flipped1001.cn/demo/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/HTTP/HTTP.html"}],["meta",{"property":"og:site_name","content":"博客主页"}],["meta",{"property":"og:title","content":"HTTP"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-16T10:13:48.000Z"}],["meta",{"property":"article:author","content":"Flipped"}],["meta",{"property":"article:tag","content":"计算机基础"}],["meta",{"property":"article:tag","content":"计算机网络"}],["meta",{"property":"article:tag","content":"HTTP"}],["meta",{"property":"article:published_time","content":"2023-11-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-16T10:13:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"HTTP\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-11-20T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-16T10:13:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Flipped\\"}]}"]]},"headers":[{"level":2,"title":"HTTP基本概念","slug":"http基本概念","link":"#http基本概念","children":[{"level":3,"title":"HTTP是什么？","slug":"http是什么","link":"#http是什么","children":[]},{"level":3,"title":"HTTP常见的状态码：","slug":"http常见的状态码","link":"#http常见的状态码","children":[]},{"level":3,"title":"HTTP常见字段有哪些：","slug":"http常见字段有哪些","link":"#http常见字段有哪些","children":[]}]},{"level":2,"title":"GET与POST请求:","slug":"get与post请求","link":"#get与post请求","children":[{"level":3,"title":"GET与POST的区别:","slug":"get与post的区别","link":"#get与post的区别","children":[]},{"level":3,"title":"GET和POST的方法都是安全和幂等的吗？","slug":"get和post的方法都是安全和幂等的吗","link":"#get和post的方法都是安全和幂等的吗","children":[]}]},{"level":2,"title":"HTTP缓存技术","slug":"http缓存技术","link":"#http缓存技术","children":[{"level":3,"title":"强缓存：","slug":"强缓存","link":"#强缓存","children":[]},{"level":3,"title":"协商缓存：","slug":"协商缓存","link":"#协商缓存","children":[]}]},{"level":2,"title":"HTTP特性：","slug":"http特性","link":"#http特性","children":[]}],"git":{"createdTime":1721124828000,"updatedTime":1721124828000,"contributors":[{"name":"flipped1001","email":"3154147351@qq.com","commits":1}]},"readingTime":{"minutes":4.02,"words":1207},"filePathRelative":"demo/计算机网络/HTTP/HTTP.md","localizedDate":"2023年11月20日","excerpt":""}')}}]);