const V=Object.entries,et=Object.fromEntries,st="ENTRIES",L="KEYS",T="VALUES",_="";class D{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===_)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==_).join("")}value(){return E(this._path).node.get(_)}result(){switch(this._type){case T:return this.value();case L:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],nt=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return R(e,t,s,n,i,1,o,""),n},R=(e,t,s,n,o,u,i,r)=>{const d=u*i;t:for(const c of e.keys())if(c===_){const a=o[d-1];a<=s&&n.set(r,[e.get(c),a])}else{let a=u;for(let h=0;h<c.length;++h,++a){const g=c[h],m=i*a,p=m-i;let l=o[m];const f=Math.max(0,a-s-1),y=Math.min(i-1,a+s);for(let F=f;F<y;++F){const v=g!==t[F],z=o[p+F]+ +v,A=o[p+F+1]+1,w=o[m+F]+1,j=o[m+F+1]=Math.min(z,A,w);j<l&&(l=j)}if(l>s)continue t}R(e.get(c),t,s,n,o,a,i,r+c)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=O(n);for(const i of o.keys())if(i!==_&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new D(this,st)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return nt(this._tree,t,s)}get(t){const s=k(this._tree,t);return s!==void 0?s.get(_):void 0}has(t){const s=k(this._tree,t);return s!==void 0&&s.has(_)}keys(){return new D(this,L)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,I(this._tree,t).set(_,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);return n.set(_,s(n.get(_))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);let o=n.get(_);return o===void 0&&n.set(_,o=s()),o}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==_&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},k=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==_&&t.startsWith(s))return k(e.get(s),t.slice(s.length))},I=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==_&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const d=e.get(u);if(r===u.length)e=d;else{const c=new Map;c.set(u.slice(r),d),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ot=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(_),s.size===0)W(n);else if(s.size===1){const[o,u]=s.entries().next().value;q(n,o,u)}}},W=e=>{if(e.length===0)return;const[t,s]=O(e);if(t.delete(s),t.size===0)W(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==_&&q(e.slice(0,-1),n,o)}},q=(e,t,s)=>{if(e.length===0)return;const[n,o]=O(e);n.set(o+t,s),n.delete(o)},O=e=>e[e.length-1],ut=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},it=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,M="or",$="and",rt="and_not",ct=(e,t)=>{e.includes(t)||e.push(t)},N=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},P=({score:e},{score:t})=>t-e,lt=()=>new Map,b=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,ht={[M]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),N(n.terms,u)}}return e},[$]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);N(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[rt]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},dt=(e,t,s,n,o,u)=>{const{k:i,b:r,d}=u;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/o)))},at=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},H=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},ft=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const o=e._index.fetch(n,lt),u=o.get(t);u==null||u.get(s)==null?H(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},gt={k:1.2,b:.7,d:.5},mt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(it),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:M,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:gt},pt={combineWith:$,prefix:(e,t,s)=>t===s.length-1},Ft={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},_t={...Ft,...U},K=Symbol("*"),yt=(e,t)=>{const s=new Map,n={...e._options.searchOptions,...t};for(const[o,u]of e._documentIds){const i=n.boostDocument?n.boostDocument(u,"",e._storedFields.get(o)):1;s.set(o,{score:i,terms:[],match:{}})}return s},X=(e,t=M)=>{if(e.length===0)return new Map;const s=t.toLowerCase(),n=ht[s];if(!n)throw new Error(`Invalid combination operator: ${t}`);return e.reduce(n)||new Map},S=(e,t,s,n,o,u,i,r,d=new Map)=>{if(o==null)return d;for(const c of Object.keys(u)){const a=u[c],h=e._fieldIds[c],g=o.get(h);if(g==null)continue;let m=g.size;const p=e._avgFieldLength[h];for(const l of g.keys()){if(!e._documentIds.has(l)){ft(e,h,l,s),m-=1;continue}const f=i?i(e._documentIds.get(l),s,e._storedFields.get(l)):1;if(!f)continue;const y=g.get(l),F=e._fieldLength.get(l)[h],v=dt(y,m,e._documentCount,F,p,r),z=n*a*f*v,A=d.get(l);if(A){A.score+=z,ct(A.terms,t);const w=G(A.match,s);w?w.push(c):A.match[s]=[c]}else d.set(l,{score:z,terms:[t],match:{[s]:[c]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((l,f)=>({...l,[f]:G(n.boost,f)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:c,prefix:a}={...J.weights,...i},h=e._index.get(t.term),g=S(e,t.term,t.term,1,h,o,u,d);let m,p;if(t.prefix&&(m=e._index.atPrefix(t.term)),t.fuzzy){const l=t.fuzzy===!0?.2:t.fuzzy,f=l<1?Math.min(r,Math.round(t.term.length*l)):l;f&&(p=e._index.fuzzyGet(t.term,f))}if(m)for(const[l,f]of m){const y=l.length-t.term.length;if(!y)continue;p?.delete(l);const F=a*l.length/(l.length+.3*y);S(e,t.term,l,F,f,o,u,d,g)}if(p)for(const l of p.keys()){const[f,y]=p.get(l);if(!y)continue;const F=c*l.length/(l.length+y);S(e,t.term,l,F,f,o,u,d,g)}return g},Y=(e,t,s={})=>{if(t===K)return yt(e,s);if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(g=>Y(e,g,a));return X(h,a.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:d}=i,c=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(at(i)).map(a=>At(e,a,i));return X(c,i.combineWith)},Q=(e,t,s={})=>{const n=Y(e,t,s),o=[];for(const[u,{score:i,terms:r,match:d}]of n){const c=r.length||1,a={id:e._documentIds.get(u),score:i*c,terms:Object.keys(d),queryTerms:r,match:d};Object.assign(a,e._storedFields.get(u)),(s.filter==null||s.filter(a))&&o.push(a)}return t===K&&s.boostDocument==null&&e._options.searchOptions.boostDocument==null||o.sort(P),o},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of Q(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=u,d.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:d}]of n)o.push({suggestion:u,terms:r,score:i/d});return o.sort(P),o};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?_t:t.autoVacuum;this._options={...mt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...pt,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:c},a)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=b(n),h._idToShortId=new Map,h._fieldIds=o,h._fieldLength=b(u),h._avgFieldLength=i,h._storedFields=b(r),h._dirtCount=d||0,h._index=new C;for(const[g,m]of h._documentIds)h._idToShortId.set(m,g);for(const[g,m]of e){const p=new Map;for(const l of Object.keys(m)){let f=m[l];c===1&&(f=f.ds),p.set(parseInt(l,10),b(f))}h._index.set(g,p)}return h},B=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,a=!1)=>{let h="";i===0?h=c.length>20?`… ${c.slice(-20)}`:c:a?h=c.length+i>100?`${c.slice(0,100-i)}… `:c:h=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,h&&o.push(h),i+=h.length,a||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let d=s.indexOf(n,u);if(d===-1)return null;for(;d>=0;){const c=d+n.length;if(r(e.slice(u,d)),u=c,i>100)break;d=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},wt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),xt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),Z=(e,t,s={})=>{const n={};return Q(t,e,{boost:{h:2,t:1,c:4},prefix:!0,...s}).forEach(o=>{const{id:u,terms:i,score:r}=o,d=u.includes("@"),c=u.includes("#"),[a,h]=u.split(/[#@]/),g=Number(a),m=i.sort((l,f)=>l.length-f.length).filter((l,f)=>i.slice(f+1).every(y=>!y.includes(l))),{contents:p}=n[g]??={title:"",contents:[]};if(d)p.push([{type:"customField",id:g,index:h,display:m.map(l=>o.c.map(f=>B(f,l))).flat().filter(l=>l!==null)},r]);else{const l=m.map(f=>B(o.h,f)).filter(f=>f!==null);if(l.length&&p.push([{type:c?"heading":"title",id:g,...c&&{anchor:h},display:l},r]),"t"in o)for(const f of o.t){const y=m.map(F=>B(f,F)).filter(F=>F!==null);y.length&&p.push([{type:"text",id:g,...c&&{anchor:h},display:y},r])}}}),V(n).sort(([,o],[,u])=>"max"==="total"?wt(o,u):xt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=ut(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},tt=(e,t,s={})=>{const n=Ct(t,e,{fuzzy:.2,maxFuzzy:3,...s}).map(({suggestion:o})=>o);return e.includes(" ")?n:n.filter(o=>!o.includes(" "))},bt=et(V(JSON.parse("{\"/\":{\"documentCount\":395,\"nextId\":395,\"documentIds\":{\"0\":\"1\",\"1\":\"1#📋-个人信息\",\"2\":\"1#📝-简介\",\"3\":\"1#🚀-技能\",\"4\":\"1#🖥️-编程语言\",\"5\":\"1#🌐-前端技术\",\"6\":\"1#🛠️-后端技术\",\"7\":\"1#🗄️-数据库\",\"8\":\"1#🔧-工具\",\"9\":\"1#📚-项目经验\",\"10\":\"1#📦-项目名称1\",\"11\":\"1#📝-项目名称2\",\"12\":\"1#🎓-教育背景\",\"13\":\"1#🎖️-证书\",\"14\":\"1#🎨-兴趣爱好\",\"15\":\"1#💬-个人格言\",\"16\":\"2\",\"17\":\"3\",\"18\":\"4\",\"19\":\"4#_1-limit-m-1\",\"20\":\"4#_2-limit-offset-count\",\"21\":\"5\",\"22\":\"5#union\",\"23\":\"5#union-all\",\"24\":\"6\",\"25\":\"7\",\"26\":\"8\",\"27\":\"9\",\"28\":\"10\",\"29\":\"11\",\"30\":\"12\",\"31\":\"12#cors-cross-origin-resource-sharing-跨域资源共享\",\"32\":\"13\",\"33\":\"13#用户登录\",\"34\":\"13#_1-什么是oauth2-0\",\"35\":\"13#a-oauth-2-0-授权模式\",\"36\":\"13#_2-用户扫码是如何实现的\",\"37\":\"13#_3-如果要实现不同域名下的cookie正常使用-应该怎么处理\",\"38\":\"13#_4-假如1亿用户体量-如何设计一个登录验签服务\",\"39\":\"14\",\"40\":\"15\",\"41\":\"16\",\"42\":\"16#_1-tcp和udp的区别\",\"43\":\"16#_2-tcp是如何做链接管理的\",\"44\":\"16#_3-tcp是如何保证可靠的\",\"45\":\"16#_4-重传机制有哪些\",\"46\":\"16#_5-tcp是如何保证有序的\",\"47\":\"16#_6-粘包问题\",\"48\":\"16#_7-滑动窗口\",\"49\":\"16#_8-拥塞控制\",\"50\":\"16#_9-tcp的三次握手和四次挥手\",\"51\":\"16#三次握手\",\"52\":\"16#_1-第一次握手\",\"53\":\"16#_2-第二次握手\",\"54\":\"16#_3-第三次握手\",\"55\":\"16#四次挥手\",\"56\":\"16#_1-第一次挥手\",\"57\":\"16#_2-第二次挥手\",\"58\":\"16#_3-第三次挥手\",\"59\":\"16#_4-第四次挥手\",\"60\":\"16#_10-time-wait状态的意义\",\"61\":\"16#_11-为什么需要三次握手而不是四次-两次\",\"62\":\"16#什么是restful风格\",\"63\":\"17\",\"64\":\"17#dcl\",\"65\":\"18\",\"66\":\"18#ddl\",\"67\":\"19\",\"68\":\"19#dml\",\"69\":\"20\",\"70\":\"20#dql\",\"71\":\"20#聚合函数\",\"72\":\"21\",\"73\":\"21#explain-一个sql语句可以查询到什么\",\"74\":\"22\",\"75\":\"22#字符串函数\",\"76\":\"22#数值函数\",\"77\":\"22#日期函数\",\"78\":\"22#流程函数\",\"79\":\"23\",\"80\":\"23#约束\",\"81\":\"23#外键约束\",\"82\":\"24\",\"83\":\"24#cup-cache\",\"84\":\"24#如何写出让-cpu-跑得更快的代码\",\"85\":\"24#数据缓存\",\"86\":\"24#指令缓存\",\"87\":\"24#多核-cpu-的缓存命中率\",\"88\":\"25\",\"89\":\"25#cpu如何执行任务的\",\"90\":\"25#cache-伪共享是什么\",\"91\":\"25#避免伪共享的方法\",\"92\":\"25#cpu-是根据什么来选择当前要执行的线程。\",\"93\":\"25#调度类\",\"94\":\"25#完全公平调度\",\"95\":\"25#cpu-运行队列\",\"96\":\"25#调整优先级\",\"97\":\"26\",\"98\":\"26#cpu-cache-的数据写入\",\"99\":\"26#写直达\",\"100\":\"26#写回\",\"101\":\"26#缓存一致性问题\",\"102\":\"26#总线嗅探\",\"103\":\"26#mesi-协议\",\"104\":\"27\",\"105\":\"27#中断\",\"106\":\"27#软中断\",\"107\":\"28\",\"108\":\"28#_1-虚拟内存\",\"109\":\"28#问题背景\",\"110\":\"28#基本概念\",\"111\":\"28#_1-1-内存分段\",\"112\":\"28#内存碎片\",\"113\":\"28#内存交换效率低\",\"114\":\"28#_1-2-内存分页\",\"115\":\"28#简单分页-有缺陷\",\"116\":\"28#多级页表\",\"117\":\"28#tlb\",\"118\":\"28#_1-3-段页式内存管理\",\"119\":\"28#linux内存布局\",\"120\":\"28#内核空间与用户空间的区别\",\"121\":\"28#虚拟内存的作用\",\"122\":\"28#虚拟内存的功能\",\"123\":\"28#虚拟内存管理器\",\"124\":\"29\",\"125\":\"29#内存\",\"126\":\"29#中央处理器\",\"127\":\"29#总线\",\"128\":\"29#输入、输出设备\",\"129\":\"29#存储器的层次结构\",\"130\":\"30\",\"131\":\"30#线程的优势\",\"132\":\"30#理解线程\",\"133\":\"30#线程与进程的比较\",\"134\":\"30#线程的上下文切换\",\"135\":\"30#线程的实现方式\",\"136\":\"30#线程的优劣势\",\"137\":\"31\",\"138\":\"31#用补码的形式保存负数\",\"139\":\"31#十进制小数与二进制的转换\",\"140\":\"31#计算机是怎么存小数的\",\"141\":\"31#在计算机中-0-1-0-2-并不等于完整的-0-3。\",\"142\":\"32\",\"143\":\"32#进程的状态\",\"144\":\"32#进程的控制结构\",\"145\":\"32#进程的控制\",\"146\":\"32#进程的上下文切换\",\"147\":\"33\",\"148\":\"34\",\"149\":\"35\",\"150\":\"36\",\"151\":\"37\",\"152\":\"38\",\"153\":\"39\",\"154\":\"40\",\"155\":\"41\",\"156\":\"42\",\"157\":\"43\",\"158\":\"44\",\"159\":\"44#http基本概念\",\"160\":\"44#http是什么\",\"161\":\"44#http常见的状态码\",\"162\":\"44#http常见字段有哪些\",\"163\":\"44#get与post请求\",\"164\":\"44#get与post的区别\",\"165\":\"44#get和post的方法都是安全和幂等的吗\",\"166\":\"44#http缓存技术\",\"167\":\"44#强缓存\",\"168\":\"44#协商缓存\",\"169\":\"44#http特性\",\"170\":\"45\",\"171\":\"45#_1-如何避免发送http请求\",\"172\":\"45#_2-如何减少http请求次数\",\"173\":\"45#_3-如何减少http响应的数据大小\",\"174\":\"45#_1-http的性能问题\",\"175\":\"45#_2-兼容http1-1\",\"176\":\"45#_3-头部压缩\",\"177\":\"45#静态表编码\",\"178\":\"45#动态编码表\",\"179\":\"45#_4-二进制帧\",\"180\":\"45#_5-并发传输\",\"181\":\"45#_6-服务器主动推送资源\",\"182\":\"45#_1-http2的问题\",\"183\":\"45#_1-队头阻塞\",\"184\":\"45#_2-tcp与tls的握手延迟\",\"185\":\"45#_3-网络迁移需要重新连接\",\"186\":\"45#_2-quic协议的特点\",\"187\":\"45#_1-无队头阻塞\",\"188\":\"45#_2-更快连接建立\",\"189\":\"45#_3-连接迁移\",\"190\":\"45#_3-http3协议\",\"191\":\"46\",\"192\":\"46#_1-分析性能损耗\",\"193\":\"46#硬件优化\",\"194\":\"46#软件优化\",\"195\":\"46#证书优化\",\"196\":\"46#会话复用\",\"197\":\"46#https中tcp三次握手和tls握手能同时进行吗\",\"198\":\"47\",\"199\":\"47#http和https\",\"200\":\"47#_1-http和https的区别\",\"201\":\"47#_2-https解决了http的那些问题\",\"202\":\"47#如何解决的\",\"203\":\"47#_3-https是如何建立连接的-期间交互了什么\",\"204\":\"47#_4-https的应用数据时如保证完整性的\",\"205\":\"48\",\"206\":\"48#tcp-是有三个特点-面向连接、可靠、基于字节流。\",\"207\":\"48#_1-http和rpc的区别\",\"208\":\"48#_2-websocket是什么\",\"209\":\"49\",\"210\":\"49#apr\",\"211\":\"49#dhcp\",\"212\":\"49#nat\",\"213\":\"49#icmp\",\"214\":\"50\",\"215\":\"50#ping的工作原理\",\"216\":\"50#查询报文类型\",\"217\":\"50#traceroute\",\"218\":\"50#断网了还能ping通127-0-0-1吗\",\"219\":\"50#什么是127-0-0-1\",\"220\":\"50#tcp和ping数据的区别\",\"221\":\"50#为什么断网了还能ping通127-0-0-1\",\"222\":\"50#_127-0-0-1和localhost和0-0-00有什么区别\",\"223\":\"51\",\"224\":\"51#ip基本认识\",\"225\":\"51#ip的基础知识\",\"226\":\"51#ip的分类\",\"227\":\"51#什么是a-b-c类\",\"228\":\"51#什么是d类-e类\",\"229\":\"51#无分类地址cidr\",\"230\":\"51#公有-ip-地址与私有-ip-地址\",\"231\":\"51#ip-地址与路由控制\",\"232\":\"51#ip分片与重组\",\"233\":\"51#ipv6-基本认识\",\"234\":\"51#ipv6的首部改进\",\"235\":\"52\",\"236\":\"52#为什么-time-wait-等待的时间是-2msl\",\"237\":\"52#为什么需要-time-wait-状态\",\"238\":\"52#time-wait-过多有什么危害\",\"239\":\"52#如何优化-time-wait\",\"240\":\"52#服务器出现大量-time-wait-状态的原因有哪些\",\"241\":\"52#服务器出现大量-close-wait-状态的原因有哪些\",\"242\":\"53\",\"243\":\"53#什么是syn攻击-如何避免syn攻击\",\"244\":\"53#什么时syn超时-如何解决syn超时\",\"245\":\"54\",\"246\":\"54#udp和tcp的区别和应用场景\",\"247\":\"54#tcp和udp的区别\",\"248\":\"54#连接\",\"249\":\"55\",\"250\":\"55#针对tcp应该如何socket编程\",\"251\":\"55#listen-时候参数-backlog-的意义\",\"252\":\"55#accept-发生在三次握手的哪一步\",\"253\":\"55#客户端调用-close-了-连接是断开的流程是什么\",\"254\":\"55#服务端没有调用listen-客户端请求建立连接会发生什么\",\"255\":\"55#没有listen可以建立tcp连接吗\",\"256\":\"55#没有accpet-能建立tcp连接吗\",\"257\":\"55#为什么半连接队列要设计成哈希表\",\"258\":\"55#会有一个cookies队列吗\",\"259\":\"55#cookies方案为什么不直接取代半连接队列\",\"260\":\"55#tcp和udp可以同时绑定相同的端口吗\",\"261\":\"55#_1-tcp和udp可以同时绑定相同的端口吗\",\"262\":\"55#_2-多个tcp可以同时绑定一个端口吗\",\"263\":\"55#_3-重启-tcp-服务进程时-为什么会有-address-in-use-的报错信息\",\"264\":\"55#_4-重启-tcp-服务进程时-如何避免-address-in-use-的报错信息\",\"265\":\"55#_5-客户端的端口可以重复使用吗\",\"266\":\"55#_6-多个客户端可以-bind-同一个端口吗\",\"267\":\"55#_7-客户端-tcp-连接-time-wait-状态过多-会导致端口资源耗尽而无法建立新的连接吗\",\"268\":\"56\",\"269\":\"56#如何优化tcp\",\"270\":\"56#tcp三次握手的性能提升\",\"271\":\"56#tcp四次挥手性能的提升\",\"272\":\"56#tcp传输数据的性能提升\",\"273\":\"57\",\"274\":\"57#tcp基本认识\",\"275\":\"57#tcp的头格式\",\"276\":\"57#tcp工作在那一层\",\"277\":\"57#什么是tcp协议\",\"278\":\"57#什么是tcp连接\",\"279\":\"57#如何确定一个tcp连接\",\"280\":\"57#如何理解tcp是基于字节流的协议\",\"281\":\"57#先来说说为什么-udp-是面向报文的协议\",\"282\":\"57#再来说说为什么-tcp-是面向字节流的协议\",\"283\":\"57#tcp半连接队列和全连接队列\",\"284\":\"57#syn报文在什么情况下会被丢弃\",\"285\":\"57#拔掉网线之后-tcp连接会消失吗\",\"286\":\"57#为什么-tcp-tw-reuse-默认是关闭的\",\"287\":\"57#用了tcp传输数据就一定不会丢包吗\",\"288\":\"58\",\"289\":\"58#拥塞控制\",\"290\":\"58#慢启动\",\"291\":\"58#拥塞避免\",\"292\":\"58#拥塞发生\",\"293\":\"58#快速恢复\",\"294\":\"59\",\"295\":\"59#滑动窗口\",\"296\":\"59#窗口大小由哪一方决定\",\"297\":\"59#发送方的滑动窗口\",\"298\":\"59#程序如何表示发送方的四个部分呢\",\"299\":\"59#接收方的滑动窗口\",\"300\":\"59#接收窗口和发送窗口的大小是相等的吗\",\"301\":\"59#流量控制\",\"302\":\"59#操作系统缓冲区和滑动窗口的关系\",\"303\":\"59#窗口关闭\",\"304\":\"59#糊涂窗口综合征\",\"305\":\"60\",\"306\":\"60#tcp的重传机制\",\"307\":\"60#_1-超时重传\",\"308\":\"60#_2-快速重传\",\"309\":\"60#_3-sack方法\",\"310\":\"60#_4-duplicate-sack\",\"311\":\"61\",\"312\":\"61#tcp连接的建立\",\"313\":\"61#为什么是三次握手\",\"314\":\"61#为什么每次建立tcp链接的时候-初始化序列号的都要求不一样\",\"315\":\"61#初始序列号isn是如何随机产生的\",\"316\":\"61#既然ip层会分片-为什么tcp层还需要mss\",\"317\":\"61#当第一次握手丢失\",\"318\":\"61#第二次握手丢失\",\"319\":\"61#第三次握手丢失\",\"320\":\"61#为什么每次建立tcp连接-初始化序列号都要不一样\",\"321\":\"61#tcp-序列号和确认号是如何变化的\",\"322\":\"61#万能公式\",\"323\":\"61#已建立的tcp连接-收到syn会发生什么\",\"324\":\"61#killcx-的工具\",\"325\":\"61#tcpkill-的工具\",\"326\":\"61#tcp-的-keepalive-和-http-的-keep-alive-是一个东西吗\",\"327\":\"62\",\"328\":\"62#tcp断开连接\",\"329\":\"62#tcp的四次挥手\",\"330\":\"62#第一次挥手丢失\",\"331\":\"62#第二次挥手丢失\",\"332\":\"62#第三次挥手丢失\",\"333\":\"62#第四次挥手丢失\",\"334\":\"62#tcp四次挥手可以变成三次吗\",\"335\":\"62#粗暴关闭vs优雅关闭\",\"336\":\"62#什么情况下会出现三次挥手\",\"337\":\"62#四次挥手中收到乱序的fin包怎么办\",\"338\":\"62#在time-wait状态的tcp接收到syn报文会怎么样\",\"339\":\"62#syn合法\",\"340\":\"62#syn非法\",\"341\":\"62#在-time-wait-状态-收到-rst-会断开连接吗\",\"342\":\"62#如果已经建立了链接-客户端突然挂怎么办\",\"343\":\"62#如果已经建立了链接-服务端突然挂怎么办\",\"344\":\"62#tcp连接-一端断电和进程崩溃有什么区别\",\"345\":\"62#客户端主机宕机又重启\",\"346\":\"63\",\"347\":\"63#如何基于udp实现可靠传输\",\"348\":\"63#quic是如何实现可靠传输的\",\"349\":\"63#packet-header\",\"350\":\"63#quic-frame-header\",\"351\":\"63#quic-是如何解决-tcp-队头阻塞问题的\",\"352\":\"63#quic-是如何做流量控制的\",\"353\":\"63#quic-对拥塞控制改进\",\"354\":\"63#quic-更快的连接建立\",\"355\":\"63#quic-是如何迁移连接的\",\"356\":\"64\",\"357\":\"64#网络模型\",\"358\":\"65\",\"359\":\"65#应用层\",\"360\":\"65#用户态和内核态\",\"361\":\"65#传输层-作为传输媒介\",\"362\":\"65#网络层-有着实际的传输功能\",\"363\":\"65#ip协议的寻址作用\",\"364\":\"65#ip协议还可以路由\",\"365\":\"65#网络接口层\",\"366\":\"66\",\"367\":\"66#_1-浏览器第一步工作是解析ulr-然后生产http请求消息-然后会委托操作系统发送消息\",\"368\":\"66#_2-在发送之前-必须查询服务器域名对应的ip地址-在委托操作系统发送消息时必须提供通讯对象的ip地址\",\"369\":\"66#dns服务器-专门保存了-web-服务器域名与-ip-的对应关系\",\"370\":\"66#只指路不带路\",\"371\":\"66#_3-通过dns获取到ip后-把传输工作给操作系统中的协议栈\",\"372\":\"66#_4-http协议是基于tcp协议传输的\",\"373\":\"66#_1-第一次握手\",\"374\":\"66#_2-第二次握手\",\"375\":\"66#_3-第三次握手\",\"376\":\"66#完整的tcp报文\",\"377\":\"66#_4-ip\",\"378\":\"66#_5-mac\",\"379\":\"66#_5-网卡-真正的数据发送\",\"380\":\"66#_6-交换机\",\"381\":\"66#_7-路由器\",\"382\":\"66#_8-客户端-服务器\",\"383\":\"67\",\"384\":\"68\",\"385\":\"69\",\"386\":\"70\",\"387\":\"71\",\"388\":\"72\",\"389\":\"73\",\"390\":\"74\",\"391\":\"75\",\"392\":\"76\",\"393\":\"77\",\"394\":\"78\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[2],\"1\":[2],\"2\":[2],\"3\":[2],\"4\":[2],\"5\":[2],\"6\":[2],\"7\":[2],\"8\":[2],\"9\":[2],\"10\":[2],\"11\":[2],\"12\":[2],\"13\":[2],\"14\":[2],\"15\":[2],\"16\":[2,16],\"17\":[2,16],\"18\":[2,61],\"19\":[2,9],\"20\":[2,12],\"21\":[2],\"22\":[1,21],\"23\":[2,49],\"24\":[2,17],\"25\":[2,61],\"26\":[2,111],\"27\":[2,17],\"28\":[2,41],\"29\":[1],\"30\":[1],\"31\":[7],\"32\":[1],\"33\":[2],\"34\":[4],\"35\":[5],\"36\":[2],\"37\":[4],\"38\":[4],\"39\":[1],\"40\":[1],\"41\":[1,2],\"42\":[2,21],\"43\":[3,3],\"44\":[3,1],\"45\":[3,37],\"46\":[3,10],\"47\":[3,24],\"48\":[2,15],\"49\":[2,50],\"50\":[3],\"51\":[1],\"52\":[2,15],\"53\":[2,12],\"54\":[2,10],\"55\":[1],\"56\":[2,5],\"57\":[2,7],\"58\":[2,5],\"59\":[2,11],\"60\":[3,16],\"61\":[3],\"62\":[2,8],\"63\":[1],\"64\":[1,83],\"65\":[1],\"66\":[1],\"67\":[1],\"68\":[1,53],\"69\":[1],\"70\":[1,95],\"71\":[1,136],\"72\":[2],\"73\":[3],\"74\":[1],\"75\":[1,43],\"76\":[1,41],\"77\":[1,66],\"78\":[1,113],\"79\":[1],\"80\":[1,65],\"81\":[1,137],\"82\":[2],\"83\":[2],\"84\":[4],\"85\":[1],\"86\":[1],\"87\":[3],\"88\":[2],\"89\":[1],\"90\":[3],\"91\":[1],\"92\":[3],\"93\":[1],\"94\":[1],\"95\":[2],\"96\":[1],\"97\":[1],\"98\":[3],\"99\":[1],\"100\":[1],\"101\":[1],\"102\":[1],\"103\":[2],\"104\":[2],\"105\":[1],\"106\":[1],\"107\":[1],\"108\":[2],\"109\":[1],\"110\":[1],\"111\":[2],\"112\":[1],\"113\":[1],\"114\":[3],\"115\":[3],\"116\":[1],\"117\":[1],\"118\":[3],\"119\":[1],\"120\":[1],\"121\":[1],\"122\":[1],\"123\":[1],\"124\":[1],\"125\":[2],\"126\":[2],\"127\":[2],\"128\":[2],\"129\":[1],\"130\":[1],\"131\":[1],\"132\":[1],\"133\":[1],\"134\":[1],\"135\":[1],\"136\":[1],\"137\":[1],\"138\":[2],\"139\":[1],\"140\":[2],\"141\":[1],\"142\":[1],\"143\":[2],\"144\":[2],\"145\":[1],\"146\":[1],\"147\":[1,78],\"148\":[1,74],\"149\":[1,86],\"150\":[1,41],\"151\":[1,102],\"152\":[1,92],\"153\":[1,49],\"154\":[1,49],\"155\":[1,286],\"156\":[1,60],\"157\":[1,60],\"158\":[1],\"159\":[1],\"160\":[2],\"161\":[2],\"162\":[2],\"163\":[2],\"164\":[2],\"165\":[2],\"166\":[1],\"167\":[2],\"168\":[2],\"169\":[2],\"170\":[1],\"171\":[2],\"172\":[2],\"173\":[3],\"174\":[2],\"175\":[3],\"176\":[2],\"177\":[1],\"178\":[1],\"179\":[2],\"180\":[2],\"181\":[2],\"182\":[2],\"183\":[3],\"184\":[2],\"185\":[2],\"186\":[2],\"187\":[2],\"188\":[2],\"189\":[2],\"190\":[2],\"191\":[1],\"192\":[2],\"193\":[1],\"194\":[1],\"195\":[1],\"196\":[1],\"197\":[1],\"198\":[1],\"199\":[2],\"200\":[3],\"201\":[3],\"202\":[2],\"203\":[4],\"204\":[2],\"205\":[1],\"206\":[4],\"207\":[2],\"208\":[2],\"209\":[1],\"210\":[2],\"211\":[2],\"212\":[2],\"213\":[2],\"214\":[1],\"215\":[1],\"216\":[1],\"217\":[2],\"218\":[4],\"219\":[3],\"220\":[2],\"221\":[4],\"222\":[5],\"223\":[1],\"224\":[1],\"225\":[1],\"226\":[2],\"227\":[4],\"228\":[3],\"229\":[1],\"230\":[4],\"231\":[2],\"232\":[1],\"233\":[2],\"234\":[2],\"235\":[3],\"236\":[6],\"237\":[5],\"238\":[4],\"239\":[4],\"240\":[5],\"241\":[5],\"242\":[1],\"243\":[3],\"244\":[3],\"245\":[1],\"246\":[2],\"247\":[2],\"248\":[2],\"249\":[1],\"250\":[2],\"251\":[5],\"252\":[3],\"253\":[5],\"254\":[3],\"255\":[2],\"256\":[3],\"257\":[2],\"258\":[1],\"259\":[2],\"260\":[2],\"261\":[3],\"262\":[2],\"263\":[1],\"264\":[10],\"265\":[1],\"266\":[1],\"267\":[9],\"268\":[1],\"269\":[2],\"270\":[2],\"271\":[2],\"272\":[2],\"273\":[1],\"274\":[1],\"275\":[2],\"276\":[2],\"277\":[2],\"278\":[2],\"279\":[2],\"280\":[2],\"281\":[4],\"282\":[4],\"283\":[1],\"284\":[2],\"285\":[3],\"286\":[1],\"287\":[2],\"288\":[1],\"289\":[2],\"290\":[1],\"291\":[1],\"292\":[1],\"293\":[1],\"294\":[1],\"295\":[1],\"296\":[2],\"297\":[2],\"298\":[2],\"299\":[2],\"300\":[2],\"301\":[1],\"302\":[2],\"303\":[1],\"304\":[1],\"305\":[1],\"306\":[1],\"307\":[2],\"308\":[2],\"309\":[2],\"310\":[3],\"311\":[1],\"312\":[2],\"313\":[2],\"314\":[3],\"315\":[2],\"316\":[3],\"317\":[2],\"318\":[2],\"319\":[2],\"320\":[3],\"321\":[3],\"322\":[1],\"323\":[3],\"324\":[2],\"325\":[2],\"326\":[1],\"327\":[1],\"328\":[1],\"329\":[2],\"330\":[2],\"331\":[2],\"332\":[2],\"333\":[1],\"334\":[2],\"335\":[2],\"336\":[2],\"337\":[1],\"338\":[3],\"339\":[2],\"340\":[2],\"341\":[8],\"342\":[2],\"343\":[2],\"344\":[3],\"345\":[2],\"346\":[1],\"347\":[1],\"348\":[2],\"349\":[2],\"350\":[3],\"351\":[5],\"352\":[3],\"353\":[2],\"354\":[2],\"355\":[3],\"356\":[1],\"357\":[2],\"358\":[1],\"359\":[2],\"360\":[2],\"361\":[3],\"362\":[3],\"363\":[2],\"364\":[1],\"365\":[2],\"366\":[2],\"367\":[4],\"368\":[3],\"369\":[4],\"370\":[1],\"371\":[3],\"372\":[2],\"373\":[2],\"374\":[2],\"375\":[2],\"376\":[2],\"377\":[2],\"378\":[2],\"379\":[4],\"380\":[2],\"381\":[2],\"382\":[3],\"383\":[1,3],\"384\":[1],\"385\":[1],\"386\":[2],\"387\":[1],\"388\":[1],\"389\":[1],\"390\":[1],\"391\":[1],\"392\":[1],\"393\":[1],\"394\":[1]},\"averageFieldLength\":[1.9645569620253165,27.90214889551132],\"storedFields\":{\"0\":{\"h\":\"🌟 Flipped的个人介绍页 🌟\"},\"1\":{\"h\":\"📋 个人信息\"},\"2\":{\"h\":\"📝 简介\"},\"3\":{\"h\":\"🚀 技能\"},\"4\":{\"h\":\"🖥️ 编程语言\"},\"5\":{\"h\":\"🌐 前端技术\"},\"6\":{\"h\":\"🛠️ 后端技术\"},\"7\":{\"h\":\"🗄️ 数据库\"},\"8\":{\"h\":\"🔧 工具\"},\"9\":{\"h\":\"📚 项目经验\"},\"10\":{\"h\":\"📦 项目名称1\"},\"11\":{\"h\":\"📝 项目名称2\"},\"12\":{\"h\":\"🎓 教育背景\"},\"13\":{\"h\":\"🎖️ 证书\"},\"14\":{\"h\":\"🎨 兴趣爱好\"},\"15\":{\"h\":\"💬 个人格言\"},\"16\":{\"h\":\"1148.游戏玩法分析\",\"t\":[\"-- LeetCode -- 1148.文章浏览I select author_id as id from Views where viewer_id = author_id group by author_id order by id\"]},\"17\":{\"h\":\"1527.患有某种疾病的患者\",\"t\":[\"-- LeetCode -- 1527.患有某种疾病的患者 SELECT patient_id, patient_name, conditions FROM Patients WHERE conditions LIKE 'DIAB1%' OR conditions LIKE '% DIAB1%'; -- 用LIKE查找含有DIAB1为前缀的conditions\"]},\"18\":{\"h\":\"176`177.第N高的数据\",\"t\":[\"-- LeetCode -- 176.第二高的薪水 SELECT MAX(salary) AS SecondHighestSalary FROM Employee WHERE salary < ( SELECT MAX(salary) FROM Employee ) -- 子查询找到最大的 `salary`,外层查询找到出最大值的剩余数中的最大值 SELECT (SELECT DISTINCT Salary FROM Employee ORDER BY Salary DESC LIMIT 1 OFFSET 1) AS SecondHighestSalary -- 由于需要输出null，使用 LIMIT 1 OFFSET 1 时，如果表中的行数少于2行，即只有1行或者为空，那么查询将不会返回任何结果，包括 null，所以将查询设为一个子查询，这样外层查询在无数据查询的情况下会返回一个null SELECT IFNULL( (SELECT DISTINCT Salary FROM Employee ORDER BY Salary DESC LIMIT 1 OFFSET 1), NULL) AS SecondHighestSalary -- 使用IFNULL，将空值的情况返回一个NULL值 -- 177.第N高的薪水 CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT BEGIN DECLARE M INT; SET M=N-1; RETURN ( SELECT IFNULL( ( SELECT DISTINCT salary FROM Employee ORDER BY salary DESC LIMIT 1 OFFSET M ),null) AS getNthHighestSalary ); END -- 在 LIMIT 子句中使用 OFFSET 时，不能直接将参数N递给 OFFSET。参数必须是一个常量或一个变量，不能是函数参数。 -- DECLARE M INT 声明了一个变量 -- SET M = N-1 赋值\"]},\"19\":{\"h\":\"1.\",\"t\":[\"这种语法用于从查询结果的第 M 行开始，返回接下来的1行数据。\",\"这里的 M 是一个整数，表示从结果集的哪一条记录开始返回数据。\",\"这种语法通常用于分页或获取某一个特定位置的记录。\"]},\"20\":{\"h\":\"2.\",\"t\":[\"这种语法用于跳过查询结果的前 offset 条记录，然后返回接下来的 count 条记录。\",\"offset 是一个整数，表示要跳过的记录数。\",\"count 也是一个整数，表示在跳过 offset 条记录后，要返回的记录数。\"]},\"21\":{\"h\":\"1907.按分类统计薪水\"},\"22\":{\"h\":\"UNION\",\"t\":[\"UNION 用于合并两个或多个查询的结果，并且结果集中的每行都是唯一的。\",\"使用 UNION 时，它会进行额外的步骤来消除重复的行。\",\"示例：\",\"复制SELECT column_name(s) FROM table1 UNION SELECT column_name(s) FROM table2;\",\"这个示例将从 table1 和 table2 中选择列，并合并结果集，但不包括重复的行。\"]},\"23\":{\"h\":\"UNION ALL\",\"t\":[\"UNION ALL 也用于合并两个或多个查询的结果，但它不会去除重复的行。\",\"使用 UNION ALL 可以提高查询效率，因为它不需要执行额外的步骤来消除重复的行。\",\"示例：\",\"SELECT column_name(s) FROM table1 UNION ALL SELECT column_name(s) FROM table2;\",\"这个示例将从 table1 和 table2 中选择列，并合并结果集，包括重复的行。\",\"-- LeetCode -- 1907.按分类统计薪水 SELECT 'Low Salary' AS category, COUNT(CASE WHEN income < 20000 THEN 1 END) AS accounts_count FROM Accounts UNION ALL SELECT 'Average Salary' AS category, COUNT(CASE WHEN income BETWEEN 20000 AND 50000 THEN 1 END) AS accounts_count FROM Accounts UNION ALL SELECT 'High Salary' AS category, COUNT(CASE WHEN income > 50000 THEN 1 END) AS accounts_count FROM Accounts; -- 使用 UNION ALL 来合并三个查询的结果。UNION ALL 允许重复的行，确保每个类别都出现在结果集中。\"]},\"24\":{\"h\":\"2356.每位教师所教授的科目种类的数量\",\"t\":[\"-- LeetCode -- 2356.每位教师所教授的科目种类的数量 select teacher_id, count(distinct subject_id ) as cnt from Teacher group by teacher_id -- 用distinct去重\"]},\"25\":{\"h\":\"34.在排序数组中查找元素的第一个位置和最后一个位置\",\"t\":[\"// LeetCode // 34.在排序数组中查找元素的第一个位置和最后一个位置 // 使用二分查找可以提供O(log(n))的查询效率，具体要先查询第一次出现的位置，然后去查询第二次的位置 // 易于理解但是不够快 func searchRange(nums []int, target int) []int { left:=0 ringht:=len(nums)-1 res:=[]int{-1,-1} //获取第一个目标值的地址 for left<=right{ mid:=left+(right-left)/2 if nums[mid]>target{ right=mid-1 }else if nums[mid]<target{ left=mid+1 }else{ if mid==0 || nums[mid]!=target{ // 记录元素第一次出现的位置 res[0]=mid break }else{ // 继续去左边查询第一个元素 right=mid-1 } } } if res[0]==-1{ return res } left=right right=len(nums)-1 for left<=right{ mid:=left+(right-left)/2 if nums[mid]>target{ right=mid-1 }else if nums[mid]<target{ left=mid+1 }else{ if mid==len(nums)-1 || nums[mid+1]!=target{ res[1]=mid break }else{ left=mid+1 } } } return res } // 够快 func searchRange(nums []int, target int) []int { //返回第一个大于等于target的索引 frist:=getIndex(nums,target) if frist>=len(nums) || nums[frist]!=target{ return []int{-1,-1} } // 查询第一个大于等于target+1的索引 second:=getIndex(nums,target+1) return []int{frist,second-1} } func getIndex(nums []int, target int) int{ left:=0 right:=len(nums) for left<right{ mid:=left+(right-left)/2 if nums[mid]>=target{ right=mid }else if nums[mid]<target{ left=mid+1 } } return left }\"]},\"26\":{\"h\":\"551.游戏玩法分析\",\"t\":[\"-- LeetCode -- 551.游戏玩法分析 select player_id,min(event_date) as first_login from Activity group by player_id -- 简短，易懂 select distinct A.player_id, FIRST_VALUE(A.event_date)Over( PARTITION BY A.player_id ORDER BY A.event_date ) AS first_login from Activity as A -- PARTITION BY A.player_id：这表示窗口函数将按 player_id 进行分区。每个不同的 player_id 都会创建一个独立的分区。 -- ORDER BY A.event_date：这表示在每个分区内，数据将按 event_date 升序排序。FIRST_VALUE() 将返回每个分区内第一个（最早的）event_date。\",\"SUM(amount) OVER (ORDER BY visited_on ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) AS sum_past_6_days -- 计算当前行和前六行的数据的amount的总和 COUNT(*) OVER (ORDER BY visited_on ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) AS days_count -- 计数前六行和当前行的数据 ROW_NUMBER() OVER (ORDER BY visited_on) AS rn -- ROW_NUMBER()：为结果集中的每一行分配一个唯一的序号，通常基于ORDER BY子句定义的顺序。 RANK()：为结果集中的每一行分配一个排名，排名相同（即并列）的行会得到相同的排名，后续的排名会跳过。 DENSE_RANK()：与RANK()类似，但是排名不会跳过，即使存在并列排名。 NTILE(n)：将结果集分为n个大致相等的组，返回每行所属的组号。 LEAD(column)：返回当前行之后第n行的数据，如果没有后续行，则返回NULL。 LAG(column)：返回当前行之前第n行的数据，如果没有前面的行，则返回NULL。 FIRST_VALUE() 是一个窗口函数，它返回在每个分区内按指定顺序的第一个值。 FIRST_VALUE(A.event_date) OVER ( PARTITION BY A.player_id ORDER BY A.event_date ) -- PARTITION BY A.player_id：这表示窗口函数将按 player_id 进行分区。每个不同的 player_id 都会创建一个独立的分区。 -- ORDER BY A.event_date：这表示在每个分区内，数据将按 event_date 升序排序。FIRST_VALUE() 将返回每个分区内第一个（最早的）event_date。 LAST_VALUE()：返回窗口定义中指定的排序后最后一行的数据。 SUM()：计算窗口中的总和。 AVG()：计算窗口中的平均值。 MIN()：找到窗口中的最小值。 MAX()：找到窗口中的最大值。 STDDEV_POP()：计算窗口内值的总体标准差。 STDDEV_SAMP()：计算窗口内值的样本标准差。 VAR_POP()：计算窗口内值的总体方差。 VAR_SAMP()：计算窗口内值的样本方差。 PERCENT_RANK()：返回窗口中每行的百分比排名。 CUME_DIST()：返回当前行及其之前所有行的累积分布。 #todo 窗口函数通常搭配OVER()函数使用\"]},\"27\":{\"h\":\"586.订单最多的客户\",\"t\":[\"-- LeetCode -- 586.订单最多的客户 select customer_number from Orders Group by customer_number order by count(*) desc limit 1 -- 用limit限制返回一行数据\"]},\"28\":{\"h\":\"884.比较含退格的字符串\",\"t\":[\"// LeetCode // 884.比较含退格的字符串 func backspaceCompare(s string, t string) bool { return processString(s) == processString(t) } func processString(s string) string { var stack []rune for _, char := range s { if char == '#' { if len(stack) > 0 { stack = stack[:len(stack)-1] // 顶出栈顶元素 } } else { stack = append(stack, char) } } return string(stack) } func main() { fmt.Println(backspaceCompare(\\\"ab#c\\\", \\\"ad#c\\\")) // 输出: true } // 利用栈的思想，当#时就将前面的字符顶出栈，不然就加入栈，先进先出\"]},\"29\":{\"h\":\"LeetCode\"},\"30\":{\"h\":\"CORS策略\"},\"31\":{\"h\":\"CORS( Cross-Origin Resource Sharing )跨域资源共享：\"},\"32\":{\"h\":\"用户登录\"},\"33\":{\"h\":\"用户登录：\"},\"34\":{\"h\":\"1.什么是OAUTH2.0?\"},\"35\":{\"h\":\"a. OAuth 2.0 授权模式\"},\"36\":{\"h\":\"2.用户扫码是如何实现的\"},\"37\":{\"h\":\"3. 如果要实现不同域名下的cookie正常使用，应该怎么处理？\"},\"38\":{\"h\":\"4.假如1亿用户体量，如何设计一个登录验签服务？\"},\"39\":{\"h\":\"学习笔记\"},\"40\":{\"h\":\"tool\"},\"41\":{\"h\":\"学习疑问\",\"t\":[\"计网部分：\"]},\"42\":{\"h\":\"1.TCP和UDP的区别\",\"t\":[\"TCP和UDP是传输层常见的两种传输协议，提供一种可靠的数据传输和通信方式；\",\"其中，TCP的特点是：面向连接，可靠的，基于字节流的\",\"提供一种可靠的数据传输，所以一般适用于上传下载，网页请求，邮件发送等场景\",\"UDP的特点是：无连接，不可靠的，面向报文的 提供一种快速，但相对不可靠的数据传输，所以常用在对数据实时性要求较高，对数据完整性和正确性不那么高的场景，比如音视频通话，一些实时游戏\"]},\"43\":{\"h\":\"2.TCP是如何做链接管理的？\",\"t\":[\"TCP在连接时使用三次握手，在断开时使用四次握手；确保连接的稳定和可靠\"]},\"44\":{\"h\":\"3.TCP是如何保证可靠的？\",\"t\":[\"通过确认应答机制以及重传机制来保证数据传输的可靠\"]},\"45\":{\"h\":\"4.重传机制有哪些？\",\"t\":[\"1.超时重传：已建立连接或者正在建立连接的两方，其中一方在发出数据包之后超一定时间，不返回ACK包，那么这一方就会认定出现丢包现象，重传这个数据包\",\"2.快速重传：已建立连接或者正在建立连接的两方，其中一方在发出数据包之后，重复三次收到相同的ACK包，那么这一方就会认为数据包丢失，重传数据包； 快速重传解决了超时重传重传周期太长的问题，但是超时重传和快速重传都具有一个问题：在一端 发送一堆数据包之后，其中某一个/几个数据包丢失时，无法精准定位是哪一个/几个，所以会选择将这个数据包之后的所有数据包全部重传一遍，容易造成资源的浪费，和网络的负担\",\"3.SACK：在TCP头部加一个SACK字段在每次接收完数据之后，将接收到数据的信息放到ACK包的这个字段，告知对方接收了哪些数据；这样如果出现数据丢失，发送方根据这一字段就可以精准定位这个丢失包，并且重发这个包\",\"4.Duplicate SACK：又称D_SACK，用于通知发送方哪些数据被重复接收了；让发送方知道时丢包还是网络延迟\"]},\"46\":{\"h\":\"5.TCP是如何保证有序的？\",\"t\":[\"在发送方，当传输层使用TCP协议时，数据包在经过传输层时可能会被拆分成多个小数据包，这个时候在TCP报文段中，每段数据都会被标记上一个序列号，表示数据在数据流中的位置\",\"在发送方接受到这些数据包的时候，会将它放到缓冲区，并根据序列号进行排序和重新组装，以确保数据的有序性\"]},\"47\":{\"h\":\"6.粘包问题？\",\"t\":[\"TCP时一个面向字节流的协议，所谓字节流就是一串没有边界的二进制数据\",\"在当使用TCP协议时，在传输层，一个完整的数据包可能会被拆分成多个小的数据包，也可能多个小的数据包会被合并成一个大数据包发送，就会出现连包和拆包的问题，导致接收方无法正确解析数据边界，造成数据处理错误\",\"解决方法：\",\"1.固定数据长度：在发送数据的同时，将每个包的长度固定\",\"2.使用特殊符号标识边界：例如在每一个完整的数据之后加一个特殊字符\",\"3.自定义消息结构：我们可以自定义一个消息结构，由头部和消息体组成，在头部保存当前整个消息的长度\",\"4.通过自定义协议\"]},\"48\":{\"h\":\"7.滑动窗口\",\"t\":[\"在TCP建立连接的时候，双方协商缓冲区大小，通过Window字段告知对方本端的缓冲区大小， 并在TCP连接建立之后开辟出一片缓冲区\",\"在连接建立之后，发送端就可以跟据接收端和本端窗口大小，向对方发送相应的字节数；接收放在接收完数据之后将其放到缓冲区，等待上层应用读取，当数据被读取，相应的缓冲区就会被释放；并跟据本端剩余缓冲区大小通告对方当前能接受数据的缓冲区大小\",\"发送方根据接收方的窗口变化，相应改变本端的窗口大小；然后发送方就可以根据接收端和本端窗口大小继续发送数据\"]},\"49\":{\"h\":\"8.拥塞控制\",\"t\":[\"1.慢启动：在TCP连接建立完成之后，它发送数据的能力会呈指数形式增长，每收到1次ACK，拥塞窗口加1\",\"2.拥塞避免：当拥塞窗口超过慢启动门限，就会进入拥塞避免算法，此时他发送数据的能力呈线性增长，每当收到一个 ACK 时，cwnd 增加 1/cwnd。\",\"3.拥塞发生：\",\"发生超时重传的拥塞发生算法：慢启动门限变成拥塞窗口/2，直接将拥塞窗口降为1\",\"发生快速重传的拥塞发生算法：将拥塞窗口减半，慢启动门限等于当前拥塞窗口，进入快恢复算法\",\"4.快速恢复：\",\"拥塞窗口 cwnd = ssthresh + 3 （ 3 的意思是确认有 3 个数据包被收到了）；\",\"重传丢失的数据包；\",\"如果再收到重复的 ACK，那么 cwnd 增加 1；\",\"如果收到新数据的 ACK 后，把 cwnd 设置为第一步中的 ssthresh 的值，原因是该 ACK 确认了新的数据，说明从 duplicated ACK 时的数据都已收到，该恢复过程已经结束，可以回到恢复之前的状态了，也即再次进入拥塞避免状态；\"]},\"50\":{\"h\":\"9.TCP的三次握手和四次挥手？\"},\"51\":{\"h\":\"三次握手\"},\"52\":{\"h\":\"1.第一次握手\",\"t\":[\"首先双方都处于closed状态，客户端会发送一个带有SYN（同步序列编号）标志的TCP报文到服务器，表示客户端请求连接；并且在其中客户端还会选择一个ISN（初始序列号）放入SYN报文段中\",\"第一次握手之后：客户端处于SYN_SENT状态（同步已发送），服务器处于LISTEN（监听状态）\"]},\"53\":{\"h\":\"2.第二次握手\",\"t\":[\"服务器同意建立连接，会回复一个带有SYN和ACK（确认号）标识的TCP报文；服务器也会选择一个初始序列号用于标识服务器到客户端的数据流\",\"第二次握手之后：客户端处于SYN_SENT状态，服务器处于SYN-RCVD（半连接状态）\"]},\"54\":{\"h\":\"3.第三次握手\",\"t\":[\"客户端在接收服务器的带有SYN和ACK（确认号）标识的TCP报文之后，会向服务器发送一个带有ACK标志的确认报文段;并且这个报文字段包含客户端收到的服务端的ISN，以及ACK（表示客户端希望下一次接受的序列号）\",\"第三次握手之后：客户端和服务器都进入ESTABLISHED\",\"三次握手的目的是确认双方都有发送和接受的能力\"]},\"55\":{\"h\":\"四次挥手\"},\"56\":{\"h\":\"1.第一次挥手\",\"t\":[\"客户端主动想要断开连接，向服务器发送一个FIN报文，之后客户端进入FIN_WAIT_1状态\"]},\"57\":{\"h\":\"2.第二次挥手\",\"t\":[\"服务端收到该报文，向客户端发送一个ACK报文，服务端进入CLOSE_WAIT状态，客户端接收之后进入FIN_WAIT_2状态\"]},\"58\":{\"h\":\"3.第三次挥手\",\"t\":[\"服务端可能还有数据需要处理和发送，等服务端不再发送数据时，发送FIN报文，之后服务端进入LAST_ACK状态\"]},\"59\":{\"h\":\"4.第四次挥手\",\"t\":[\"客户端向服务端发送ACK报文，服务端接收到报文之后进入CLOSE状态，而客户端则会TIME_WAIT(2MSL)之后进入CLOSE状态\",\"主动关闭连接的，才有 TIME_WAIT 状态。\"]},\"60\":{\"h\":\"10.time_wait状态的意义\",\"t\":[\"TIME_WAIT状态标识一个连接已经完成了关闭过程，并且在等最后的确认报文\",\"有两点作用：\",\"第一点：\",\"防止历史连接中的数据，被后面相同四元组的连接错误的接收；\",\"第二点：\",\"保证「被动关闭连接」的一方，能被正确的关闭；\",\"如果没有time_wait状态或者time_wait时间太短，可能导致数据错乱或者连接错误\"]},\"61\":{\"h\":\"11.为什么需要三次握手而不是四次，两次\"},\"62\":{\"h\":\"什么是restful风格？\",\"t\":[\"RESTful 是一种针对网络应用程序设计的架构风格，它基于 HTTP 协议，强调了资源的标识、状态和操作的统一性。\"]},\"63\":{\"h\":\"SQL的DCL\"},\"64\":{\"h\":\"DCL\",\"t\":[\"DCL数据控制语言，用来创建数据库用户,控制数据库的访问权限\",\"1. 查询用户 USE mysql; SELECT * FROM `user`; 2. 创建用户 CREATE USER '用户名'@'主机名' IDENTIFIED BY '密码'; 3. 修改用户密码 ALTER USER '用户名'@'主机名' IDENTIFIED WITH mysql_native_password BY '新密码'; 4. 删除用户 DROP USER '用户名'@'主机名'; #创建用户只能在当前主机上访问，密码123456 CREATE USER 'main'@'localhost' IDENTIFIED BY '123456'; #创建用户能在任意主机上访问，密码123456 CREATE USER 'main'@'%' IDENTIFIED BY '123456'; #修改用户密码 ALTER USER 'mian'@'%' IDENTIFIED WITH mysql_native_password BY '1234'; #删除用户 DROP USER 'mian'@'localhost';\",\"注意:\",\"主机名可以使用%通配。\",\"这类SQL开发人员操作的比较少,主要是DBA(Database Administrator 数据库管理员)使用。\",\"权限\",\"说明\",\"ALL, ALL PRIVILEGES\",\"所有权限\",\"SELECT\",\"查询数据\",\"INSERT\",\"插入数据\",\"UPDATE\",\"修改数据\",\"DELETE\",\"删除数据\",\"ALTER\",\"修改表\",\"DROP\",\"删除数据库/表/视图\",\"CREATE\",\"创建数据库/表\",\"1. 查询权限 SHOW GRANTS FOR '用户名’@'主机名’; 2. 授予权限 GRANT 权限列表 ON 数据库名.表名 TO '用户名'@'主机名'; 3. 撤销权限 REVOKE 权限列表 ON 数据库名.表名 FROM '用户名'@'主机名';\",\"注意:\",\"多个权限之间,使用逗号分隔\",\"授权时,数据库名和表名可以使用*进行通配,代表所有。\"]},\"65\":{\"h\":\"SQL的DDL\"},\"66\":{\"h\":\"DDL\"},\"67\":{\"h\":\"SQL的DML\"},\"68\":{\"h\":\"DML\",\"t\":[\"DML数据库操作语言，用来对数据库表中的数据进行增删改查\",\"#给指定字段添加数据 INSERT INTO 表名(字段名1，字段名2,...)VALUE(值1，值2) #例子 INSERT INTO `flipped-user1`(`NAME`，`AGE`)VALUE('ALice',30) #给全部的字段添加数据 INSERT INTO 表名 VALUES(值1，值2,..) #例子 INSERT INTO `flipped-user1`VALUES(NULL,'Alice',30); #批量添加数据 INSERT INTO 表名(字段名1,字段名2, .. )VALUES(值1,值2,.),(值1,值2, .. ),(值1,值2, ... ); INSERT INTO 表名VALUES(值1,值2,.),(值1,值2, .. ),(值1,值2, ... ); #例子 INSERT INTO `flipped-user1` (`NAME`, `AGE`) VALUES ('Alice', 2), ('Bob', 3), ('Charlie', 4); #修改数据 UPDATE 表名 SET 字段名1=值1,字段名2=值2,...[WHERE 条件]; #例子 UPDATE `flipped-user1`SET name = '倪浩' WHERE name='flipped'; #删除数据（NULL 是一个特殊的值，不能使用普通的等号（=）进行比较，应该使用 IS NULL 进行比较） DELETE FROM 表名 [WHERE 条件] DELETE FROM `flipped-user1` WHERE `name` IS NULL;\"]},\"69\":{\"h\":\"SQL的DQL\"},\"70\":{\"h\":\"DQL\",\"t\":[\"DQL数据查询语言，用来查询数据库中表的记录\",\"FROM: 确定要查询的表。 JOIN: 如果有多表查询，处理表连接。 WHERE: 过滤符合条件的记录。 GROUP BY: 将记录进行分组。 HAVING: 过滤分组后的记录。 SELECT: 选择要返回的列。 DISTINCT: 去除重复的记录。 ORDER BY: 对记录进行排序。 LIMIT/OFFSET: 返回限定的记录数。 #基本查询 1.查询多个字段 SELECT 字段1，字段2，字段3....FROM 表名; SELECT * FROM 表名; 2.设置别名 SELECT 字段1[AS 别名1],字段2[AS 别名2]...FROM 表名; #例子 SELECT `workadress` AS '工作地点' FROM `emp`; 也可以省去AS SELECT `workadress` '工作地点' FROM `emp`; 3.去除重复记录 SELECT DISTINCT 字段列表 FROM 表名; #例子 SELECT DISTINCT `workadress` '工作地点' FROM `emp`; #条件查询 SELECT 字段列表 FROM 表名 WHERE 条件列表; #例子 SELECT * FROM `emp` WHERE `idcard` IS NOT NULL; SELECT * FROM `emp` WHERE `age` > 15 AND `age` < 20; SELECT * FROM `emp` WHERE `age` BETWEEN 15 AND 20; SELECT * FROM `emp` WHERE `age`= 18 OR `age`= 20 OR `age`= 40; SELECT * FROM `emp` WHERE `age` IN(18,20,40); 查询两个字的姓名 SELECT * FROM `emp` WHERE `name` LIKE '__';\",\"比较运算符\",\"功能\",\">\",\"大于\",\">=\",\"大于等于\",\"<\",\"小于\",\"<=\",\"小于等于\",\"=\",\"等于\",\"<> 或 !=\",\"不等\",\"BETWEEN ... AND ...\",\"在某个范围之内(含最小、最大值)\",\"IN( ... )\",\"在in之后的列表中的值,多选一\",\"LIKE 占位符\",\"模糊匹配(_匹配单个字符,%匹配任意个字符)\",\"IS NULL\",\"是NULL\",\"逻辑运算符\",\"功能\",\"AND 或 &&\",\"并且(多个条件同时成立)\",\"OR 或Ⅱ\",\"或者(多个条件任意一个成立)\",\"NOT 或!\",\"非,不是\"]},\"71\":{\"h\":\"聚合函数\",\"t\":[\"函数\",\"功能\",\"count\",\"统计数量\",\"max\",\"最大值\",\"min\",\"最小值\",\"avg\",\"平均值\",\"sum\",\"求和\",\"SELECT 聚合函数(字段列表) FROM 表名; #统计数量 SELECT COUNT(*) FROM `emp`; SELECT COUNT(`id`) FROM `emp`; #统计平均数 SELECT AVG(`age`) FROM `emp`; #统计最大值 SELECT MAX(`age`) FROM `emp`; #最小值 SELECT MIN(`age`) FROM `emp`; SELECT SUM(`age`) FROM `emp` WHERE `workadress` = `西安`;\",\"SELECT 字段列表 FROM 表名[WHERE 条件]GROUP BY 分组字段[HAVING 分组后的过滤条件]; #根据性别分组，并计算总和 SELECT `gender` ,COUNT(*) FROM `emp` GROUP BY `gender`; #根据性别分组，并计算年龄平均值 SELECT `gender`, AVG(`age`) FROM `emp` GROUP BY `gender`; #查询年龄小于45，根据工作地址分组，并获取人数大于三的工作地址 SELECT `workadress`, COUNT(*) FROM `emp`WHERE `age` < 45 GROUP BY `workadress` HAVING COUNT(*) > 3;\",\"1.where与having区别\",\"执行时机不同: where是分组之前进行过滤,不满足where条件,不参与分组;而having是分组之后对结果进行过滤。\",\"判断条件不同:where不能对聚合函数进行判断,而having可以。\",\"注意· 执行顺序:where>聚合函数>having。· 分组之后,查询的字段一般为聚合函数和分组字段,查询其他字段无任何意义。\",\"SELECT 字段列表 FROM 表名 ORDER BY 字段1 排序方式1，字段2 排序方式2; #根据年龄进行升序排序 SELECT * FROM `emp` ORDER BY `age` ASC; #根据年龄进行升序排序，如果年龄相同，再按照入职时间进行降序排序 SELECT * FROM `emp` ORDER BY `age` ASC, `entrydate` DESC;\",\"排序方式\",\"ASC: 升序(默认值)\",\"DESC: 降序\",\"注意:如果是多字段排序,当第一个字段值相同时,才会根据第二个字段进行排序。\",\"SELECT 字段列表 FROM 表名 LIMIT 起始索引,查询记录数; #查询第一页数据，每页展示十条数据 SELECT * FROM `emp` LIMIT 0,10; #查询第二页数据，每页展示十条数据 SELECT * FROM `emp` LIMIT 10,10;\",\"注意\",\"*起始索引从0开始,起始索引=(查询页码-1)每页显示记录数。\",\"分页查询是数据库的方言,不同的数据库有不同的实现,MySQL中是LIMIT。\",\"如果查询的是第一页数据,起始索引可以省略,直接简写为limit 10。\",\"1. 查询年龄为20,21,22,23岁的员工信息。 2. 查询性别为男,并且年龄在20-40岁(含)以内的姓名为三个字的员工。 3. 统计员工表中,年龄小于60岁的,男性员工和女性员工的人数。 4. 查询所有年龄小于等于35岁员工的姓名和年龄,并对查询结果按年龄升序排序,如果年龄相同按入职时间降序排序。 5. 查询性别为男,且年龄在20-40岁(含)以内的前5个员工信息,对查询的结果按年龄升序排序,年龄相同按入职时间升序排序。 SELECT * FROM `emp` WHERE `age` IN (20,21,22,23); SELECT * FROM `emp` WHERE `age`>=20 AND `age`<=40 AND `name` LIKE '___'; SELECT `gender`, COUNT(*) FROM `emp` WHERE `age` < 60 GROUP BY `gender`; SELECT `name`,`age` FROM `emp` WHERE `age`<=35 ORDER BY `age` , `entrydate` DESC; SELECT * FROM `emp` WHERE `gender` = '男' AND `age`>=20 AND `age`<=40 ORDER BY `entydate` ASC LIMIT 5 ;\"]},\"72\":{\"h\":\"EXPLAIN 一个SQL语句\"},\"73\":{\"h\":\"EXPLAIN 一个SQL语句可以查询到什么？\"},\"74\":{\"h\":\"SQL中的函数\"},\"75\":{\"h\":\"字符串函数\",\"t\":[\"函数\",\"功能\",\"CONCAT(S1,S2,….Sn)\",\"字符串拼接,将S1,S2,…Sn拼接成一个字符串\",\"LOWER(str)\",\"将字符串str全部转为小写\",\"UPPER(str)\",\"将字符串str全部转为大写\",\"LPAD(str,n,pad)\",\"左填充,用字符串pad对str的左边进行填充,达到n个字符串长度\",\"RPAD(str,n,pad)\",\"右填充,用字符串pad对str的右边进行填充,达到n个字符串长度\",\"TRIM(str)\",\"去掉字符串头部和尾部的空格\",\"SUBSTRING(str,start,len)\",\"返回从字符串str从start位置起的len个长度的字符串\",\"#由于业务需求变更,企业员工的工号,统一为5位数,目前不足5位数的全部在前面补0。比如:1号员工的工号应该为00001。 UPDATE `emp` SET `workon` = LPAD(`workon`,5,'0');\"]},\"76\":{\"h\":\"数值函数\",\"t\":[\"函数\",\"功能\",\"CEIL(x)\",\"向上取整\",\"FLOOR(×)\",\"向下取整\",\"MOD(x,y)\",\"返回x/y的模\",\"RAND()\",\"返回0~1内的随机数\",\"ROUND(x,y)\",\"求参数x的四舍五入的值,保留y位小数\",\"-- ceil select ceil(1.1); #结果2 -- floor select floor(1.9); #结果1 -- mod select mod(3,4); #结果3 取余 -- rand select rand(); #0-1内的随机数 -- round select round(2.34,2); #通过数据库的函数,生成一个六位数的随机验证码。 select lpad(round(rand() * 1000000,0),6,'0');\"]},\"77\":{\"h\":\"日期函数\",\"t\":[\"函数\",\"功能\",\"CURDATE()\",\"返回当前日期\",\"CURTIME()\",\"返回当前时间\",\"NOW()\",\"返回当前日期和时间\",\"YEAR(date)\",\"获取指定date的年份\",\"MONTH(date)\",\"获取指定date的月份\",\"DAY(date)\",\"获取指定date的日期\",\"DATE_ADD(date, INTERVAL expr type)\",\"返回一个日期/时间值加上一个时间间隔expr后的时间值\",\"DATEDIFF(date1,date2)\",\"返回起始时间date1和 结束时间date2之间的天数\",\"DATE_SUB(date, INTERVAL value unit)\",\"从指定的日期或时间值中减去指定的时间间隔。\",\"select curdate();#获取当前日期 select curtime();#获取当前时间 select now();#获取当前日期和时间 select YEAR(now());#获取当前年份 select MONTH(now());#获取当前月份 select DAY(now());#获取当前的日期（某一日） select date_add(now(),INTERVAL 60 DAY);#间隔60天 select DATE_SUB(date, INTERVAL value unit) #从指定的日期或时间值中减去指定的时间间隔。 select datediff('2018-09-01','2024-12-18')#求取两个时间之间的天数（第一个减第二个时间） #查询所有员工入职天数，并根据入职天数倒序排序 select `name`,datediff(curdate(),`entrydate`) as 'entrydates' from `emp` order by 'entrydates' de;\"]},\"78\":{\"h\":\"流程函数\",\"t\":[\"函数\",\"功能\",\"IF(value , t, f)\",\"如果value为true，则返回t，否则返回f\",\"IFNULL(value1, value2)\",\"如果value1不为空，返回value1，否则返回value2\",\"CASE WHEN [val1] THEN [res1] ... ELSE[default] END\",\"如果val1为true，返回res1，... 否则返回default默认值\",\"CASE[expr] WHEN [val1] THEN [res1] ...ELSE[default] END\",\"如果expr的值等于val1，返回res1，...否则返回default默认值\",\"select if(true,\\\"ok\\\",\\\"error\\\"); select ifnull(\\\"ok\\\",\\\"default\\\") -- 需求: 查询emp 表的员工姓名和工作地址(北京/上海 ---> 一线城市 ， 其他 ---> 二线城市) select `name`, (case `address` when '北京' then '一线城市' when '上海' then '一线城市' else '二线城市' end) as '工作地址' from emp; -- 案例: 统计班级各个学员的成绩，展示的规则如下: -- >= 85，展示优秀 -- >= 60，展示及格 -- 否则，展示不及格 create table score( id int comment 'ID', name varchar(20) comment '姓名', math int comment '数学', english int comment '英语', chinese int comment '语文' )comment '学员成绩表'; insert into score (id, name, math, english, chinese) values (1, 'Tom', 67, 88, 95), (2, 'Rose', 23, 66, 90), (3, 'Jack', 56, 98, 76); SELECT id, `name`, (case WHEN `math` >=85 THEN '优秀' WHEN `math` >=60 THEN '及格' ELSE '不及格' END)AS '数学', `english`, `chinese` FROM `score`;\"]},\"79\":{\"h\":\"SQL的约束\"},\"80\":{\"h\":\"约束\",\"t\":[\"概念:约束是作用于表中字段上的规则，用于限制存储在表中的数据。 目的:保证数据库中数据的正确、有效性和完整性\",\"分类\",\"描述\",\"关键字\",\"非空约束\",\"限制该字段数据不能为NULL\",\"NOT NULL\",\"唯一约束\",\"保证该字段的所有数据都是唯一，不重复的\",\"UNIOUE\",\"主键约束\",\"主键是一行数据的唯一标识，要求非空且唯一\",\"PRIMARY KEY\",\"默认约束\",\"保存数据时，如果未指定该字段的值，则采用默认值\",\"DEFAULT\",\"检查约束(8.0.16版本之后)\",\"保证字段值满足某一个条件\",\"CHECK\",\"外键约束\",\"用来让两张表的数据之间建立连接，保证数据的一致性和完整性\",\"FOREIGN KEY\",\"CREATE TABLE user ( id INT PRIMARY KEY AUTO_INCREMENT COMMENT '主键', name VARCHAR(10) NOT NULL UNIQUE COMMENT '姓名', age INT CHECK (age > 0 AND age <= 120) COMMENT '年龄', status CHAR(1) DEFAULT '1' COMMENT '状态', gender CHAR(1) COMMENT '性别' ) COMMENT '用户表';\"]},\"81\":{\"h\":\"外键约束\",\"t\":[\"概念：外键用来让两张表的数据之间建立连接，从而保证数据的一致性和完整性\",\"-- 创建表 dept CREATE TABLE dept ( id INT AUTO_INCREMENT PRIMARY KEY COMMENT 'ID', name VARCHAR(50) NOT NULL COMMENT '部门名称' ) COMMENT '部门表'; -- 插入数据 INSERT INTO dept (id, name) VALUES (1, '研发部'), (2, '市场部'), (3, '财务部'), (4, '销售部'), (5, '总经办'); -- 创建表 emp CREATE TABLE emp ( id INT AUTO_INCREMENT PRIMARY KEY COMMENT 'ID', name VARCHAR(50) NOT NULL COMMENT '姓名', age INT COMMENT '年龄', job VARCHAR(20) COMMENT '职位', salary INT COMMENT '薪资', entrydate DATE COMMENT '入职时间', managerid INT COMMENT '直属领导ID', dept_id INT COMMENT '部门ID' ) COMMENT '员工表'; -- 插入数据 INSERT INTO emp (name, age, job, salary, entrydate, managerid, dept_id) VALUES ('金庸', 66, '总裁', 20000, '2000-01-01', NULL, 5), ('张无忌', 20, '项目经理', 12500, '2005-12-05', 1, 1), ('杨道', 33, '开发', 8400, '2000-11-03', 2, 1), ('韦一笑', 48, '开发', 11000, '2002-08-05', 2, 1), ('常遇春', 43, '开发', 10580, '2004-09-07', 3, 1), ('小昭', 19, '程序员鼓励师', 6600, '2004-10-12', 2, 1); -- 添加外键 ALTER TABLE emp ADD CONSTRAINT fk_emp_dept_id FOREIGN KEY (dept_id) REFERENCES dept(id); -- 删除外键 ALTER TABLE emp DROP FOREIGN KEY fk_emp_dept_id;\",\"-- 添加外键 CREATE TABLE 表名( 字段名 数据类型 ... [CONSTRAINT] [外键名称] FOREIGN KEY(外键字段名) REFERENCES 主表(主表列名) ); ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY(外键字段) REFERENCES 主表(主表列名); -- 删除外键 ALTER TABLE 表名 DROP FOREIGN KEY 外键名称;\",\"外键的(删除/更新)行为：\",\"行为\",\"说明\",\"NO ACTION\",\"当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新。(与 RESTRICT一致)\",\"RESTRICT\",\"当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新。(与NO ACTION 一致\",\"CASCADE\",\"当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有，则也删除/更新外键在子表中的记录。\",\"SET NULL\",\"当在父表中删除对应记录时，首先检查该记录是否有对应外键，如果有则设置子表中该外键值为null(这就要求该外键允许取null)\",\"SET DEFAULT\",\"父表有变更时，子表将外键列设置成一个默认的值(Innodb不支持)\",\"ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段) REFERENCES 主表名(主表字段) ON UPDATE CASCADE ON DELETE CASCADE; ALTER TABLE emp ADD CONSTRAINT fk_emp_dept_id FOREIGN KEY (dept_id) REFERENCES dept(id) ON UPDATE CASCADE ON DELETE CASCADE;\"]},\"82\":{\"h\":\"CPU Cache\"},\"83\":{\"h\":\"cup cache\"},\"84\":{\"h\":\"如何写出让 CPU 跑得更快的代码？\"},\"85\":{\"h\":\"数据缓存\"},\"86\":{\"h\":\"指令缓存\"},\"87\":{\"h\":\"多核 CPU 的缓存命中率\"},\"88\":{\"h\":\"CUP是如何执行任务的?\"},\"89\":{\"h\":\"CPU如何执行任务的\"},\"90\":{\"h\":\"Cache 伪共享是什么？\"},\"91\":{\"h\":\"避免伪共享的方法\"},\"92\":{\"h\":\"CPU 是根据什么来选择当前要执行的线程。\"},\"93\":{\"h\":\"调度类\"},\"94\":{\"h\":\"完全公平调度\"},\"95\":{\"h\":\"CPU 运行队列\"},\"96\":{\"h\":\"调整优先级\"},\"97\":{\"h\":\"CUP的缓存一致性\"},\"98\":{\"h\":\"CPU Cache 的数据写入\"},\"99\":{\"h\":\"写直达\"},\"100\":{\"h\":\"写回\"},\"101\":{\"h\":\"缓存一致性问题\"},\"102\":{\"h\":\"总线嗅探\"},\"103\":{\"h\":\"MESI 协议\"},\"104\":{\"h\":\"什么是中断？\"},\"105\":{\"h\":\"中断\"},\"106\":{\"h\":\"软中断\"},\"107\":{\"h\":\"内存管理\"},\"108\":{\"h\":\"1. 虚拟内存\"},\"109\":{\"h\":\"问题背景\"},\"110\":{\"h\":\"基本概念\"},\"111\":{\"h\":\"1.1 内存分段\"},\"112\":{\"h\":\"内存碎片\"},\"113\":{\"h\":\"内存交换效率低\"},\"114\":{\"h\":\"1.2 内存分页\"},\"115\":{\"h\":\"简单分页（有缺陷）\"},\"116\":{\"h\":\"多级页表\"},\"117\":{\"h\":\"TLB\"},\"118\":{\"h\":\"1.3 段页式内存管理\"},\"119\":{\"h\":\"Linux内存布局\"},\"120\":{\"h\":\"内核空间与用户空间的区别\"},\"121\":{\"h\":\"虚拟内存的作用\"},\"122\":{\"h\":\"虚拟内存的功能\"},\"123\":{\"h\":\"虚拟内存管理器\"},\"124\":{\"h\":\"冯诺依曼模型\"},\"125\":{\"h\":\"内存：\"},\"126\":{\"h\":\"中央处理器：\"},\"127\":{\"h\":\"总线：\"},\"128\":{\"h\":\"输入、输出设备\"},\"129\":{\"h\":\"存储器的层次结构\"},\"130\":{\"h\":\"线程\"},\"131\":{\"h\":\"线程的优势\"},\"132\":{\"h\":\"理解线程\"},\"133\":{\"h\":\"线程与进程的比较\"},\"134\":{\"h\":\"线程的上下文切换\"},\"135\":{\"h\":\"线程的实现方式\"},\"136\":{\"h\":\"线程的优劣势\"},\"137\":{\"h\":\"计算机保存数据的形式\"},\"138\":{\"h\":\"用补码的形式保存负数：\"},\"139\":{\"h\":\"十进制小数与二进制的转换\"},\"140\":{\"h\":\"计算机是怎么存小数的？\"},\"141\":{\"h\":\"。\"},\"142\":{\"h\":\"进程\"},\"143\":{\"h\":\"进程的状态：\"},\"144\":{\"h\":\"进程的控制结构：\"},\"145\":{\"h\":\"进程的控制\"},\"146\":{\"h\":\"进程的上下文切换\"},\"147\":{\"h\":\"泛型函数\",\"t\":[\"package main import ( \\\"encoding/json\\\" \\\"fmt\\\" ) type Number interface { int | uint | int64 | uint64 | float64 | float32 } func plus[T Number](n1, n2 T) T { return n1 + n2 } func myPrint[T int, K string | int](u1 T, u2 K) { } type response[T any] struct { Code int `json:\\\"code\\\"` Msg string `json:\\\"msg\\\"` Data T `json:\\\"data\\\"` } func main() { plus(1, 2) var u1, u2 = uint(2), uint(3) plus(u1, u2) type user1 struct { Name string `json:\\\"name\\\"` Age int `json:\\\"age\\\"` } type userInfo struct { Name string `json:\\\"name\\\"` Age int `json:\\\"age\\\"` Cord string `json:\\\"cord\\\"` } user := response{ Code: 0, Msg: \\\"Flipped\\\", Data: user1{ Name: \\\"Tom\\\", Age: 18, }, } body, err := json.Marshal(user) if err != nil { panic(err) } fmt.Println(string(body)) useInfo := response{ Code: 0, Msg: \\\"Flipped\\\", Data: userInfo{ Name: \\\"Tom\\\", Age: 18, Cord: \\\"北京\\\", }, } body1, err := json.Marshal(useInfo) if err != nil { panic(err) } fmt.Println(string(body1)) var useInfo response[userInfo] var user response[user1] json.Unmarshal([]byte(`{\\\"code\\\":0,\\\"msg\\\":\\\"Flipped\\\",\\\"data\\\":{\\\"name\\\":\\\"Tom\\\",\\\"age\\\":18}}`), &user) fmt.Println(user.Data.Age) _ = json.Unmarshal([]byte(`{\\\"code\\\":0,\\\"msg\\\":\\\"Flipped\\\",\\\"data\\\":{\\\"name\\\":\\\"Tom\\\",\\\"age\\\":18,\\\"cord\\\":\\\"北京\\\"}}`), &useInfo) fmt.Println(useInfo.Data.Name) //泛型切片 type MySlice[T int | string] []T var myslice = MySlice[int]{1, 2, 3} fmt.Println(myslice[0] + 1) // map的key只能是基本数据类型 type MyMap[T string, K any] map[T]K var mymap = MyMap[string, int]{ \\\"name\\\": 12, } fmt.Println(mymap) }\"]},\"148\":{\"h\":\"List\",\"t\":[\"# List # 定义 a=[] b=list() [1,2,3,45] # 在python中一个list可以保存多个数据类型不同的元素，元素甚至可以是列表 my_list=['it',12,True] print(my_list) print(type(my_list)) # 列表的下标可以反向索引最后一个数据下标为-1，往前依次是-2、-3、-4···· # 正向索引 print(my_list[0]) print(my_list[1]) print(my_list[2]) # 反向索引 print(my_list[-1]) print(my_list[-2]) print(my_list[-3]) # 从嵌套列表中选取数据 my_list = [[1,2,3],[4,5,6]] print(my_list[0][0]) print(my_list[0][1]) print(my_list[1][2]) # 用list的方法查询 my_list = [1, 2, 3, 4, 5, 6,] # 查询2在list中下标 index=my_list.index(2) # 修改特定下标的值 my_list[1]=\\\"程序猿\\\" print(my_list[1]) # 在指定的下标处插入某个元素 my_list.insert(1,\\\"it\\\") print(my_list) # 追加元素 my_list.append(\\\"尼豪\\\") print(my_list) # 追加一堆元素，其他的list my_list2=[7,8,9] my_list.extend(my_list2) print(my_list) # 删除list中元素 del my_list2[2] print(my_list2) # 下标1的元素提取出来并返回 num=my_list2.pop(1) print(my_list2,num) # 删除在例表中第一个匹配的值 my_list.remove(\\\"it\\\") print(my_list) # 清空列表 # my_list.clear() # 统计某元素在列表中的数量 num2=my_list.count(\\\"程序猿\\\") print(num2) # 例表的长度 len(my_list) # 使用While遍历list def While_list (): my_list = [1,2,3,4,5] index = 0 while index<len(my_list): print(my_list[index]) index += 1 While_list() # 使用for遍历list def for_list(): my_list = [1,2,3,4,5] for i in my_list: print(i) for_list()\"]},\"149\":{\"h\":\"while和for\",\"t\":[\"age=input(\\\"请输入你的年龄\\\") print(\\\"你的年龄是%s\\\" % age) # input语句会将所有输入的数据当成字符串，如果需要自行转换类型 # age=input(\\\"请输入你的年龄\\\") print(\\\"你的年龄是%s\\\" % age) age=int(age) if age < 18 : print(\\\"未成年\\\") else: print(\\\"成年\\\") # tall=int(input(\\\"请输入你的身高\\\")) vip=int(input(\\\"请输入你的VIP等级\\\")) if tall<120: print(\\\"你可以不买票\\\") elif vip>3: print(\\\"您快去\\\") else: print(\\\"去买票\\\") # 1-10内的随机数 num=random.randint(1,10) print(num) # while循环 i=0 while i<10: print(\\\"第%s次循环\\\" % i) i+=1 # 99乘法表 i=0 while i<=9: j=1 while j<=i: print(f\\\"{j} * {i} = {j*i}\\\\t\\\",end=\\\" \\\") j+=1 i+=1 print() #for循环 name=\\\"Flipped1001\\\" for i in name: print(i,end=\\\"\\\") const=0 name=\\\"itheima is a brand of itcast\\\" for i in name: if i == 'a' : const=const+1 print(const) # range(num1,num2,step):获取一个从num1到num2步长为step的数字序列(不会包含num2) for i in range(1,18,2) print(i) num=101 count=0 for i in range(1,num): if i %2 ==0: count+=1 print(f\\\"在0到{num-1}内有{count}个偶数\\\") # 使用for循环99乘法表 for i in range(1,10): for j in range(1,i+1): print(f\\\"{j} * {i} = {j*i}\\\\t\\\",end=\\\" \\\") print() # continue 跳过本次循环 # 直接结束所在循环\"]},\"150\":{\"h\":\"元组\",\"t\":[\"# 元组(tupel 一旦完成封装就不可以被修改) # 元组也可以嵌套，即元组中元素也可以是元组 # 定义 (1,2,3,4,5) a=(1,2,3,4,5) b=() c=tuple() # 定义单个元组的时候后面必须写上, t = tupel(\\\"ni\\\",) # 由于元组不可修改，所以只有index,len,count # 用while遍历元组 index=0 while index<len(t1): print(t1[index]) index+=1 # 用for遍历 for i in t1: print(i) # 元组不可修改，但元组中的list可以修改 t2 = (1, 2, 3, [4, 5, 6]) t2[3][0] = \\\"it\\\" print(t2)\"]},\"151\":{\"h\":\"函数\",\"t\":[\"# 函数 str1=\\\"hsdhaui\\\" str2=\\\"nmksadsi\\\" str3=\\\"dnsajknd\\\" def my_len (data): # 可以给函数加一个说明文档，方便后续应用 \\\"\\\"\\\" 函数说明 :param data:形参 :return:data的长度 \\\"\\\"\\\" count = 0 for i in data: count += 1 return count num1=my_len(str1) num2=my_len(str2) num3=my_len(str3) print(num1,num2,num3) # 无return会返回一个None值，None在if中使false name = None ## # 在函数外面定义的是全局变量 num = 100 #在函数内部定义的是局部变量 def test_a(): #使用global关键字，可以将函数内部的变量成为全局变量 global num num = 500 test_a() print(num) # 函数的传参 def user_info (name,age,gender): print(\\\"Hello {}!, age {} gender {} \\\".format(name,age,gender)) user_info(\\\"小明\\\",20,\\\"女\\\") user_info(name=\\\"小明\\\",age=20,gender=\\\"女\\\") user_info(name=\\\"萧峰\\\",gender=\\\"男\\\",age=30) user_info(\\\"天天\\\",age=20,gender=\\\"男\\\") #设置默认值的时候，必须是设置在最后 def user_info (name,age,gender='沃尔玛购物袋'): print(\\\"Hello {}!, age {} gender {} \\\".format(name,age,gender)) user_info(\\\"枫枫\\\",20) user_info(\\\"正\\\",age=20,gender=\\\"男\\\") # 位置不定长,接受不定长的数据,参数形成一个元组 def user_info(*args): print(type(args),args) user_info(\\\"dasij\\\",132,\\\"dbau \\\") # 关键字不定长，参数必须是kv形式的,参数以字典的形式存在 def user_info(**kwargs): print(kwargs) user_info(name=\\\"dias\\\",age=20) # 匿名函数 def test_func(compute): result=compute(1,2) print(result) print(type(compute)) print(type(result)) def compute(x,y): return x+y test_func(compute) # 关键字lambda(不接受的话就是一个临时函数，不可以写多行数据) # lambda 参入参数: 函数体(一行代码) def test_func(compute): print(compute(1,2)) test_func(lambda x,y:x+y)\"]},\"152\":{\"h\":\"字典\",\"t\":[\"# 字典dict \\\"\\\"\\\" 1.键值对的Key和Value可以是任意类型(Key不可为字典) 2.字典内Key不允许重复，重复添加等同于覆盖原有数据 \\\"\\\"\\\" # 定义字典(dict) map = {\\\"王力宏\\\": 99, \\\"周小阶\\\": 88, \\\"高\\\": 77} map1 = {} map2 = dict() print(map) print(type(map1)) # 用key获取value value = map[\\\"王力宏\\\"] print(value) # 定义嵌套字典 stud_score = { \\\"王力宏\\\": { \\\"数学\\\": 99, \\\"语文\\\": 88, \\\"外语\\\": 99, }, \\\"小周\\\": { \\\"数学\\\": 66, \\\"语文\\\": 98, \\\"外语\\\": 77, } } score = stud_score[\\\"小周\\\"][\\\"语文\\\"] print(score) my_dict = {\\\"周杰轮\\\": 99, \\\"林俊节\\\": 88, \\\"张学油\\\": 77} # 新增元素 my_dict[\\\"张信哲\\\"] = 66 print(f\\\"字典经过新增元素后，结果: {my_dict}\\\") # 更新元素 my_dict[\\\"周杰轮\\\"] = 33 print(f\\\"字典经过更新后，结果: {my_dict}\\\") # 删除元素 value=my_dict.pop(\\\"周杰轮\\\") print(my_dict) print(value) # 清空元素 # my_dict.clear() # 获取全部的key,遍历 value=my_dict.keys() print(value) # 跟据keys for key in value: print(my_dict[key]) # 直接for for key in my_dict: print(my_dict[key]) len(my_dict)\",\"数据容器可以从以下视角进行简单的分类:\",\"是否支持下标索引 \",\"支持：列表、元组、字符串 - 序列类型\",\"不支持：集合、字典- 非序列类型\",\"是否支持重复元素 \",\"支持：列表、元组、字符串 序列类型\",\"不支持：集合、字典- 非序列类型\",\"是否可以修改 \",\"支持：列表、集合、字典\",\"不支持：元组、字符串\",\"类型转换：\",\"支持所有容器转为list，tuple，set，使用list[]，tuple(),set{}。但是字典,元组转换时，元素为key没有保留value；字符串转换的时候元素为 ‘ 字符 ’\",\"支持所有容器转为str，使用str()。都会转为字符串，字典在转换过程中value保留\",\"sorted给数据容器排序，sorted(序列，[renerse=True]),true降序，默认升序\"]},\"153\":{\"h\":\"字符串\",\"t\":[\"# 字符串 # 字符串可以看成是一个存放字符的数据容器，无法修改 my_str=\\\"Flipped string\\\" # 通过下标索引取值 value=my_str[2] print(value) # 字符串Index value2=my_str.index(\\\"F\\\") print(value2) # 字符串的替换replace,获取一个新的字符串 value3=my_str.replace(\\\"string\\\",\\\"title\\\") print(value3) # spilt分割字符串 my_list=\\\"python flipped studey\\\" value4=my_list.split(\\\" \\\") print(value4) # strip去除前后的空格 my_str=\\\" ni hao \\\" value5=my_str.strip() # 不传入参数，去除前后空格 print(value5) value6=my_str.strip(\\\" ni\\\")# 去除前后指定字符 print(value6) # count len value=my_str.count(\\\"a\\\") value2= len(my_str) print(value) print(value2)\"]},\"154\":{\"h\":\"序列的切片\",\"t\":[\"# 序列的切片(list,tuple,str) # 对list进行切片，从1开始，4结束，步长1 my_list = [0, 1, 2, 3, 4, 5, 6] result1 = my_list[1:4] # 步长默认是1，所以可以省略不写 print(f\\\"结果1: {result1}\\\") # tuple进行切片，从头开始，到最后结束，步长1 my_tuple = (0, 1, 2, 3, 4, 5, 6) result2 = my_tuple[:] # 起始和结束不写表示从头到尾，步长为1可以省略 print(f\\\"结果2: {result2}\\\") # 对str进行切片，从头开始，到最后结束，步长2 my_str = \\\"01234567\\\" result3 = my_str[::2] print(f\\\"结果3: {result3}\\\") # 对str进行切片，从头开始，到最后结束，步长-1 my_str = \\\"01234567\\\" result4 = my_str[::-1] print(f\\\"结果4: {result4}\\\") # 等同于将序列反转了 # 对列表进行切片，从3开始，到结束，步长-1 my_list = [0, 1, 2, 4, 5, 6] result5 = my_list[3:1:-1] print(f\\\"结果5: {result5}\\\") # 对元组进行切片，从头开始，到尾结束，步长-2 my_tuple = (0, 1, 2, 3, 4, 5, 6) result6 = my_tuple[::-2] print(f\\\"结果6: {result6}\\\")\"]},\"155\":{\"h\":\"python的数据类型\",\"t\":[\"类型\",\"描述\",\"说明\",\"数字(Number)\",\"整数(int)浮点数(float)复数(complex)布尔(bool)\",\"整数(int),如:10、-10浮点数(float),如:13.14、-13.14复数(complex)，如:4+3j，以j结尾表示复数布尔(bool)表达现实生活中的逻辑,即真和假,True表示真,False表示假。True本质上是一个数字记作1,False记作0\",\"字符串(String)\",\"描述文本的一种数据类型\",\"字符串(string)由任意数量的字符组成\",\"列表(List)\",\"有序的可变序列\",\"Python中使用最频繁的数据类型,可有序记录一堆数据\",\"元组(Tuple)\",\"有序的不可变序列\",\"可有序记录一堆不可变的Python数据集合\",\"集合(Set)\",\"无序不重复集合\",\"可无序记录一堆不重复的Python数据集合\",\"字典(Dictionary)\",\"无序Key-Value集合\",\"可无序记录一堆Key-Value型的Python数据集合\",\"type（数据） 查看数据的类型,也可以查看变量的数据类型\",\"print(type(\\\"字符串\\\")) # 输出 <class 'str'> # 数据类型转换 a=str(11) # 只有双引号里都是数字才可以转为int类型 b=int(\\\"123\\\") c=float(\\\"1.2\\\") print(type(a)) print(type(b)) print(type(c)) <class 'str'> <class 'int'> <class 'float'>\",\"标识符命名规则 - 内容限定\",\"标识符命名中，只允许出现：\",\"英文\",\"中文\",\"数字\",\"下划线(_)\",\"这四类元素。\",\"其余任何内容都不被允许。\",\"大小写敏感\",\"不可使用关键字\",\"运算符\",\"描述\",\"实例\",\"+\",\"两个对象相加a+b 输出结果 30\",\"-\",\"得到负数或是一个数减去另一个数a-b输出结果-10\",\"*\",\"两个数相乘或是返回一个被重复若干次的字符串a*b输出结果200\",\"/\",\"b /a 输出结果 2\",\"//\",\"取整除\",\"返回商的整数部分9//2输出结果 4,9.0//2.0 输出结果 4.0\",\"%\",\"取余\",\"返回除法的余数b%a 输出结果0\",\"**\",\"指数\",\"a ** b为10的20次方,输出结果 100000000000000000000\",\"# 算术(数学)运算符 print(\\\"1 +1=\\\",1+1) print(\\\"2 - 1 =\\\", 2 -1) print(\\\"3 * 3=\\\", 3*3) print(\\\"4 / 2 = \\\", 4 / 2) print(\\\"11 // 2=\\\", 11 // 2) print(\\\"9 % 2 = \\\", 9 % 2) print(\\\"2 ** 2 =\\\", 2 ** 2) #复合运算符 num = 1 num += 1 # num = num + 1 print(\\\"num += 1: \\\", num) num -= 1 print(\\\"num -= 1: \\\", num) num *= 4 print(\\\"num *= 4: \\\", num) num /= 2 print(\\\"num /= 2: \\\", num) num = 3 num %= 2 print(\\\"num %= 2: \\\", num) num **= 2 print(\\\"num **= 2: \\\", num) num = 9 num //= 2 print(\\\"num //= 2:\\\", num)\",\"字符串\",\"print(type(name)) # 单引号定义法,使用单引号进行包围 name ='黑马程序员’ print(type(name)) # 双引号定义法 name =\\\"黑马程序员” print(type(name)) # 三引号定义法,写法和多行注释是一样的 name = \\\"\\\"\\\"字符串\\\"\\\"\\\" print(type(name)) # 在字符串内 包含双引号 name ='\\\"黑马程序员”' print(name) # 在字符串内 包含单引号 name =\\\"'黑马程序员'\\\" print(name) # 使用转义字符 \\\\ 解除引号的效用 name =\\\"\\\\\\\"黑马程序员\\\\\\\"\\\" print (name) name='\\\\'黑马程序员\\\\'' print(name) # %s 一个字符串类型的占位符 name=\\\"这是一个%s\\\" % \\\"字符串\\\" print(name) \\\"\\\"\\\" %s 一个字符串类型的占位符 %d 一个整数类型的占位符 %f 一个浮点数类型的占位符 \\\"\\\"\\\" name=\\\"这是一个%s，这是一个%d，这是一个%f\\\" % (\\\"字符串\\\",12,12) print(name)\",\"字符串格式化-数字精度控制\",\"我们可以使用辅助符号\\\"m.n”来控制数据的宽度和精度\",\"m，控制宽度,要求是数字(很少使用)，设置的宽度小于数字自身，不生效\",\".n，控制小数点精度,要求是数字，会进行小数的四舍五入\",\"示例：\",\"%5d：表示将整数的宽度控制在5位,如数字11，被设置为5d,就会变成： 11，用三个空格补足\",\"宽度。\",\"%5.2f：表示将宽度控制为5,将小数点精度设置为2\",\"小数点和小数部分也算入宽度计算。如，对11.345设置了%7.2f后,结果是： 11.35。2个空格补足宽度,小数部分限制2位精度后,四舍五入为.35\",\"num1 = 11 num2 = 11.345 print(\\\"数字11宽度限制5,结果是:%5d\\\"% num1) print(\\\"数字11宽度限制1,结果是:%1d\\\"% num1) print(\\\"数字11.345宽度限制7,小数精度2,结果是:%7.2f\\\"% num2) print(\\\"数字11.345不限制,小数精度2,结果是:%.2f\\\"% num2) name =\\\"程序猿\\\" set_up_year = 2006 stock_price = 19.99 # f: format print(f\\\"我是{name},我成立于:{set_up_year}年,我今天的股价是:{stock_price}\\\") name=\\\"cheng\\\" stock_price=100 stock_code= \\\"003032\\\" stock_growth=1.2 growth_day=7 finally_stock_price=stock_price*stock_growth**growth_day print(f\\\"公司{name},股票代码{stock_code}，当前股价{stock_price}，每日增长系数{stock_growth},经过{growth_day},股价达到{finally_stock_price}\\\")\",\"age=input(\\\"请输入你的年龄\\\") print(\\\"你的年龄是%s\\\" % age) # input语句会将所有输入的数据当成字符串，如果需要自行转换类型 # age=input(\\\"请输入你的年龄\\\") print(\\\"你的年龄是%s\\\" % age) age=int(age) if age < 18 : print(\\\"未成年\\\") else: print(\\\"成年\\\") # tall=int(input(\\\"请输入你的身高\\\")) vip=int(input(\\\"请输入你的VIP等级\\\")) if tall<120: print(\\\"你可以不买票\\\") elif vip>3: print(\\\"您快去\\\") else: print(\\\"去买票\\\") # 1-10内的随机数 num=random.randint(1,10) print(num) # while循环 i=0 while i<10: print(\\\"第%s次循环\\\" % i) i+=1 # 99乘法表 i=0 while i<=9: j=1 while j<=i: print(f\\\"{j} * {i} = {j*i}\\\\t\\\",end=\\\" \\\") j+=1 i+=1 print() #for循环 name=\\\"Flipped1001\\\" for i in name: print(i,end=\\\"\\\") const=0 name=\\\"itheima is a brand of itcast\\\" for i in name: if i == 'a' : const=const+1 print(const) # range(num1,num2,step):获取一个从num1到num2步长为step的数字序列(不会包含num2) for i in range(1,18,2) print(i) num=101 count=0 for i in range(1,num): if i %2 ==0: count+=1 print(f\\\"在0到{num-1}内有{count}个偶数\\\") # 使用for循环99乘法表 for i in range(1,10): for j in range(1,i+1): print(f\\\"{j} * {i} = {j*i}\\\\t\\\",end=\\\" \\\") print() # continue 跳过本次循环 # 直接结束所在循环\"]},\"156\":{\"h\":\"文件操作\",\"t\":[\"\\\"\\\"\\\" open(name,model,encoding) name: 文件名 model: 设置打开文件的模式：r 只读 w 写入 （原来的数据删除,不存在就创建） a 追加（在原有的内容该后面追加，不存在就创建） encoding:编码格式（一般推荐UTF-8） \\\"\\\"\\\" f = open(\\\"文件名\\\",\\\"r\\\",encoding=\\\"utf-8\\\") # read()参入参数表示传入多少字节，不传参表示默认读取全部 f.read(10) # 多次调用read，第二个read将会从第一个read后面继续查询（因为有一个指针） f.read() # 读取文件的全部行，封装到列表中，在执行的时候要把上面的读取注释掉，不然在完全读取之后，指针到了最后，在查就没有数据了 lines=f.readlines() # 一次读取一行 f.readline() # 用for循环读取每一行 for line in f: print(line) # 关闭 f.close() # with open可以在执行之后自动对调用文件进行一个关闭 with open(\\\"文件名\\\",\\\"r\\\",encoding=\\\"utf-8\\\") as f: for line in f: print(line) f = open(\\\"文件名\\\",\\\"w\\\",encoding=\\\"utf-8\\\") # 写入数据 f.write(\\\"hello world\\\") # flush刷新，把数据刷到硬盘里 f.flush() # close (内置了flush函数) f.close() # 追加写入,在已有文件后面追加写 f = open(\\\"文件名\\\",\\\"a\\\",encoding=\\\"utf-8\\\") f.write(\\\"hello world\\\") f.close()\"]},\"157\":{\"h\":\"集合\",\"t\":[\"# 集合Set 自带去重操作 \\\"\\\"\\\" 1.可以容纳多个数据 2.可以容纳不同类型的数据 (混装) 3.数据是无序存储的 (不支持下标索引) 4.不允许重复数据存在(自带去重) 5.可以修改 (增加或删除元素等) 6.支持for循环 \\\"\\\"\\\" # 集合的定义 my_set = {1, 2, 2, 3, 4, 5, 6} {1, 2, 3, 4, 5, 6} setn = set() # 添加新元素 my_set.add(\\\"sha\\\") print(my_set) # 移除元素remove my_set.remove(2) print(my_set) # 随机提取出元素 value=my_set.pop() print(value) # 清空集合 my_set.clear() # 提取两个集合的差集(集合1有集合2没有的元素) set1={1,2,3} set2={4,5,6} set3=set1.difference(set2) print(set3) # 消除两个集合的差集(在集合1里面删除与集合2相同的元素,集合2不变化) set1={1,2,3,5} set2={4,5,6} set1.difference_update(set2) print(set1) # 合并两个集合 set3=set1.union(set2) print(set3) # 集合的长度len l= len(set1) print(l) # 遍历集合，不支持下标索引，只能用for遍历 set1={1,2,3,4,5,6} for i in set1: print(i)\"]},\"158\":{\"h\":\"HTTP\"},\"159\":{\"h\":\"HTTP基本概念\"},\"160\":{\"h\":\"HTTP是什么？\"},\"161\":{\"h\":\"HTTP常见的状态码：\"},\"162\":{\"h\":\"HTTP常见字段有哪些：\"},\"163\":{\"h\":\"GET与POST请求:\"},\"164\":{\"h\":\"GET与POST的区别:\"},\"165\":{\"h\":\"GET和POST的方法都是安全和幂等的吗？\"},\"166\":{\"h\":\"HTTP缓存技术\"},\"167\":{\"h\":\"强缓存：\"},\"168\":{\"h\":\"协商缓存：\"},\"169\":{\"h\":\"HTTP特性：\"},\"170\":{\"h\":\"HTTP的更迭\"},\"171\":{\"h\":\"1.如何避免发送HTTP请求\"},\"172\":{\"h\":\"2.如何减少HTTP请求次数\"},\"173\":{\"h\":\"3.如何减少HTTP响应的数据大小？\"},\"174\":{\"h\":\"1.HTTP的性能问题\"},\"175\":{\"h\":\"2.兼容HTTP1.1\"},\"176\":{\"h\":\"3.头部压缩\"},\"177\":{\"h\":\"静态表编码\"},\"178\":{\"h\":\"动态编码表\"},\"179\":{\"h\":\"4.二进制帧\"},\"180\":{\"h\":\"5.并发传输\"},\"181\":{\"h\":\"6.服务器主动推送资源\"},\"182\":{\"h\":\"1.HTTP2的问题\"},\"183\":{\"h\":\"1.队头阻塞：\"},\"184\":{\"h\":\"2.TCP与TLS的握手延迟\"},\"185\":{\"h\":\"3.网络迁移需要重新连接\"},\"186\":{\"h\":\"2.QUIC协议的特点\"},\"187\":{\"h\":\"1.无队头阻塞\"},\"188\":{\"h\":\"2.更快连接建立\"},\"189\":{\"h\":\"3.连接迁移\"},\"190\":{\"h\":\"3.HTTP3协议\"},\"191\":{\"h\":\"HTTPS如何优化\"},\"192\":{\"h\":\"1.分析性能损耗\"},\"193\":{\"h\":\"硬件优化\"},\"194\":{\"h\":\"软件优化\"},\"195\":{\"h\":\"证书优化\"},\"196\":{\"h\":\"会话复用\"},\"197\":{\"h\":\"\"},\"198\":{\"h\":\"HTTP和HTTPS的区别\"},\"199\":{\"h\":\"HTTP和HTTPS：\"},\"200\":{\"h\":\"1.HTTP和HTTPS的区别：\"},\"201\":{\"h\":\"2.HTTPS解决了HTTP的那些问题?\"},\"202\":{\"h\":\"如何解决的?\"},\"203\":{\"h\":\"3.HTTPS是如何建立连接的,期间交互了什么?\"},\"204\":{\"h\":\"4.HTTPS的应用数据时如保证完整性的\"},\"205\":{\"h\":\"应用层的协议\"},\"206\":{\"h\":\"TCP 是有三个特点， 、 、基于 。\"},\"207\":{\"h\":\"1.HTTP和RPC的区别\"},\"208\":{\"h\":\"2.WebSocket是什么\"},\"209\":{\"h\":\"IP协议的相关技术\"},\"210\":{\"h\":\"APR:\"},\"211\":{\"h\":\"DHCP:\"},\"212\":{\"h\":\"NAT:\"},\"213\":{\"h\":\"ICMP:\"},\"214\":{\"h\":\"ping的工作原理\"},\"215\":{\"h\":\"ping的工作原理\"},\"216\":{\"h\":\"查询报文类型\"},\"217\":{\"h\":\"traceroute :\"},\"218\":{\"h\":\"断网了还能ping通127.0.0.1吗？\"},\"219\":{\"h\":\"什么是127.0.0.1\"},\"220\":{\"h\":\"TCP和Ping数据的区别：\"},\"221\":{\"h\":\"为什么断网了还能ping通127.0.0.1？\"},\"222\":{\"h\":\"127.0.0.1和localhost和0.0.00有什么区别？\"},\"223\":{\"h\":\"基础IP\"},\"224\":{\"h\":\"IP基本认识\"},\"225\":{\"h\":\"IP的基础知识\"},\"226\":{\"h\":\"IP的分类：\"},\"227\":{\"h\":\"什么是A，B，C类？\"},\"228\":{\"h\":\"什么是D类，E类？\"},\"229\":{\"h\":\"无分类地址CIDR\"},\"230\":{\"h\":\"公有 IP 地址与私有 IP 地址\"},\"231\":{\"h\":\"IP 地址与路由控制\"},\"232\":{\"h\":\"IP分片与重组\"},\"233\":{\"h\":\"IPv6 基本认识\"},\"234\":{\"h\":\"IPv6的首部改进：\"},\"235\":{\"h\":\"CLOSE_WAIT和TIME_WAIT\"},\"236\":{\"h\":\"为什么 TIME_WAIT 等待的时间是 2MSL？\"},\"237\":{\"h\":\"为什么需要 TIME_WAIT 状态？\"},\"238\":{\"h\":\"TIME_WAIT 过多有什么危害？\"},\"239\":{\"h\":\"如何优化 TIME_WAIT？\"},\"240\":{\"h\":\"服务器出现大量 TIME_WAIT 状态的原因有哪些？\"},\"241\":{\"h\":\"服务器出现大量 CLOSE_WAIT 状态的原因有哪些？\"},\"242\":{\"h\":\"SYN延时和泛洪攻击\"},\"243\":{\"h\":\"什么是SYN攻击，如何避免SYN攻击？\"},\"244\":{\"h\":\"什么时SYN超时，如何解决SYN超时？\"},\"245\":{\"h\":\"TCP和UDP的区别\"},\"246\":{\"h\":\"UDP和TCP的区别和应用场景：\"},\"247\":{\"h\":\"TCP和UDP的区别：\"},\"248\":{\"h\":\"连接：\"},\"249\":{\"h\":\"TCP的socket编程\"},\"250\":{\"h\":\"针对TCP应该如何socket编程？\"},\"251\":{\"h\":\"listen 时候参数 backlog 的意义？\"},\"252\":{\"h\":\"accept 发生在三次握手的哪一步？\"},\"253\":{\"h\":\"客户端调用 close 了，连接是断开的流程是什么？\"},\"254\":{\"h\":\"服务端没有调用Listen,客户端请求建立连接会发生什么？\"},\"255\":{\"h\":\"没有listen可以建立TCP连接吗？\"},\"256\":{\"h\":\"没有Accpet，能建立TCP连接吗？\"},\"257\":{\"h\":\"为什么半连接队列要设计成哈希表？\"},\"258\":{\"h\":\"会有一个cookies队列吗\"},\"259\":{\"h\":\"cookies方案为什么不直接取代半连接队列？\"},\"260\":{\"h\":\"TCP和UDP可以同时绑定相同的端口吗？\"},\"261\":{\"h\":\"1.TCP和UDP可以同时绑定相同的端口吗？\"},\"262\":{\"h\":\"2.\"},\"263\":{\"h\":\"\"},\"264\":{\"h\":\"4.重启 TCP 服务进程时，如何避免“Address in use”的报错信息？\"},\"265\":{\"h\":\"\"},\"266\":{\"h\":\"\"},\"267\":{\"h\":\"7.客户端 TCP 连接 TIME_WAIT 状态过多，会导致端口资源耗尽而无法建立新的连接吗？\"},\"268\":{\"h\":\"TCP的优化\"},\"269\":{\"h\":\"如何优化TCP？\"},\"270\":{\"h\":\"TCP三次握手的性能提升？\"},\"271\":{\"h\":\"TCP四次挥手性能的提升？\"},\"272\":{\"h\":\"TCP传输数据的性能提升？\"},\"273\":{\"h\":\"TCP的基本认识\"},\"274\":{\"h\":\"TCP基本认识\"},\"275\":{\"h\":\"TCP的头格式：\"},\"276\":{\"h\":\"TCP工作在那一层：\"},\"277\":{\"h\":\"什么是TCP协议：\"},\"278\":{\"h\":\"什么是TCP连接:\"},\"279\":{\"h\":\"如何确定一个TCP连接：\"},\"280\":{\"h\":\"如何理解TCP是基于字节流的协议？\"},\"281\":{\"h\":\"先来说说为什么 UDP 是面向报文的协议？\"},\"282\":{\"h\":\"再来说说为什么 TCP 是面向字节流的协议？\"},\"283\":{\"h\":\"TCP半连接队列和全连接队列\"},\"284\":{\"h\":\"SYN报文在什么情况下会被丢弃？\"},\"285\":{\"h\":\"拔掉网线之后，TCP连接会消失吗？\"},\"286\":{\"h\":\"\"},\"287\":{\"h\":\"用了TCP传输数据就一定不会丢包吗？\"},\"288\":{\"h\":\"TCP的拥塞控制\"},\"289\":{\"h\":\"拥塞控制：\"},\"290\":{\"h\":\"慢启动\"},\"291\":{\"h\":\"拥塞避免\"},\"292\":{\"h\":\"拥塞发生\"},\"293\":{\"h\":\"快速恢复\"},\"294\":{\"h\":\"TCP的流量控制\"},\"295\":{\"h\":\"滑动窗口\"},\"296\":{\"h\":\"窗口大小由哪一方决定？\"},\"297\":{\"h\":\"发送方的滑动窗口：\"},\"298\":{\"h\":\"程序如何表示发送方的四个部分呢？\"},\"299\":{\"h\":\"接收方的滑动窗口：\"},\"300\":{\"h\":\"接收窗口和发送窗口的大小是相等的吗？\"},\"301\":{\"h\":\"流量控制\"},\"302\":{\"h\":\"操作系统缓冲区和滑动窗口的关系：\"},\"303\":{\"h\":\"窗口关闭\"},\"304\":{\"h\":\"糊涂窗口综合征\"},\"305\":{\"h\":\"TCP的重传机制\"},\"306\":{\"h\":\"TCP的重传机制\"},\"307\":{\"h\":\"1.超时重传\"},\"308\":{\"h\":\"2.快速重传\"},\"309\":{\"h\":\"3.SACK方法\"},\"310\":{\"h\":\"4.Duplicate SACK\"},\"311\":{\"h\":\"TCP连接的建立\"},\"312\":{\"h\":\"TCP连接的建立：\"},\"313\":{\"h\":\"为什么是三次握手：\"},\"314\":{\"h\":\"为什么每次建立TCP链接的时候，初始化序列号的都要求不一样？\"},\"315\":{\"h\":\"初始序列号ISN是如何随机产生的？\"},\"316\":{\"h\":\"既然IP层会分片，为什么TCP层还需要MSS？\"},\"317\":{\"h\":\"当第一次握手丢失：\"},\"318\":{\"h\":\"第二次握手丢失：\"},\"319\":{\"h\":\"第三次握手丢失：\"},\"320\":{\"h\":\"为什么每次建立TCP连接，初始化序列号都要不一样？\"},\"321\":{\"h\":\"TCP 序列号和确认号是如何变化的？\"},\"322\":{\"h\":\"万能公式\"},\"323\":{\"h\":\"已建立的TCP连接，收到SYN会发生什么？\"},\"324\":{\"h\":\"killcx 的工具\"},\"325\":{\"h\":\"tcpkill 的工具\"},\"326\":{\"h\":\"\"},\"327\":{\"h\":\"TCP连接的断开\"},\"328\":{\"h\":\"TCP断开连接\"},\"329\":{\"h\":\"TCP的四次挥手：\"},\"330\":{\"h\":\"第一次挥手丢失：\"},\"331\":{\"h\":\"第二次挥手丢失：\"},\"332\":{\"h\":\"第三次挥手丢失：\"},\"333\":{\"h\":\"第四次挥手丢失\"},\"334\":{\"h\":\"TCP四次挥手可以变成三次吗？\"},\"335\":{\"h\":\"粗暴关闭VS优雅关闭：\"},\"336\":{\"h\":\"什么情况下会出现三次挥手？\"},\"337\":{\"h\":\"四次挥手中收到乱序的FIN包怎么办\"},\"338\":{\"h\":\"在TIME_WAIT状态的TCP接收到SYN报文会怎么样？\"},\"339\":{\"h\":\"SYN合法：\"},\"340\":{\"h\":\"SYN非法：\"},\"341\":{\"h\":\"在 TIME_WAIT 状态，收到 RST 会断开连接吗？\"},\"342\":{\"h\":\"如果已经建立了链接，客户端突然挂怎么办\"},\"343\":{\"h\":\"如果已经建立了链接，服务端突然挂怎么办\"},\"344\":{\"h\":\"TCP连接，一端断电和进程崩溃有什么区别？\"},\"345\":{\"h\":\"客户端主机宕机又重启？\"},\"346\":{\"h\":\"QUIC协议\"},\"347\":{\"h\":\"\"},\"348\":{\"h\":\"QUIC是如何实现可靠传输的？\"},\"349\":{\"h\":\"Packet Header\"},\"350\":{\"h\":\"QUIC Frame Header\"},\"351\":{\"h\":\"QUIC 是如何解决 TCP 队头阻塞问题的？\"},\"352\":{\"h\":\"QUIC 是如何做流量控制的？\"},\"353\":{\"h\":\"QUIC 对拥塞控制改进\"},\"354\":{\"h\":\"QUIC 更快的连接建立\"},\"355\":{\"h\":\"QUIC 是如何迁移连接的？\"},\"356\":{\"h\":\"常见的网络分层模型\"},\"357\":{\"h\":\"网络模型：\"},\"358\":{\"h\":\"基础计网\"},\"359\":{\"h\":\"应用层：\"},\"360\":{\"h\":\"用户态和内核态：\"},\"361\":{\"h\":\"传输层：（作为传输媒介）\"},\"362\":{\"h\":\"网络层:(有着实际的传输功能)\"},\"363\":{\"h\":\"IP协议的寻址作用：\"},\"364\":{\"h\":\"IP协议还可以\"},\"365\":{\"h\":\"网络接口层：\"},\"366\":{\"h\":\"键入一个URL网络世界发生了什么？\"},\"367\":{\"h\":\"1.浏览器第一步工作是解析ULR，然后生产HTTP请求消息，然后会\"},\"368\":{\"h\":\"2.在发送之前， ，在委托操作系统发送消息时必须提供\"},\"369\":{\"h\":\"DNS服务器:专门保存了 服务器域名与 的对应关系\"},\"370\":{\"h\":\"只指路不带路\"},\"371\":{\"h\":\"3.通过DNS获取到IP后，把传输工作给操作系统中的协议栈\"},\"372\":{\"h\":\"4.http协议是基于TCP协议传输的\"},\"373\":{\"h\":\"1.第一次握手\"},\"374\":{\"h\":\"2.第二次握手\"},\"375\":{\"h\":\"3.第三次握手\"},\"376\":{\"h\":\"完整的TCP报文：\"},\"377\":{\"h\":\"4.IP\"},\"378\":{\"h\":\"5.MAC\"},\"379\":{\"h\":\"5.网卡（真正的数据发送）\"},\"380\":{\"h\":\"6.交换机\"},\"381\":{\"h\":\"7.路由器\"},\"382\":{\"h\":\"8.客户端&服务器\"},\"383\":{\"h\":\"\",\"t\":[\"404 Not Found\"]},\"384\":{\"h\":\"Work\"},\"385\":{\"h\":\"一问一答\"},\"386\":{\"h\":\"My SQL\"},\"387\":{\"h\":\"计算机操作系统\"},\"388\":{\"h\":\"Go基础\"},\"389\":{\"h\":\"Python基础\"},\"390\":{\"h\":\"HTTP\"},\"391\":{\"h\":\"计算机网络\"},\"392\":{\"h\":\"IP\"},\"393\":{\"h\":\"TCP\"},\"394\":{\"h\":\"计算机网络基础\"}},\"dirtCount\":0,\"index\":[[\"路由器\",{\"0\":{\"381\":1}}],[\"交换机\",{\"0\":{\"380\":1}}],[\"真正的数据发送\",{\"0\":{\"379\":1}}],[\"完整的tcp报文\",{\"0\":{\"376\":1}}],[\"完全公平调度\",{\"0\":{\"94\":1}}],[\"专门保存了\",{\"0\":{\"369\":1}}],[\"浏览器第一步工作是解析ulr\",{\"0\":{\"367\":1}}],[\"键入一个url网络世界发生了什么\",{\"0\":{\"366\":1}}],[\"键值对的key和value可以是任意类型\",{\"1\":{\"152\":1}}],[\"作为传输媒介\",{\"0\":{\"361\":1}}],[\"传输层\",{\"0\":{\"361\":1}}],[\"常见的网络分层模型\",{\"0\":{\"356\":1}}],[\"常遇春\",{\"1\":{\"81\":1}}],[\"quic\",{\"0\":{\"350\":1,\"351\":1,\"352\":1,\"353\":1,\"354\":1,\"355\":1}}],[\"quic是如何实现可靠传输的\",{\"0\":{\"348\":1}}],[\"quic协议\",{\"0\":{\"346\":1}}],[\"quic协议的特点\",{\"0\":{\"186\":1}}],[\"收到\",{\"0\":{\"341\":1}}],[\"收到syn会发生什么\",{\"0\":{\"323\":1}}],[\"粗暴关闭vs优雅关闭\",{\"0\":{\"335\":1}}],[\"已建立的tcp连接\",{\"0\":{\"323\":1}}],[\"已建立连接或者正在建立连接的两方\",{\"1\":{\"45\":2}}],[\"万能公式\",{\"0\":{\"322\":1}}],[\"既然ip层会分片\",{\"0\":{\"316\":1}}],[\"初始化序列号都要不一样\",{\"0\":{\"320\":1}}],[\"初始化序列号的都要求不一样\",{\"0\":{\"314\":1}}],[\"初始序列号isn是如何随机产生的\",{\"0\":{\"315\":1}}],[\"初始序列号\",{\"1\":{\"52\":1}}],[\"糊涂窗口综合征\",{\"0\":{\"304\":1}}],[\"操作系统缓冲区和滑动窗口的关系\",{\"0\":{\"302\":1}}],[\"流量控制\",{\"0\":{\"301\":1}}],[\"流程函数\",{\"0\":{\"78\":1}}],[\"窗口关闭\",{\"0\":{\"303\":1}}],[\"窗口大小由哪一方决定\",{\"0\":{\"296\":1}}],[\"窗口函数通常搭配over\",{\"1\":{\"26\":1}}],[\"拔掉网线之后\",{\"0\":{\"285\":1}}],[\"再来说说为什么\",{\"0\":{\"282\":1}}],[\"再按照入职时间进行降序排序\",{\"1\":{\"71\":1}}],[\"先来说说为什么\",{\"0\":{\"281\":1}}],[\"先进先出\",{\"1\":{\"28\":1}}],[\"能建立tcp连接吗\",{\"0\":{\"256\":1}}],[\"能被正确的关闭\",{\"1\":{\"60\":1}}],[\"没有accpet\",{\"0\":{\"256\":1}}],[\"没有listen可以建立tcp连接吗\",{\"0\":{\"255\":1}}],[\"了\",{\"0\":{\"253\":1}}],[\"针对tcp应该如何socket编程\",{\"0\":{\"250\":1}}],[\"连接是断开的流程是什么\",{\"0\":{\"253\":1}}],[\"连接\",{\"0\":{\"248\":1,\"267\":1}}],[\"连接迁移\",{\"0\":{\"189\":1}}],[\"什么情况下会出现三次挥手\",{\"0\":{\"336\":1}}],[\"什么时syn超时\",{\"0\":{\"244\":1}}],[\"什么是tcp连接\",{\"0\":{\"278\":1}}],[\"什么是tcp协议\",{\"0\":{\"277\":1}}],[\"什么是syn攻击\",{\"0\":{\"243\":1}}],[\"什么是d类\",{\"0\":{\"228\":1}}],[\"什么是a\",{\"0\":{\"227\":1}}],[\"什么是127\",{\"0\":{\"219\":1}}],[\"什么是中断\",{\"0\":{\"104\":1}}],[\"什么是restful风格\",{\"0\":{\"62\":1}}],[\"什么是oauth2\",{\"0\":{\"34\":1}}],[\"过多有什么危害\",{\"0\":{\"238\":1}}],[\"过滤分组后的记录\",{\"1\":{\"70\":1}}],[\"过滤符合条件的记录\",{\"1\":{\"70\":1}}],[\"地址与路由控制\",{\"0\":{\"231\":1}}],[\"地址与私有\",{\"0\":{\"230\":1}}],[\"地址\",{\"0\":{\"230\":1}}],[\"公有\",{\"0\":{\"230\":1}}],[\"公司\",{\"1\":{\"155\":1}}],[\"断网了还能ping通127\",{\"0\":{\"218\":1}}],[\"应用层\",{\"0\":{\"359\":1}}],[\"应用层的协议\",{\"0\":{\"205\":1}}],[\"应该使用\",{\"1\":{\"68\":1}}],[\"应该怎么处理\",{\"0\":{\"37\":1}}],[\"期间交互了什么\",{\"0\":{\"203\":1}}],[\"软件优化\",{\"0\":{\"194\":1}}],[\"软中断\",{\"0\":{\"106\":1}}],[\"硬件优化\",{\"0\":{\"193\":1}}],[\"更快的连接建立\",{\"0\":{\"354\":1}}],[\"更快连接建立\",{\"0\":{\"188\":1}}],[\"更新元素\",{\"1\":{\"152\":1}}],[\"更新外键在子表中的记录\",{\"1\":{\"81\":1}}],[\"更新对应记录时\",{\"1\":{\"81\":3}}],[\"更新\",{\"1\":{\"81\":3}}],[\"网卡\",{\"0\":{\"379\":1}}],[\"网络接口层\",{\"0\":{\"365\":1}}],[\"网络层\",{\"0\":{\"362\":1}}],[\"网络模型\",{\"0\":{\"357\":1}}],[\"网络迁移需要重新连接\",{\"0\":{\"185\":1}}],[\"网页请求\",{\"1\":{\"42\":1}}],[\"队头阻塞问题的\",{\"0\":{\"351\":1}}],[\"队头阻塞\",{\"0\":{\"183\":1}}],[\"二进制帧\",{\"0\":{\"179\":1}}],[\"二线城市\",{\"1\":{\"78\":2}}],[\"动态编码表\",{\"0\":{\"178\":1}}],[\"静态表编码\",{\"0\":{\"177\":1}}],[\"头部压缩\",{\"0\":{\"176\":1}}],[\"兼容http1\",{\"0\":{\"175\":1}}],[\"协商缓存\",{\"0\":{\"168\":1}}],[\"协议\",{\"0\":{\"103\":1},\"1\":{\"62\":1}}],[\"强缓存\",{\"0\":{\"167\":1}}],[\"强调了资源的标识\",{\"1\":{\"62\":1}}],[\"合并两个集合\",{\"1\":{\"157\":1}}],[\"消除两个集合的差集\",{\"1\":{\"157\":1}}],[\"提取两个集合的差集\",{\"1\":{\"157\":1}}],[\"提供一种快速\",{\"1\":{\"42\":1}}],[\"提供一种可靠的数据传输\",{\"1\":{\"42\":1}}],[\"提供一种可靠的数据传输和通信方式\",{\"1\":{\"42\":1}}],[\"随机提取出元素\",{\"1\":{\"157\":1}}],[\"移除元素remove\",{\"1\":{\"157\":1}}],[\"添加新元素\",{\"1\":{\"157\":1}}],[\"添加外键\",{\"1\":{\"81\":2}}],[\"混装\",{\"1\":{\"157\":1}}],[\"自带去重\",{\"1\":{\"157\":1}}],[\"自带去重操作\",{\"1\":{\"157\":1}}],[\"自定义消息结构\",{\"1\":{\"47\":1}}],[\"关闭\",{\"1\":{\"156\":1}}],[\"关键字lambda\",{\"1\":{\"151\":1}}],[\"关键字不定长\",{\"1\":{\"151\":1}}],[\"关键字\",{\"1\":{\"80\":1}}],[\"封装到列表中\",{\"1\":{\"156\":1}}],[\"读取文件的全部行\",{\"1\":{\"156\":1}}],[\"因为有一个指针\",{\"1\":{\"156\":1}}],[\"因为它不需要执行额外的步骤来消除重复的行\",{\"1\":{\"23\":1}}],[\"编码格式\",{\"1\":{\"156\":1}}],[\"编程语言\",{\"0\":{\"4\":1}}],[\"原来的数据删除\",{\"1\":{\"156\":1}}],[\"原因是该\",{\"1\":{\"49\":1}}],[\"文件名\",{\"1\":{\"156\":5}}],[\"文件操作\",{\"0\":{\"156\":1}}],[\"文章浏览i\",{\"1\":{\"16\":1}}],[\"股价达到\",{\"1\":{\"155\":1}}],[\"股票代码\",{\"1\":{\"155\":1}}],[\"经过\",{\"1\":{\"155\":1}}],[\"年\",{\"1\":{\"155\":1}}],[\"年龄\",{\"1\":{\"80\":1,\"81\":1}}],[\"年龄相同按入职时间升序排序\",{\"1\":{\"71\":1}}],[\"年龄小于60岁的\",{\"1\":{\"71\":1}}],[\"我今天的股价是\",{\"1\":{\"155\":1}}],[\"我成立于\",{\"1\":{\"155\":1}}],[\"我是\",{\"1\":{\"155\":1}}],[\"我们可以使用辅助符号\",{\"1\":{\"155\":1}}],[\"我们可以自定义一个消息结构\",{\"1\":{\"47\":1}}],[\"四舍五入为\",{\"1\":{\"155\":1}}],[\"四次挥手中收到乱序的fin包怎么办\",{\"0\":{\"337\":1}}],[\"四次挥手\",{\"0\":{\"55\":1}}],[\"宽度\",{\"1\":{\"155\":1}}],[\"很少使用\",{\"1\":{\"155\":1}}],[\"控制小数点精度\",{\"1\":{\"155\":1}}],[\"控制宽度\",{\"1\":{\"155\":1}}],[\"控制数据库的访问权限\",{\"1\":{\"64\":1}}],[\"来控制数据的宽度和精度\",{\"1\":{\"155\":1}}],[\"来合并三个查询的结果\",{\"1\":{\"23\":1}}],[\"解除引号的效用\",{\"1\":{\"155\":1}}],[\"解决方法\",{\"1\":{\"47\":1}}],[\"包含单引号\",{\"1\":{\"155\":1}}],[\"包含双引号\",{\"1\":{\"155\":1}}],[\"包括重复的行\",{\"1\":{\"23\":1}}],[\"包括\",{\"1\":{\"18\":1}}],[\"三引号定义法\",{\"1\":{\"155\":1}}],[\"三次握手的目的是确认双方都有发送和接受的能力\",{\"1\":{\"54\":1}}],[\"三次握手\",{\"0\":{\"51\":1}}],[\"双引号定义法\",{\"1\":{\"155\":1}}],[\"双方协商缓冲区大小\",{\"1\":{\"48\":1}}],[\"黑马程序员\",{\"1\":{\"155\":6}}],[\"单引号定义法\",{\"1\":{\"155\":1}}],[\"算术\",{\"1\":{\"155\":1}}],[\"指针到了最后\",{\"1\":{\"156\":1}}],[\"指数\",{\"1\":{\"155\":1}}],[\"指令缓存\",{\"0\":{\"86\":1}}],[\"取整除\",{\"1\":{\"155\":1}}],[\"取余\",{\"1\":{\"76\":1,\"155\":1}}],[\"得到负数或是一个数减去另一个数a\",{\"1\":{\"155\":1}}],[\"两个数相乘或是返回一个被重复若干次的字符串a\",{\"1\":{\"155\":1}}],[\"两个对象相加a+b\",{\"1\":{\"155\":1}}],[\"两次\",{\"0\":{\"61\":1}}],[\"实例\",{\"1\":{\"155\":1}}],[\"运算符\",{\"1\":{\"155\":2}}],[\"运行队列\",{\"0\":{\"95\":1}}],[\"大小写敏感\",{\"1\":{\"155\":1}}],[\"大于等于\",{\"1\":{\"70\":1}}],[\"大于\",{\"1\":{\"70\":1}}],[\"下划线\",{\"1\":{\"155\":1}}],[\"下标1的元素提取出来并返回\",{\"1\":{\"148\":1}}],[\"英文\",{\"1\":{\"155\":1}}],[\"英语\",{\"1\":{\"78\":1}}],[\"只指路不带路\",{\"0\":{\"370\":1}}],[\"只能用for遍历\",{\"1\":{\"157\":1}}],[\"只读\",{\"1\":{\"156\":1}}],[\"只允许出现\",{\"1\":{\"155\":1}}],[\"只有双引号里都是数字才可以转为int类型\",{\"1\":{\"155\":1}}],[\"查看数据的类型\",{\"1\":{\"155\":1}}],[\"查询报文类型\",{\"0\":{\"216\":1}}],[\"查询2在list中下标\",{\"1\":{\"148\":1}}],[\"查询emp\",{\"1\":{\"78\":1}}],[\"查询所有员工入职天数\",{\"1\":{\"77\":1}}],[\"查询所有年龄小于等于35岁员工的姓名和年龄\",{\"1\":{\"71\":1}}],[\"查询性别为男\",{\"1\":{\"71\":2}}],[\"查询年龄为20\",{\"1\":{\"71\":1}}],[\"查询年龄小于45\",{\"1\":{\"71\":1}}],[\"查询页码\",{\"1\":{\"71\":1}}],[\"查询第二页数据\",{\"1\":{\"71\":1}}],[\"查询第一页数据\",{\"1\":{\"71\":1}}],[\"查询第一个大于等于target+1的索引\",{\"1\":{\"25\":1}}],[\"查询记录数\",{\"1\":{\"71\":1}}],[\"查询其他字段无任何意义\",{\"1\":{\"71\":1}}],[\"查询的字段一般为聚合函数和分组字段\",{\"1\":{\"71\":1}}],[\"查询两个字的姓名\",{\"1\":{\"70\":1}}],[\"查询多个字段\",{\"1\":{\"70\":1}}],[\"查询权限\",{\"1\":{\"64\":1}}],[\"查询数据\",{\"1\":{\"64\":1}}],[\"查询用户\",{\"1\":{\"64\":1}}],[\"布尔\",{\"1\":{\"155\":1}}],[\"复合运算符\",{\"1\":{\"155\":1}}],[\"复数\",{\"1\":{\"155\":1}}],[\"复制select\",{\"1\":{\"22\":1}}],[\"浮点数\",{\"1\":{\"155\":1}}],[\"整数\",{\"1\":{\"155\":2}}],[\"到尾结束\",{\"1\":{\"154\":1}}],[\"到结束\",{\"1\":{\"154\":1}}],[\"到最后结束\",{\"1\":{\"154\":3}}],[\"起始和结束不写表示从头到尾\",{\"1\":{\"154\":1}}],[\"起始索引可以省略\",{\"1\":{\"71\":1}}],[\"起始索引=\",{\"1\":{\"71\":1}}],[\"起始索引从0开始\",{\"1\":{\"71\":1}}],[\"起始索引\",{\"1\":{\"71\":1}}],[\"步长\",{\"1\":{\"154\":3}}],[\"步长2\",{\"1\":{\"154\":1}}],[\"步长为1可以省略\",{\"1\":{\"154\":1}}],[\"步长默认是1\",{\"1\":{\"154\":1}}],[\"步长1\",{\"1\":{\"154\":2}}],[\"序列号和确认号是如何变化的\",{\"0\":{\"321\":1}}],[\"序列的切片\",{\"0\":{\"154\":1},\"1\":{\"154\":1}}],[\"序列\",{\"1\":{\"152\":1}}],[\"序列类型\",{\"1\":{\"152\":2}}],[\"都会转为字符串\",{\"1\":{\"152\":1}}],[\"都会创建一个独立的分区\",{\"1\":{\"26\":2}}],[\"类型\",{\"1\":{\"155\":1}}],[\"类型转换\",{\"1\":{\"152\":1}}],[\"类似\",{\"1\":{\"26\":1}}],[\"集合的长度len\",{\"1\":{\"157\":1}}],[\"集合的定义\",{\"1\":{\"157\":1}}],[\"集合2不变化\",{\"1\":{\"157\":1}}],[\"集合1有集合2没有的元素\",{\"1\":{\"157\":1}}],[\"集合set\",{\"1\":{\"157\":1}}],[\"集合\",{\"0\":{\"157\":1},\"1\":{\"152\":3,\"155\":1}}],[\"列表\",{\"1\":{\"152\":3,\"155\":1}}],[\"列表的下标可以反向索引最后一个数据下标为\",{\"1\":{\"148\":1}}],[\"支持for循环\",{\"1\":{\"157\":1}}],[\"支持所有容器转为str\",{\"1\":{\"152\":1}}],[\"支持所有容器转为list\",{\"1\":{\"152\":1}}],[\"支持\",{\"1\":{\"152\":3}}],[\"跟据keys\",{\"1\":{\"152\":1}}],[\"遍历集合\",{\"1\":{\"157\":1}}],[\"遍历\",{\"1\":{\"152\":1}}],[\"清空集合\",{\"1\":{\"157\":1}}],[\"清空元素\",{\"1\":{\"152\":1}}],[\"清空列表\",{\"1\":{\"148\":1}}],[\"新增元素\",{\"1\":{\"152\":1}}],[\"新密码\",{\"1\":{\"64\":1}}],[\"张信哲\",{\"1\":{\"152\":1}}],[\"张学油\",{\"1\":{\"152\":1}}],[\"张无忌\",{\"1\":{\"81\":1}}],[\"林俊节\",{\"1\":{\"152\":1}}],[\"周杰轮\",{\"1\":{\"152\":3}}],[\"周小阶\",{\"1\":{\"152\":1}}],[\"高\",{\"1\":{\"152\":1}}],[\"王力宏\",{\"1\":{\"152\":3}}],[\"参入参数表示传入多少字节\",{\"1\":{\"156\":1}}],[\"参入参数\",{\"1\":{\"151\":1}}],[\"参数以字典的形式存在\",{\"1\":{\"151\":1}}],[\"参数必须是kv形式的\",{\"1\":{\"151\":1}}],[\"参数必须是一个常量或一个变量\",{\"1\":{\"18\":1}}],[\"参数形成一个元组\",{\"1\":{\"151\":1}}],[\"匿名函数\",{\"1\":{\"151\":1}}],[\"接收窗口和发送窗口的大小是相等的吗\",{\"0\":{\"300\":1}}],[\"接收方的滑动窗口\",{\"0\":{\"299\":1}}],[\"接收放在接收完数据之后将其放到缓冲区\",{\"1\":{\"48\":1}}],[\"接受不定长的数据\",{\"1\":{\"151\":1}}],[\"位置不定长\",{\"1\":{\"151\":1}}],[\"正\",{\"1\":{\"151\":1}}],[\"正向索引\",{\"1\":{\"148\":1}}],[\"枫枫\",{\"1\":{\"151\":1}}],[\"沃尔玛购物袋\",{\"1\":{\"151\":1}}],[\"必须是设置在最后\",{\"1\":{\"151\":1}}],[\"天天\",{\"1\":{\"151\":1}}],[\"萧峰\",{\"1\":{\"151\":1}}],[\"女\",{\"1\":{\"151\":2}}],[\"形参\",{\"1\":{\"151\":1}}],[\"方便后续应用\",{\"1\":{\"151\":1}}],[\"元素为key没有保留value\",{\"1\":{\"152\":1}}],[\"元素甚至可以是列表\",{\"1\":{\"148\":1}}],[\"元组转换时\",{\"1\":{\"152\":1}}],[\"元组不可修改\",{\"1\":{\"150\":1}}],[\"元组也可以嵌套\",{\"1\":{\"150\":1}}],[\"元组\",{\"0\":{\"150\":1},\"1\":{\"150\":1,\"152\":3,\"155\":1}}],[\"跳过本次循环\",{\"1\":{\"149\":1,\"155\":1}}],[\"您快去\",{\"1\":{\"149\":1,\"155\":1}}],[\"你可以不买票\",{\"1\":{\"149\":1,\"155\":1}}],[\"你的年龄是\",{\"1\":{\"149\":2,\"155\":2}}],[\"请输入你的vip等级\",{\"1\":{\"149\":1,\"155\":1}}],[\"请输入你的身高\",{\"1\":{\"149\":1,\"155\":1}}],[\"请输入你的年龄\",{\"1\":{\"149\":2,\"155\":2}}],[\"成年\",{\"1\":{\"149\":1,\"155\":1}}],[\"未成年\",{\"1\":{\"149\":1,\"155\":1}}],[\"追加写入\",{\"1\":{\"156\":1}}],[\"追加\",{\"1\":{\"156\":1}}],[\"追加一堆元素\",{\"1\":{\"148\":1}}],[\"追加元素\",{\"1\":{\"148\":1}}],[\"尼豪\",{\"1\":{\"148\":1}}],[\"程序如何表示发送方的四个部分呢\",{\"0\":{\"298\":1}}],[\"程序猿\",{\"1\":{\"148\":2,\"155\":1}}],[\"程序员鼓励师\",{\"1\":{\"81\":1}}],[\"反向索引\",{\"1\":{\"148\":1}}],[\"往前依次是\",{\"1\":{\"148\":1}}],[\"定义嵌套字典\",{\"1\":{\"152\":1}}],[\"定义字典\",{\"1\":{\"152\":1}}],[\"定义单个元组的时候后面必须写上\",{\"1\":{\"150\":1}}],[\"定义\",{\"1\":{\"148\":1,\"150\":1}}],[\"泛型切片\",{\"1\":{\"147\":1}}],[\"泛型函数\",{\"0\":{\"147\":1}}],[\"killcx\",{\"0\":{\"324\":1}}],[\"kwargs\",{\"1\":{\"151\":2}}],[\"k\",{\"1\":{\"147\":4}}],[\"keys\",{\"1\":{\"152\":1}}],[\"key不可为字典\",{\"1\":{\"152\":1}}],[\"key\",{\"1\":{\"80\":3,\"81\":9,\"152\":4}}],[\"|\",{\"1\":{\"147\":7}}],[\"||\",{\"1\":{\"25\":3}}],[\"十进制小数与二进制的转换\",{\"0\":{\"139\":1}}],[\"理解线程\",{\"0\":{\"132\":1}}],[\"线程的优劣势\",{\"0\":{\"136\":1}}],[\"线程的优势\",{\"0\":{\"131\":1}}],[\"线程的实现方式\",{\"0\":{\"135\":1}}],[\"线程的上下文切换\",{\"0\":{\"134\":1}}],[\"线程与进程的比较\",{\"0\":{\"133\":1}}],[\"线程\",{\"0\":{\"130\":1}}],[\"存储器的层次结构\",{\"0\":{\"129\":1}}],[\"输入\",{\"0\":{\"128\":1}}],[\"输出结果0\",{\"1\":{\"155\":1}}],[\"输出结果\",{\"1\":{\"155\":4}}],[\"输出设备\",{\"0\":{\"128\":1}}],[\"输出\",{\"1\":{\"28\":1,\"155\":1}}],[\"冯诺依曼模型\",{\"0\":{\"124\":1}}],[\"内置了flush函数\",{\"1\":{\"156\":1}}],[\"内容限定\",{\"1\":{\"155\":1}}],[\"内有\",{\"1\":{\"149\":1,\"155\":1}}],[\"内核空间与用户空间的区别\",{\"0\":{\"120\":1}}],[\"内存\",{\"0\":{\"125\":1}}],[\"内存分页\",{\"0\":{\"114\":1}}],[\"内存分段\",{\"0\":{\"111\":1}}],[\"内存交换效率低\",{\"0\":{\"113\":1}}],[\"内存碎片\",{\"0\":{\"112\":1}}],[\"内存管理\",{\"0\":{\"107\":1}}],[\"段页式内存管理\",{\"0\":{\"118\":1}}],[\"问题背景\",{\"0\":{\"109\":1}}],[\"虚拟内存管理器\",{\"0\":{\"123\":1}}],[\"虚拟内存的功能\",{\"0\":{\"122\":1}}],[\"虚拟内存的作用\",{\"0\":{\"121\":1}}],[\"虚拟内存\",{\"0\":{\"108\":1}}],[\"中文\",{\"1\":{\"155\":1}}],[\"中央处理器\",{\"0\":{\"126\":1}}],[\"中断\",{\"0\":{\"105\":1}}],[\"中选择列\",{\"1\":{\"22\":1,\"23\":1}}],[\"缓存一致性问题\",{\"0\":{\"101\":1}}],[\"写入数据\",{\"1\":{\"156\":1}}],[\"写入\",{\"1\":{\"156\":1}}],[\"写法和多行注释是一样的\",{\"1\":{\"155\":1}}],[\"写回\",{\"0\":{\"100\":1}}],[\"写直达\",{\"0\":{\"99\":1}}],[\"调整优先级\",{\"0\":{\"96\":1}}],[\"调度类\",{\"0\":{\"93\":1}}],[\"避免伪共享的方法\",{\"0\":{\"91\":1}}],[\"伪共享是什么\",{\"0\":{\"90\":1}}],[\"跑得更快的代码\",{\"0\":{\"84\":1}}],[\"父表有变更时\",{\"1\":{\"81\":1}}],[\"与no\",{\"1\":{\"81\":1}}],[\"与\",{\"1\":{\"81\":1}}],[\"与rank\",{\"1\":{\"26\":1}}],[\"首先检查该记录是否有对应外键\",{\"1\":{\"81\":4}}],[\"首先双方都处于closed状态\",{\"1\":{\"52\":1}}],[\"行为\",{\"1\":{\"81\":2}}],[\"行开始\",{\"1\":{\"19\":1}}],[\"小数精度2\",{\"1\":{\"155\":2}}],[\"小数部分限制2位精度后\",{\"1\":{\"155\":1}}],[\"小数点和小数部分也算入宽度计算\",{\"1\":{\"155\":1}}],[\"小周\",{\"1\":{\"152\":2}}],[\"小明\",{\"1\":{\"151\":2}}],[\"小昭\",{\"1\":{\"81\":1}}],[\"小于等于\",{\"1\":{\"70\":1}}],[\"小于\",{\"1\":{\"70\":1}}],[\"韦一笑\",{\"1\":{\"81\":1}}],[\"开发\",{\"1\":{\"81\":3}}],[\"杨道\",{\"1\":{\"81\":1}}],[\"总线\",{\"0\":{\"127\":1}}],[\"总线嗅探\",{\"0\":{\"102\":1}}],[\"总裁\",{\"1\":{\"81\":1}}],[\"总经办\",{\"1\":{\"81\":1}}],[\"金庸\",{\"1\":{\"81\":1}}],[\"员工表\",{\"1\":{\"81\":1}}],[\"直属领导id\",{\"1\":{\"81\":1}}],[\"直接for\",{\"1\":{\"152\":1}}],[\"直接结束所在循环\",{\"1\":{\"149\":1,\"155\":1}}],[\"直接简写为limit\",{\"1\":{\"71\":1}}],[\"直接将拥塞窗口降为1\",{\"1\":{\"49\":1}}],[\"入职时间\",{\"1\":{\"81\":1}}],[\"薪资\",{\"1\":{\"81\":1}}],[\"职位\",{\"1\":{\"81\":1}}],[\"销售部\",{\"1\":{\"81\":1}}],[\"财务部\",{\"1\":{\"81\":1}}],[\"市场部\",{\"1\":{\"81\":1}}],[\"研发部\",{\"1\":{\"81\":1}}],[\"部门id\",{\"1\":{\"81\":1}}],[\"部门表\",{\"1\":{\"81\":1}}],[\"部门名称\",{\"1\":{\"81\":1}}],[\"从3开始\",{\"1\":{\"154\":1}}],[\"从头开始\",{\"1\":{\"154\":4}}],[\"从1开始\",{\"1\":{\"154\":1}}],[\"从嵌套列表中选取数据\",{\"1\":{\"148\":1}}],[\"从而保证数据的一致性和完整性\",{\"1\":{\"81\":1}}],[\"从指定的日期或时间值中减去指定的时间间隔\",{\"1\":{\"77\":2}}],[\"性别\",{\"1\":{\"80\":1}}],[\"外语\",{\"1\":{\"152\":2}}],[\"外键的\",{\"1\":{\"81\":1}}],[\"外键字段\",{\"1\":{\"81\":2}}],[\"外键字段名\",{\"1\":{\"81\":1}}],[\"外键名称\",{\"1\":{\"81\":4}}],[\"外键用来让两张表的数据之间建立连接\",{\"1\":{\"81\":1}}],[\"外键约束\",{\"0\":{\"81\":1},\"1\":{\"80\":1}}],[\"外层查询找到出最大值的剩余数中的最大值\",{\"1\":{\"18\":1}}],[\"检查约束\",{\"1\":{\"80\":1}}],[\"则也删除\",{\"1\":{\"81\":1}}],[\"则采用默认值\",{\"1\":{\"80\":1}}],[\"则返回t\",{\"1\":{\"78\":1}}],[\"则返回null\",{\"1\":{\"26\":2}}],[\"默认升序\",{\"1\":{\"152\":1}}],[\"默认约束\",{\"1\":{\"80\":1}}],[\"默认值\",{\"1\":{\"71\":1}}],[\"要求是数字\",{\"1\":{\"155\":2}}],[\"要求非空且唯一\",{\"1\":{\"80\":1}}],[\"要返回的记录数\",{\"1\":{\"20\":1}}],[\"唯一约束\",{\"1\":{\"80\":1}}],[\"限制该字段数据不能为null\",{\"1\":{\"80\":1}}],[\"描述文本的一种数据类型\",{\"1\":{\"155\":1}}],[\"描述\",{\"1\":{\"80\":1,\"155\":2}}],[\"有着实际的传输功能\",{\"0\":{\"362\":1}}],[\"有序的不可变序列\",{\"1\":{\"155\":1}}],[\"有序的可变序列\",{\"1\":{\"155\":1}}],[\"有缺陷\",{\"0\":{\"115\":1}}],[\"有效性和完整性\",{\"1\":{\"80\":1}}],[\"有两点作用\",{\"1\":{\"60\":1}}],[\"目的\",{\"1\":{\"80\":1}}],[\"目前不足5位数的全部在前面补0\",{\"1\":{\"75\":1}}],[\"概念\",{\"1\":{\"80\":1,\"81\":1}}],[\"约束是作用于表中字段上的规则\",{\"1\":{\"80\":1}}],[\"约束\",{\"0\":{\"80\":1}}],[\"及格\",{\"1\":{\"78\":1}}],[\"优秀\",{\"1\":{\"78\":1}}],[\"j+=1\",{\"1\":{\"149\":1,\"155\":1}}],[\"j\",{\"1\":{\"149\":5,\"155\":5}}],[\"j<=i\",{\"1\":{\"149\":1,\"155\":1}}],[\"j=1\",{\"1\":{\"149\":1,\"155\":1}}],[\"json\",{\"1\":{\"147\":5}}],[\"job\",{\"1\":{\"81\":2}}],[\"join\",{\"1\":{\"70\":1}}],[\"jack\",{\"1\":{\"78\":1}}],[\"学员成绩表\",{\"1\":{\"78\":1}}],[\"学习疑问\",{\"0\":{\"41\":1}}],[\"学习笔记\",{\"0\":{\"39\":1}}],[\"语文\",{\"1\":{\"78\":1,\"152\":3}}],[\"姓名\",{\"1\":{\"78\":1,\"80\":1,\"81\":1}}],[\"否则\",{\"1\":{\"78\":1}}],[\"否则返回default默认值\",{\"1\":{\"78\":2}}],[\"否则返回value2\",{\"1\":{\"78\":1}}],[\"否则返回f\",{\"1\":{\"78\":1}}],[\"展示不及格\",{\"1\":{\"78\":1}}],[\"展示及格\",{\"1\":{\"78\":1}}],[\"展示优秀\",{\"1\":{\"78\":1}}],[\"展示的规则如下\",{\"1\":{\"78\":1}}],[\"案例\",{\"1\":{\"78\":1}}],[\"其余任何内容都不被允许\",{\"1\":{\"155\":1}}],[\"其他的list\",{\"1\":{\"148\":1}}],[\"其他\",{\"1\":{\"78\":1}}],[\"其中某一个\",{\"1\":{\"45\":1}}],[\"其中一方在发出数据包之后\",{\"1\":{\"45\":1}}],[\"其中一方在发出数据包之后超一定时间\",{\"1\":{\"45\":1}}],[\"其中\",{\"1\":{\"42\":1}}],[\"上海\",{\"1\":{\"78\":2}}],[\"北京\",{\"1\":{\"78\":2,\"147\":2}}],[\"需求\",{\"1\":{\"78\":1}}],[\"间隔60天\",{\"1\":{\"77\":1}}],[\"某一日\",{\"1\":{\"77\":1}}],[\"结束时间date2之间的天数\",{\"1\":{\"77\":1}}],[\"结果是\",{\"1\":{\"155\":5}}],[\"结果6\",{\"1\":{\"154\":1}}],[\"结果5\",{\"1\":{\"154\":1}}],[\"结果4\",{\"1\":{\"154\":1}}],[\"结果\",{\"1\":{\"152\":2}}],[\"结果3\",{\"1\":{\"76\":1,\"154\":1}}],[\"结果1\",{\"1\":{\"76\":1,\"154\":1}}],[\"结果2\",{\"1\":{\"76\":1,\"154\":1}}],[\"获取一个新的字符串\",{\"1\":{\"153\":1}}],[\"获取一个从num1到num2步长为step的数字序列\",{\"1\":{\"149\":1,\"155\":1}}],[\"获取全部的key\",{\"1\":{\"152\":1}}],[\"获取当前的日期\",{\"1\":{\"77\":1}}],[\"获取当前月份\",{\"1\":{\"77\":1}}],[\"获取当前年份\",{\"1\":{\"77\":1}}],[\"获取当前时间\",{\"1\":{\"77\":1}}],[\"获取当前日期和时间\",{\"1\":{\"77\":1}}],[\"获取当前日期\",{\"1\":{\"77\":1}}],[\"获取指定date的日期\",{\"1\":{\"77\":1}}],[\"获取指定date的月份\",{\"1\":{\"77\":1}}],[\"获取指定date的年份\",{\"1\":{\"77\":1}}],[\"获取第一个目标值的地址\",{\"1\":{\"25\":1}}],[\"日期函数\",{\"0\":{\"77\":1}}],[\"生成一个六位数的随机验证码\",{\"1\":{\"76\":1}}],[\"保存数据时\",{\"1\":{\"80\":1}}],[\"保留y位小数\",{\"1\":{\"76\":1}}],[\"保证数据的一致性和完整性\",{\"1\":{\"80\":1}}],[\"保证数据库中数据的正确\",{\"1\":{\"80\":1}}],[\"保证字段值满足某一个条件\",{\"1\":{\"80\":1}}],[\"保证该字段的所有数据都是唯一\",{\"1\":{\"80\":1}}],[\"保证\",{\"1\":{\"60\":1}}],[\"求取两个时间之间的天数\",{\"1\":{\"77\":1}}],[\"求参数x的四舍五入的值\",{\"1\":{\"76\":1}}],[\"求和\",{\"1\":{\"71\":1}}],[\"year\",{\"1\":{\"77\":2,\"155\":2}}],[\"y的模\",{\"1\":{\"76\":1}}],[\"y\",{\"1\":{\"76\":2,\"151\":2}}],[\"×\",{\"1\":{\"76\":1}}],[\"x+y\",{\"1\":{\"151\":2}}],[\"x\",{\"1\":{\"76\":3,\"151\":2}}],[\"数字11\",{\"1\":{\"155\":2}}],[\"数字11宽度限制1\",{\"1\":{\"155\":1}}],[\"数字11宽度限制5\",{\"1\":{\"155\":1}}],[\"数字精度控制\",{\"1\":{\"155\":1}}],[\"数字\",{\"1\":{\"155\":2}}],[\"数学\",{\"1\":{\"78\":2,\"152\":2,\"155\":1}}],[\"数值函数\",{\"0\":{\"76\":1}}],[\"数据是无序存储的\",{\"1\":{\"157\":1}}],[\"数据\",{\"1\":{\"155\":1}}],[\"数据容器可以从以下视角进行简单的分类\",{\"1\":{\"152\":1}}],[\"数据缓存\",{\"0\":{\"85\":1}}],[\"数据类型转换\",{\"1\":{\"155\":1}}],[\"数据类型\",{\"1\":{\"81\":1}}],[\"数据包在经过传输层时可能会被拆分成多个小数据包\",{\"1\":{\"46\":1}}],[\"数据将按\",{\"1\":{\"26\":2}}],[\"数据库名和表名可以使用\",{\"1\":{\"64\":1}}],[\"数据库名\",{\"1\":{\"64\":2}}],[\"数据库管理员\",{\"1\":{\"64\":1}}],[\"数据库\",{\"0\":{\"7\":1}}],[\"统一为5位数\",{\"1\":{\"75\":1}}],[\"统计某元素在列表中的数量\",{\"1\":{\"148\":1}}],[\"统计班级各个学员的成绩\",{\"1\":{\"78\":1}}],[\"统计员工表中\",{\"1\":{\"71\":1}}],[\"统计最大值\",{\"1\":{\"71\":1}}],[\"统计平均数\",{\"1\":{\"71\":1}}],[\"统计数量\",{\"1\":{\"71\":2}}],[\"企业员工的工号\",{\"1\":{\"75\":1}}],[\"去除前后指定字符\",{\"1\":{\"153\":1}}],[\"去除前后空格\",{\"1\":{\"153\":1}}],[\"去除重复记录\",{\"1\":{\"70\":1}}],[\"去除重复的记录\",{\"1\":{\"70\":1}}],[\"去买票\",{\"1\":{\"149\":1,\"155\":1}}],[\"去掉字符串头部和尾部的空格\",{\"1\":{\"75\":1}}],[\"右填充\",{\"1\":{\"75\":1}}],[\"达到n个字符串长度\",{\"1\":{\"75\":2}}],[\"左填充\",{\"1\":{\"75\":1}}],[\"字符\",{\"1\":{\"152\":1}}],[\"字符串格式化\",{\"1\":{\"155\":1}}],[\"字符串的替换replace\",{\"1\":{\"153\":1}}],[\"字符串index\",{\"1\":{\"153\":1}}],[\"字符串可以看成是一个存放字符的数据容器\",{\"1\":{\"153\":1}}],[\"字符串转换的时候元素为\",{\"1\":{\"152\":1}}],[\"字符串\",{\"0\":{\"153\":1},\"1\":{\"152\":3,\"153\":1,\"155\":7}}],[\"字符串拼接\",{\"1\":{\"75\":1}}],[\"字符串函数\",{\"0\":{\"75\":1}}],[\"字典在转换过程中value保留\",{\"1\":{\"152\":1}}],[\"字典经过更新后\",{\"1\":{\"152\":1}}],[\"字典经过新增元素后\",{\"1\":{\"152\":1}}],[\"字典内key不允许重复\",{\"1\":{\"152\":1}}],[\"字典dict\",{\"1\":{\"152\":1}}],[\"字典\",{\"0\":{\"152\":1},\"1\":{\"152\":3,\"155\":1}}],[\"字段列表\",{\"1\":{\"70\":2,\"71\":4}}],[\"字段3\",{\"1\":{\"70\":1}}],[\"字段2\",{\"1\":{\"70\":2,\"71\":1}}],[\"字段1\",{\"1\":{\"70\":2,\"71\":1}}],[\"字段名\",{\"1\":{\"81\":1}}],[\"字段名2=值2\",{\"1\":{\"68\":1}}],[\"字段名2\",{\"1\":{\"68\":2}}],[\"字段名1=值1\",{\"1\":{\"68\":1}}],[\"字段名1\",{\"1\":{\"68\":2}}],[\"男\",{\"1\":{\"71\":1,\"151\":3}}],[\"男性员工和女性员工的人数\",{\"1\":{\"71\":1}}],[\"且年龄在20\",{\"1\":{\"71\":1}}],[\"含\",{\"1\":{\"71\":2}}],[\"含最小\",{\"1\":{\"70\":1}}],[\"分析性能损耗\",{\"0\":{\"192\":1}}],[\"分类\",{\"1\":{\"80\":1}}],[\"分页查询是数据库的方言\",{\"1\":{\"71\":1}}],[\"分组之后\",{\"1\":{\"71\":1}}],[\"分组后的过滤条件\",{\"1\":{\"71\":1}}],[\"分组字段\",{\"1\":{\"71\":1}}],[\"才会根据第二个字段进行排序\",{\"1\":{\"71\":1}}],[\"才有\",{\"1\":{\"59\":1}}],[\"降序\",{\"1\":{\"71\":1}}],[\"升序\",{\"1\":{\"71\":1}}],[\"升序排序\",{\"1\":{\"26\":2}}],[\"排序方式\",{\"1\":{\"71\":1}}],[\"排序方式2\",{\"1\":{\"71\":1}}],[\"排序方式1\",{\"1\":{\"71\":1}}],[\"排名相同\",{\"1\":{\"26\":1}}],[\"执行顺序\",{\"1\":{\"71\":1}}],[\"执行时机不同\",{\"1\":{\"71\":1}}],[\"判断条件不同\",{\"1\":{\"71\":1}}],[\"而having可以\",{\"1\":{\"71\":1}}],[\"而having是分组之后对结果进行过滤\",{\"1\":{\"71\":1}}],[\"而客户端则会time\",{\"1\":{\"59\":1}}],[\"根据年龄进行升序排序\",{\"1\":{\"71\":2}}],[\"根据工作地址分组\",{\"1\":{\"71\":1}}],[\"根据性别分组\",{\"1\":{\"71\":2}}],[\"平均值\",{\"1\":{\"71\":1}}],[\"函数体\",{\"1\":{\"151\":1}}],[\"函数的传参\",{\"1\":{\"151\":1}}],[\"函数说明\",{\"1\":{\"151\":1}}],[\"函数\",{\"0\":{\"151\":1},\"1\":{\"71\":1,\"75\":1,\"76\":1,\"77\":1,\"78\":1,\"151\":1}}],[\"函数使用\",{\"1\":{\"26\":1}}],[\"聚合函数\",{\"0\":{\"71\":1},\"1\":{\"71\":1}}],[\"非序列类型\",{\"1\":{\"152\":2}}],[\"非空约束\",{\"1\":{\"80\":1}}],[\"非\",{\"1\":{\"70\":1}}],[\"逻辑运算符\",{\"1\":{\"70\":1}}],[\"是如何迁移连接的\",{\"0\":{\"355\":1}}],[\"是如何做流量控制的\",{\"0\":{\"352\":1}}],[\"是如何解决\",{\"0\":{\"351\":1}}],[\"是面向字节流的协议\",{\"0\":{\"282\":1}}],[\"是面向报文的协议\",{\"0\":{\"281\":1}}],[\"是有三个特点\",{\"0\":{\"206\":1}}],[\"是否可以修改\",{\"1\":{\"152\":1}}],[\"是否支持重复元素\",{\"1\":{\"152\":1}}],[\"是否支持下标索引\",{\"1\":{\"152\":1}}],[\"是根据什么来选择当前要执行的线程\",{\"0\":{\"92\":1}}],[\"是null\",{\"1\":{\"70\":1}}],[\"是一种针对网络应用程序设计的架构风格\",{\"1\":{\"62\":1}}],[\"是一个特殊的值\",{\"1\":{\"68\":1}}],[\"是一个窗口函数\",{\"1\":{\"26\":1}}],[\"是一个整数\",{\"1\":{\"19\":1,\"20\":1}}],[\"匹配任意个字符\",{\"1\":{\"70\":1}}],[\"匹配单个字符\",{\"1\":{\"70\":1}}],[\"模糊匹配\",{\"1\":{\"70\":1}}],[\"占位符\",{\"1\":{\"70\":1}}],[\"多次调用read\",{\"1\":{\"156\":1}}],[\"多级页表\",{\"0\":{\"116\":1}}],[\"多核\",{\"0\":{\"87\":1}}],[\"多个条件任意一个成立\",{\"1\":{\"70\":1}}],[\"多个条件同时成立\",{\"1\":{\"70\":1}}],[\"多个权限之间\",{\"1\":{\"64\":1}}],[\"多选一\",{\"1\":{\"70\":1}}],[\"最小值\",{\"1\":{\"71\":2}}],[\"最大值\",{\"1\":{\"70\":1,\"71\":1}}],[\"最早的\",{\"1\":{\"26\":2}}],[\"或者\",{\"1\":{\"70\":1}}],[\"或ⅱ\",{\"1\":{\"70\":1}}],[\"或\",{\"1\":{\"70\":3}}],[\"功能\",{\"1\":{\"70\":2,\"71\":1,\"75\":1,\"76\":1,\"77\":1,\"78\":1}}],[\"工作地址\",{\"1\":{\"78\":1}}],[\"工作地点\",{\"1\":{\"70\":3}}],[\"工具\",{\"0\":{\"8\":1}}],[\"别名2\",{\"1\":{\"70\":1}}],[\"别名1\",{\"1\":{\"70\":1}}],[\"设置打开文件的模式\",{\"1\":{\"156\":1}}],[\"设置的宽度小于数字自身\",{\"1\":{\"155\":1}}],[\"设置默认值的时候\",{\"1\":{\"151\":1}}],[\"设置别名\",{\"1\":{\"70\":1}}],[\"设置为第一步中的\",{\"1\":{\"49\":1}}],[\"基础计网\",{\"0\":{\"358\":1}}],[\"基础ip\",{\"0\":{\"223\":1}}],[\"基于\",{\"0\":{\"206\":1}}],[\"基于字节流的\",{\"1\":{\"42\":1}}],[\"基本认识\",{\"0\":{\"233\":1}}],[\"基本概念\",{\"0\":{\"110\":1}}],[\"基本查询\",{\"1\":{\"70\":1}}],[\"对拥塞控制改进\",{\"0\":{\"353\":1}}],[\"对11\",{\"1\":{\"155\":1}}],[\"对元组进行切片\",{\"1\":{\"154\":1}}],[\"对列表进行切片\",{\"1\":{\"154\":1}}],[\"对str进行切片\",{\"1\":{\"154\":2}}],[\"对list进行切片\",{\"1\":{\"154\":1}}],[\"对查询的结果按年龄升序排序\",{\"1\":{\"71\":1}}],[\"对记录进行排序\",{\"1\":{\"70\":1}}],[\"对数据完整性和正确性不那么高的场景\",{\"1\":{\"42\":1}}],[\"选择要返回的列\",{\"1\":{\"70\":1}}],[\"处理表连接\",{\"1\":{\"70\":1}}],[\"倪浩\",{\"1\":{\"68\":1}}],[\"条件列表\",{\"1\":{\"70\":1}}],[\"条件查询\",{\"1\":{\"70\":1}}],[\"条件\",{\"1\":{\"68\":2,\"71\":1}}],[\"条记录后\",{\"1\":{\"20\":1}}],[\"条记录\",{\"1\":{\"20\":2}}],[\"批量添加数据\",{\"1\":{\"68\":1}}],[\"给全部的字段添加数据\",{\"1\":{\"68\":1}}],[\"给指定字段添加数据\",{\"1\":{\"68\":1}}],[\"例表的长度\",{\"1\":{\"148\":1}}],[\"例子\",{\"1\":{\"68\":4,\"70\":3}}],[\"例如在每一个完整的数据之后加一个特殊字符\",{\"1\":{\"47\":1}}],[\"值2\",{\"1\":{\"68\":8}}],[\"值1\",{\"1\":{\"68\":8}}],[\"代表所有\",{\"1\":{\"64\":1}}],[\"撤销权限\",{\"1\":{\"64\":1}}],[\"授权时\",{\"1\":{\"64\":1}}],[\"授权模式\",{\"0\":{\"35\":1}}],[\"授予权限\",{\"1\":{\"64\":1}}],[\"创建表\",{\"1\":{\"81\":2}}],[\"创建数据库\",{\"1\":{\"64\":1}}],[\"创建用户能在任意主机上访问\",{\"1\":{\"64\":1}}],[\"创建用户只能在当前主机上访问\",{\"1\":{\"64\":1}}],[\"创建用户\",{\"1\":{\"64\":1}}],[\"视图\",{\"1\":{\"64\":1}}],[\"表达现实生活中的逻辑\",{\"1\":{\"155\":1}}],[\"表的员工姓名和工作地址\",{\"1\":{\"78\":1}}],[\"表名values\",{\"1\":{\"68\":1}}],[\"表名\",{\"1\":{\"64\":2,\"68\":5,\"70\":5,\"71\":4,\"81\":4}}],[\"表\",{\"1\":{\"64\":2}}],[\"表示将宽度控制为5\",{\"1\":{\"155\":1}}],[\"表示将整数的宽度控制在5位\",{\"1\":{\"155\":1}}],[\"表示客户端希望下一次接受的序列号\",{\"1\":{\"54\":1}}],[\"表示客户端请求连接\",{\"1\":{\"52\":1}}],[\"表示数据在数据流中的位置\",{\"1\":{\"46\":1}}],[\"表示在跳过\",{\"1\":{\"20\":1}}],[\"表示要跳过的记录数\",{\"1\":{\"20\":1}}],[\"表示从结果集的哪一条记录开始返回数据\",{\"1\":{\"19\":1}}],[\"删除元素\",{\"1\":{\"152\":1}}],[\"删除在例表中第一个匹配的值\",{\"1\":{\"148\":1}}],[\"删除list中元素\",{\"1\":{\"148\":1}}],[\"删除\",{\"1\":{\"81\":1}}],[\"删除外键\",{\"1\":{\"81\":2}}],[\"删除数据库\",{\"1\":{\"64\":1}}],[\"删除数据\",{\"1\":{\"64\":1,\"68\":1}}],[\"删除用户\",{\"1\":{\"64\":2}}],[\"修改特定下标的值\",{\"1\":{\"148\":1}}],[\"修改表\",{\"1\":{\"64\":1}}],[\"修改数据\",{\"1\":{\"64\":1,\"68\":1}}],[\"修改用户密码\",{\"1\":{\"64\":2}}],[\"插入数据\",{\"1\":{\"64\":1,\"81\":2}}],[\"说明\",{\"1\":{\"64\":1,\"81\":1,\"155\":1}}],[\"说明从\",{\"1\":{\"49\":1}}],[\"权限列表\",{\"1\":{\"64\":2}}],[\"权限\",{\"1\":{\"64\":1}}],[\"注意\",{\"1\":{\"64\":2,\"71\":3}}],[\"密码123456\",{\"1\":{\"64\":2}}],[\"密码\",{\"1\":{\"64\":1}}],[\"主表字段\",{\"1\":{\"81\":1}}],[\"主表名\",{\"1\":{\"81\":1}}],[\"主表列名\",{\"1\":{\"81\":2}}],[\"主表\",{\"1\":{\"81\":2}}],[\"主键\",{\"1\":{\"80\":1}}],[\"主键是一行数据的唯一标识\",{\"1\":{\"80\":1}}],[\"主键约束\",{\"1\":{\"80\":1}}],[\"主要是dba\",{\"1\":{\"64\":1}}],[\"主机名可以使用\",{\"1\":{\"64\":1}}],[\"主机名\",{\"1\":{\"64\":6}}],[\"主动关闭连接的\",{\"1\":{\"59\":1}}],[\"`\",{\"1\":{\"147\":12}}],[\"`json\",{\"1\":{\"147\":8}}],[\"`score`\",{\"1\":{\"78\":1}}],[\"`salary`\",{\"1\":{\"18\":1}}],[\"`chinese`\",{\"1\":{\"78\":1}}],[\"`math`\",{\"1\":{\"78\":2}}],[\"`address`\",{\"1\":{\"78\":1}}],[\"`age`<=35\",{\"1\":{\"71\":1}}],[\"`age`<=40\",{\"1\":{\"71\":2}}],[\"`age`>=20\",{\"1\":{\"71\":2}}],[\"`age`=\",{\"1\":{\"70\":3}}],[\"`age`\",{\"1\":{\"68\":2,\"70\":4,\"71\":12}}],[\"`workon`\",{\"1\":{\"75\":2}}],[\"`workadress`\",{\"1\":{\"70\":3,\"71\":3}}],[\"`english`\",{\"1\":{\"78\":1}}],[\"`entydate`\",{\"1\":{\"71\":1}}],[\"`entrydate`\",{\"1\":{\"71\":2,\"77\":1}}],[\"`emp`where\",{\"1\":{\"71\":1}}],[\"`emp`\",{\"1\":{\"70\":9,\"71\":17,\"75\":1,\"77\":1}}],[\"`gender`\",{\"1\":{\"71\":7}}],[\"`西安`\",{\"1\":{\"71\":1}}],[\"`id`\",{\"1\":{\"71\":1}}],[\"`idcard`\",{\"1\":{\"70\":1}}],[\"`name`\",{\"1\":{\"68\":3,\"70\":1,\"71\":2,\"77\":1,\"78\":2}}],[\"`flipped\",{\"1\":{\"68\":5}}],[\"`user`\",{\"1\":{\"64\":1}}],[\"header\",{\"0\":{\"349\":1,\"350\":1}}],[\"hello\",{\"1\":{\"151\":2,\"156\":2}}],[\"hao\",{\"1\":{\"153\":1}}],[\"having\",{\"1\":{\"70\":1,\"71\":2}}],[\"hsdhaui\",{\"1\":{\"151\":1}}],[\"http协议是基于tcp协议传输的\",{\"0\":{\"372\":1}}],[\"http和rpc的区别\",{\"0\":{\"207\":1}}],[\"http和https\",{\"0\":{\"199\":1}}],[\"http和https的区别\",{\"0\":{\"198\":1,\"200\":1}}],[\"https的应用数据时如保证完整性的\",{\"0\":{\"204\":1}}],[\"https是如何建立连接的\",{\"0\":{\"203\":1}}],[\"https解决了http的那些问题\",{\"0\":{\"201\":1}}],[\"https如何优化\",{\"0\":{\"191\":1}}],[\"http3协议\",{\"0\":{\"190\":1}}],[\"http2的问题\",{\"0\":{\"182\":1}}],[\"http的性能问题\",{\"0\":{\"174\":1}}],[\"http的更迭\",{\"0\":{\"170\":1}}],[\"http特性\",{\"0\":{\"169\":1}}],[\"http缓存技术\",{\"0\":{\"166\":1}}],[\"http常见字段有哪些\",{\"0\":{\"162\":1}}],[\"http常见的状态码\",{\"0\":{\"161\":1}}],[\"http是什么\",{\"0\":{\"160\":1}}],[\"http基本概念\",{\"0\":{\"159\":1}}],[\"http\",{\"0\":{\"158\":1,\"390\":1},\"1\":{\"62\":1}}],[\"high\",{\"1\":{\"23\":1}}],[\"为什么每次建立tcp连接\",{\"0\":{\"320\":1}}],[\"为什么每次建立tcp链接的时候\",{\"0\":{\"314\":1}}],[\"为什么tcp层还需要mss\",{\"0\":{\"316\":1}}],[\"为什么是三次握手\",{\"0\":{\"313\":1}}],[\"为什么半连接队列要设计成哈希表\",{\"0\":{\"257\":1}}],[\"为什么需要\",{\"0\":{\"237\":1}}],[\"为什么需要三次握手而不是四次\",{\"0\":{\"61\":1}}],[\"为什么\",{\"0\":{\"236\":1}}],[\"为什么断网了还能ping通127\",{\"0\":{\"221\":1}}],[\"为结果集中的每一行分配一个排名\",{\"1\":{\"26\":1}}],[\"为结果集中的每一行分配一个唯一的序号\",{\"1\":{\"26\":1}}],[\"被设置为5d\",{\"1\":{\"155\":1}}],[\"被动关闭连接\",{\"1\":{\"60\":1}}],[\"被后面相同四元组的连接错误的接收\",{\"1\":{\"60\":1}}],[\"防止历史连接中的数据\",{\"1\":{\"60\":1}}],[\"状态过多\",{\"0\":{\"267\":1}}],[\"状态的原因有哪些\",{\"0\":{\"240\":1,\"241\":1}}],[\"状态和操作的统一性\",{\"1\":{\"62\":1}}],[\"状态\",{\"0\":{\"237\":1,\"341\":1},\"1\":{\"59\":1,\"80\":1}}],[\"之后进入close状态\",{\"1\":{\"59\":1}}],[\"之后服务端进入last\",{\"1\":{\"58\":1}}],[\"之后客户端进入fin\",{\"1\":{\"56\":1}}],[\"等待的时间是\",{\"0\":{\"236\":1}}],[\"等待上层应用读取\",{\"1\":{\"48\":1}}],[\"等同于将序列反转了\",{\"1\":{\"154\":1}}],[\"等于\",{\"1\":{\"70\":1}}],[\"等服务端不再发送数据时\",{\"1\":{\"58\":1}}],[\"服务进程时\",{\"0\":{\"264\":1}}],[\"服务端突然挂怎么办\",{\"0\":{\"343\":1}}],[\"服务端没有调用listen\",{\"0\":{\"254\":1}}],[\"服务端接收到报文之后进入close状态\",{\"1\":{\"59\":1}}],[\"服务端可能还有数据需要处理和发送\",{\"1\":{\"58\":1}}],[\"服务端进入close\",{\"1\":{\"57\":1}}],[\"服务端收到该报文\",{\"1\":{\"57\":1}}],[\"服务器\",{\"0\":{\"382\":1}}],[\"服务器域名与\",{\"0\":{\"369\":1}}],[\"服务器出现大量\",{\"0\":{\"240\":1,\"241\":1}}],[\"服务器主动推送资源\",{\"0\":{\"181\":1}}],[\"服务器处于syn\",{\"1\":{\"53\":1}}],[\"服务器处于listen\",{\"1\":{\"52\":1}}],[\"服务器也会选择一个初始序列号用于标识服务器到客户端的数据流\",{\"1\":{\"53\":1}}],[\"服务器同意建立连接\",{\"1\":{\"53\":1}}],[\"work\",{\"0\":{\"384\":1}}],[\"world\",{\"1\":{\"156\":2}}],[\"websocket是什么\",{\"0\":{\"208\":1}}],[\"write\",{\"1\":{\"156\":2}}],[\"w\",{\"1\":{\"156\":2}}],[\"while循环\",{\"1\":{\"149\":1,\"155\":1}}],[\"while和for\",{\"0\":{\"149\":1}}],[\"while\",{\"1\":{\"148\":3,\"149\":3,\"150\":1,\"155\":3}}],[\"when\",{\"1\":{\"23\":3,\"78\":6}}],[\"where>聚合函数>having\",{\"1\":{\"71\":1}}],[\"where不能对聚合函数进行判断\",{\"1\":{\"71\":1}}],[\"where是分组之前进行过滤\",{\"1\":{\"71\":1}}],[\"where与having区别\",{\"1\":{\"71\":1}}],[\"where\",{\"1\":{\"16\":1,\"17\":1,\"18\":1,\"68\":4,\"70\":8,\"71\":7}}],[\"with\",{\"1\":{\"64\":2,\"156\":2}}],[\"wait和time\",{\"0\":{\"235\":1}}],[\"wait时间太短\",{\"1\":{\"60\":1}}],[\"wait状态的tcp接收到syn报文会怎么样\",{\"0\":{\"338\":1}}],[\"wait状态的意义\",{\"0\":{\"60\":1}}],[\"wait状态或者time\",{\"1\":{\"60\":1}}],[\"wait状态标识一个连接已经完成了关闭过程\",{\"1\":{\"60\":1}}],[\"wait状态\",{\"1\":{\"57\":1}}],[\"wait\",{\"0\":{\"235\":1,\"236\":1,\"237\":1,\"238\":1,\"239\":1,\"240\":1,\"241\":1,\"267\":1,\"341\":1},\"1\":{\"56\":1,\"57\":1,\"59\":2}}],[\"向下取整\",{\"1\":{\"76\":1}}],[\"向上取整\",{\"1\":{\"76\":1}}],[\"向客户端发送一个ack报文\",{\"1\":{\"57\":1}}],[\"向服务器发送一个fin报文\",{\"1\":{\"56\":1}}],[\"向对方发送相应的字节数\",{\"1\":{\"48\":1}}],[\"以j结尾表示复数布尔\",{\"1\":{\"155\":1}}],[\"以内的前5个员工信息\",{\"1\":{\"71\":1}}],[\"以内的姓名为三个字的员工\",{\"1\":{\"71\":1}}],[\"以及ack\",{\"1\":{\"54\":1}}],[\"以确保数据的有序性\",{\"1\":{\"46\":1}}],[\"半连接状态\",{\"1\":{\"53\":1}}],[\"标识符命名中\",{\"1\":{\"155\":1}}],[\"标识符命名规则\",{\"1\":{\"155\":1}}],[\"标识的tcp报文之后\",{\"1\":{\"54\":1}}],[\"标识的tcp报文\",{\"1\":{\"53\":1}}],[\"标志的tcp报文到服务器\",{\"1\":{\"52\":1}}],[\"会断开连接吗\",{\"0\":{\"341\":1}}],[\"会导致端口资源耗尽而无法建立新的连接吗\",{\"0\":{\"267\":1}}],[\"会有一个cookies队列吗\",{\"0\":{\"258\":1}}],[\"会话复用\",{\"0\":{\"196\":1}}],[\"会进行小数的四舍五入\",{\"1\":{\"155\":1}}],[\"会向服务器发送一个带有ack标志的确认报文段\",{\"1\":{\"54\":1}}],[\"会回复一个带有syn和ack\",{\"1\":{\"53\":1}}],[\"会将它放到缓冲区\",{\"1\":{\"46\":1}}],[\"监听状态\",{\"1\":{\"52\":1}}],[\"同步已发送\",{\"1\":{\"52\":1}}],[\"同步序列编号\",{\"1\":{\"52\":1}}],[\"客户端主机宕机又重启\",{\"0\":{\"345\":1}}],[\"客户端主动想要断开连接\",{\"1\":{\"56\":1}}],[\"客户端突然挂怎么办\",{\"0\":{\"342\":1}}],[\"客户端\",{\"0\":{\"267\":1,\"382\":1}}],[\"客户端请求建立连接会发生什么\",{\"0\":{\"254\":1}}],[\"客户端调用\",{\"0\":{\"253\":1}}],[\"客户端向服务端发送ack报文\",{\"1\":{\"59\":1}}],[\"客户端接收之后进入fin\",{\"1\":{\"57\":1}}],[\"客户端和服务器都进入established\",{\"1\":{\"54\":1}}],[\"客户端在接收服务器的带有syn和ack\",{\"1\":{\"54\":1}}],[\"客户端处于syn\",{\"1\":{\"52\":1,\"53\":1}}],[\"客户端会发送一个带有syn\",{\"1\":{\"52\":1}}],[\"放入syn报文段中\",{\"1\":{\"52\":1}}],[\"99\",{\"1\":{\"152\":4,\"155\":1}}],[\"99乘法表\",{\"1\":{\"149\":1,\"155\":1}}],[\"98\",{\"1\":{\"78\":1,\"152\":1}}],[\"90\",{\"1\":{\"78\":1}}],[\"95\",{\"1\":{\"78\":1}}],[\"9\",{\"0\":{\"50\":1},\"1\":{\"76\":1,\"148\":1,\"155\":4}}],[\"该恢复过程已经结束\",{\"1\":{\"49\":1}}],[\"确定要查询的表\",{\"1\":{\"70\":1}}],[\"确认号\",{\"1\":{\"53\":1,\"54\":1}}],[\"确认了新的数据\",{\"1\":{\"49\":1}}],[\"确保连接的稳定和可靠\",{\"1\":{\"43\":1}}],[\"确保每个类别都出现在结果集中\",{\"1\":{\"23\":1}}],[\"把传输工作给操作系统中的协议栈\",{\"0\":{\"371\":1}}],[\"把数据刷到硬盘里\",{\"1\":{\"156\":1}}],[\"把\",{\"1\":{\"49\":1}}],[\"个偶数\",{\"1\":{\"149\":1,\"155\":1}}],[\"个数据包被收到了\",{\"1\":{\"49\":1}}],[\"个人格言\",{\"0\":{\"15\":1}}],[\"个人信息\",{\"0\":{\"1\":1}}],[\"+1=\",{\"1\":{\"155\":1}}],[\"+=\",{\"1\":{\"148\":1,\"151\":1,\"155\":2}}],[\"+\",{\"1\":{\"49\":1,\"147\":2,\"155\":2}}],[\"快速恢复\",{\"0\":{\"293\":1},\"1\":{\"49\":1}}],[\"快速重传解决了超时重传重传周期太长的问题\",{\"1\":{\"45\":1}}],[\"快速重传\",{\"0\":{\"308\":1},\"1\":{\"45\":1}}],[\"进程的上下文切换\",{\"0\":{\"146\":1}}],[\"进程的控制\",{\"0\":{\"145\":1}}],[\"进程的控制结构\",{\"0\":{\"144\":1}}],[\"进程的状态\",{\"0\":{\"143\":1}}],[\"进程\",{\"0\":{\"142\":1}}],[\"进行比较\",{\"1\":{\"68\":2}}],[\"进行通配\",{\"1\":{\"64\":1}}],[\"进行分区\",{\"1\":{\"26\":2}}],[\"进入快恢复算法\",{\"1\":{\"49\":1}}],[\"发生在三次握手的哪一步\",{\"0\":{\"252\":1}}],[\"发生快速重传的拥塞发生算法\",{\"1\":{\"49\":1}}],[\"发生超时重传的拥塞发生算法\",{\"1\":{\"49\":1}}],[\"发送方的滑动窗口\",{\"0\":{\"297\":1}}],[\"发送方根据接收方的窗口变化\",{\"1\":{\"48\":1}}],[\"发送方根据这一字段就可以精准定位这个丢失包\",{\"1\":{\"45\":1}}],[\"发送fin报文\",{\"1\":{\"58\":1}}],[\"发送端就可以跟据接收端和本端窗口大小\",{\"1\":{\"48\":1}}],[\"发送一堆数据包之后\",{\"1\":{\"45\":1}}],[\"增加或删除元素等\",{\"1\":{\"157\":1}}],[\"增加\",{\"1\":{\"49\":2}}],[\"此时他发送数据的能力呈线性增长\",{\"1\":{\"49\":1}}],[\"就会变成\",{\"1\":{\"155\":1}}],[\"就会进入拥塞避免算法\",{\"1\":{\"49\":1}}],[\"就会出现连包和拆包的问题\",{\"1\":{\"47\":1}}],[\"拥塞窗口\",{\"1\":{\"49\":1}}],[\"拥塞窗口加1\",{\"1\":{\"49\":1}}],[\"拥塞发生\",{\"0\":{\"292\":1},\"1\":{\"49\":1}}],[\"拥塞避免\",{\"0\":{\"291\":1},\"1\":{\"49\":1}}],[\"拥塞控制\",{\"0\":{\"49\":1,\"289\":1}}],[\"慢启动门限等于当前拥塞窗口\",{\"1\":{\"49\":1}}],[\"慢启动门限变成拥塞窗口\",{\"1\":{\"49\":1}}],[\"慢启动\",{\"0\":{\"290\":1},\"1\":{\"49\":1}}],[\"8400\",{\"1\":{\"81\":1}}],[\"88\",{\"1\":{\"78\":1,\"152\":3}}],[\"884\",{\"0\":{\"28\":1},\"1\":{\"28\":1}}],[\"85\",{\"1\":{\"78\":1}}],[\"8\",{\"0\":{\"49\":1,\"382\":1},\"1\":{\"80\":1,\"148\":1,\"156\":5}}],[\"相应改变本端的窗口大小\",{\"1\":{\"48\":1}}],[\"相应的缓冲区就会被释放\",{\"1\":{\"48\":1}}],[\"滑动窗口\",{\"0\":{\"48\":1,\"295\":1}}],[\"77\",{\"1\":{\"152\":3}}],[\"76\",{\"1\":{\"78\":1}}],[\"7\",{\"0\":{\"48\":1,\"267\":1,\"381\":1},\"1\":{\"148\":1,\"155\":2}}],[\"由任意数量的字符组成\",{\"1\":{\"155\":1}}],[\"由于元组不可修改\",{\"1\":{\"150\":1}}],[\"由于业务需求变更\",{\"1\":{\"75\":1}}],[\"由于需要输出null\",{\"1\":{\"18\":1}}],[\"由头部和消息体组成\",{\"1\":{\"47\":1}}],[\"固定数据长度\",{\"1\":{\"47\":1}}],[\"造成数据处理错误\",{\"1\":{\"47\":1}}],[\"导致接收方无法正确解析数据边界\",{\"1\":{\"47\":1}}],[\"一问一答\",{\"0\":{\"385\":1}}],[\"一端断电和进程崩溃有什么区别\",{\"0\":{\"344\":1}}],[\"一次读取一行\",{\"1\":{\"156\":1}}],[\"一般推荐utf\",{\"1\":{\"156\":1}}],[\"一行代码\",{\"1\":{\"151\":1}}],[\"一旦完成封装就不可以被修改\",{\"1\":{\"150\":1}}],[\"一致\",{\"1\":{\"81\":1}}],[\"一线城市\",{\"1\":{\"78\":3}}],[\"一个浮点数类型的占位符\",{\"1\":{\"155\":1}}],[\"一个整数类型的占位符\",{\"1\":{\"155\":1}}],[\"一个字符串类型的占位符\",{\"1\":{\"155\":2}}],[\"一个sql语句可以查询到什么\",{\"0\":{\"73\":1}}],[\"一个sql语句\",{\"0\":{\"72\":1}}],[\"一个完整的数据包可能会被拆分成多个小的数据包\",{\"1\":{\"47\":1}}],[\"一些实时游戏\",{\"1\":{\"42\":1}}],[\"所有权限\",{\"1\":{\"64\":1}}],[\"所谓字节流就是一串没有边界的二进制数据\",{\"1\":{\"47\":1}}],[\"所以可以省略不写\",{\"1\":{\"154\":1}}],[\"所以只有index\",{\"1\":{\"150\":1}}],[\"所以会选择将这个数据包之后的所有数据包全部重传一遍\",{\"1\":{\"45\":1}}],[\"所以常用在对数据实时性要求较高\",{\"1\":{\"42\":1}}],[\"所以一般适用于上传下载\",{\"1\":{\"42\":1}}],[\"所以将查询设为一个子查询\",{\"1\":{\"18\":1}}],[\"粘包问题\",{\"0\":{\"47\":1}}],[\"让发送方知道时丢包还是网络延迟\",{\"1\":{\"45\":1}}],[\"又称d\",{\"1\":{\"45\":1}}],[\"告知对方接收了哪些数据\",{\"1\":{\"45\":1}}],[\"容易造成资源的浪费\",{\"1\":{\"45\":1}}],[\"几个\",{\"1\":{\"45\":1}}],[\"几个数据包丢失时\",{\"1\":{\"45\":1}}],[\"无分类地址cidr\",{\"0\":{\"229\":1}}],[\"无队头阻塞\",{\"0\":{\"187\":1}}],[\"无序key\",{\"1\":{\"155\":1}}],[\"无序不重复集合\",{\"1\":{\"155\":1}}],[\"无法修改\",{\"1\":{\"153\":1}}],[\"无法精准定位是哪一个\",{\"1\":{\"45\":1}}],[\"无return会返回一个none值\",{\"1\":{\"151\":1}}],[\"无连接\",{\"1\":{\"42\":1}}],[\"重启\",{\"0\":{\"264\":1}}],[\"重复添加等同于覆盖原有数据\",{\"1\":{\"152\":1}}],[\"重复三次收到相同的ack包\",{\"1\":{\"45\":1}}],[\"重传丢失的数据包\",{\"1\":{\"49\":1}}],[\"重传数据包\",{\"1\":{\"45\":1}}],[\"重传这个数据包\",{\"1\":{\"45\":1}}],[\"重传机制有哪些\",{\"0\":{\"45\":1}}],[\"那么\",{\"1\":{\"49\":1}}],[\"那么这一方就会认为数据包丢失\",{\"1\":{\"45\":1}}],[\"那么这一方就会认定出现丢包现象\",{\"1\":{\"45\":1}}],[\"那么查询将不会返回任何结果\",{\"1\":{\"18\":1}}],[\"超时重传\",{\"0\":{\"307\":1},\"1\":{\"45\":1}}],[\"通配\",{\"1\":{\"64\":1}}],[\"通过dns获取到ip后\",{\"0\":{\"371\":1}}],[\"通过下标索引取值\",{\"1\":{\"153\":1}}],[\"通过数据库的函数\",{\"1\":{\"76\":1}}],[\"通过window字段告知对方本端的缓冲区大小\",{\"1\":{\"48\":1}}],[\"通过自定义协议\",{\"1\":{\"47\":1}}],[\"通过确认应答机制以及重传机制来保证数据传输的可靠\",{\"1\":{\"44\":1}}],[\"通常基于order\",{\"1\":{\"26\":1}}],[\"比如\",{\"1\":{\"75\":1}}],[\"比如音视频通话\",{\"1\":{\"42\":1}}],[\"比较运算符\",{\"1\":{\"70\":1}}],[\"比较含退格的字符串\",{\"0\":{\"28\":1},\"1\":{\"28\":1}}],[\"面向报文的\",{\"1\":{\"42\":1}}],[\"面向连接\",{\"1\":{\"42\":1}}],[\"udp\",{\"0\":{\"281\":1}}],[\"udp和tcp的区别和应用场景\",{\"0\":{\"246\":1}}],[\"udp的特点是\",{\"1\":{\"42\":1}}],[\"utf\",{\"1\":{\"156\":4}}],[\"unmarshal\",{\"1\":{\"147\":2}}],[\"unique\",{\"1\":{\"80\":1}}],[\"unioue\",{\"1\":{\"80\":1}}],[\"union\",{\"0\":{\"22\":1,\"23\":1},\"1\":{\"22\":3,\"23\":7,\"157\":1}}],[\"unit\",{\"1\":{\"77\":2}}],[\"u2\",{\"1\":{\"147\":3}}],[\"u1\",{\"1\":{\"147\":3}}],[\"uint64\",{\"1\":{\"147\":1}}],[\"uint\",{\"1\":{\"147\":3}}],[\"up\",{\"1\":{\"155\":2}}],[\"upper\",{\"1\":{\"75\":1}}],[\"update\",{\"1\":{\"64\":1,\"68\":2,\"75\":1,\"81\":2,\"157\":1}}],[\"useinfo\",{\"1\":{\"147\":5}}],[\"userinfo\",{\"1\":{\"147\":3}}],[\"user1\",{\"1\":{\"147\":3}}],[\"user1`set\",{\"1\":{\"68\":1}}],[\"user1`values\",{\"1\":{\"68\":1}}],[\"user1`\",{\"1\":{\"68\":3}}],[\"user\",{\"1\":{\"64\":7,\"80\":1,\"147\":5,\"151\":12}}],[\"use\",{\"0\":{\"264\":1},\"1\":{\"64\":1}}],[\"邮件发送等场景\",{\"1\":{\"42\":1}}],[\"可无序记录一堆key\",{\"1\":{\"155\":1}}],[\"可无序记录一堆不重复的python数据集合\",{\"1\":{\"155\":1}}],[\"可有序记录一堆不可变的python数据集合\",{\"1\":{\"155\":1}}],[\"可有序记录一堆数据\",{\"1\":{\"155\":1}}],[\"可能导致数据错乱或者连接错误\",{\"1\":{\"60\":1}}],[\"可以修改\",{\"1\":{\"157\":1}}],[\"可以容纳不同类型的数据\",{\"1\":{\"157\":1}}],[\"可以容纳多个数据\",{\"1\":{\"157\":1}}],[\"可以将函数内部的变量成为全局变量\",{\"1\":{\"151\":1}}],[\"可以给函数加一个说明文档\",{\"1\":{\"151\":1}}],[\"可以回到恢复之前的状态了\",{\"1\":{\"49\":1}}],[\"可以提高查询效率\",{\"1\":{\"23\":1}}],[\"可靠的\",{\"1\":{\"42\":1}}],[\"如数字11\",{\"1\":{\"155\":1}}],[\"如\",{\"1\":{\"155\":4}}],[\"如何理解tcp是基于字节流的协议\",{\"0\":{\"280\":1}}],[\"如何确定一个tcp连接\",{\"0\":{\"279\":1}}],[\"如何解决syn超时\",{\"0\":{\"244\":1}}],[\"如何解决的\",{\"0\":{\"202\":1}}],[\"如何避免\",{\"0\":{\"264\":1}}],[\"如何避免syn攻击\",{\"0\":{\"243\":1}}],[\"如何避免发送http请求\",{\"0\":{\"171\":1}}],[\"如何优化tcp\",{\"0\":{\"269\":1}}],[\"如何优化\",{\"0\":{\"239\":1}}],[\"如何减少http响应的数据大小\",{\"0\":{\"173\":1}}],[\"如何减少http请求次数\",{\"0\":{\"172\":1}}],[\"如何写出让\",{\"0\":{\"84\":1}}],[\"如何设计一个登录验签服务\",{\"0\":{\"38\":1}}],[\"如果已经建立了链接\",{\"0\":{\"342\":1,\"343\":1}}],[\"如果需要自行转换类型\",{\"1\":{\"149\":1,\"155\":1}}],[\"如果有则设置子表中该外键值为null\",{\"1\":{\"81\":1}}],[\"如果有则不允许删除\",{\"1\":{\"81\":2}}],[\"如果有\",{\"1\":{\"81\":1}}],[\"如果有多表查询\",{\"1\":{\"70\":1}}],[\"如果未指定该字段的值\",{\"1\":{\"80\":1}}],[\"如果expr的值等于val1\",{\"1\":{\"78\":1}}],[\"如果val1为true\",{\"1\":{\"78\":1}}],[\"如果value1不为空\",{\"1\":{\"78\":1}}],[\"如果value为true\",{\"1\":{\"78\":1}}],[\"如果查询的是第一页数据\",{\"1\":{\"71\":1}}],[\"如果是多字段排序\",{\"1\":{\"71\":1}}],[\"如果年龄相同按入职时间降序排序\",{\"1\":{\"71\":1}}],[\"如果年龄相同\",{\"1\":{\"71\":1}}],[\"如果收到新数据的\",{\"1\":{\"49\":1}}],[\"如果再收到重复的\",{\"1\":{\"49\":1}}],[\"如果要实现不同域名下的cookie正常使用\",{\"0\":{\"37\":1}}],[\"如果没有time\",{\"1\":{\"60\":1}}],[\"如果没有前面的行\",{\"1\":{\"26\":1}}],[\"如果没有后续行\",{\"1\":{\"26\":1}}],[\"如果表中的行数少于2行\",{\"1\":{\"18\":1}}],[\"假如1亿用户体量\",{\"0\":{\"38\":1}}],[\"4+3j\",{\"1\":{\"155\":1}}],[\"4结束\",{\"1\":{\"154\":1}}],[\"43\",{\"1\":{\"81\":1}}],[\"48\",{\"1\":{\"81\":1}}],[\"45\",{\"1\":{\"71\":1,\"148\":1}}],[\"404\",{\"1\":{\"383\":1}}],[\"40岁\",{\"1\":{\"71\":2}}],[\"40\",{\"1\":{\"70\":2}}],[\"4\",{\"0\":{\"38\":1,\"45\":1,\"59\":1,\"179\":1,\"204\":1,\"264\":1,\"310\":1,\"372\":1,\"377\":1},\"1\":{\"45\":1,\"47\":1,\"49\":1,\"64\":1,\"68\":1,\"71\":1,\"76\":1,\"81\":1,\"148\":5,\"150\":3,\"154\":5,\"155\":6,\"157\":6}}],[\"35\",{\"1\":{\"155\":2}}],[\"3=\",{\"1\":{\"155\":1}}],[\"33\",{\"1\":{\"81\":1,\"152\":1}}],[\"30\",{\"1\":{\"68\":2,\"155\":1}}],[\"3\",{\"0\":{\"37\":1,\"44\":1,\"54\":1,\"58\":1,\"118\":1,\"173\":1,\"176\":1,\"185\":1,\"189\":1,\"190\":1,\"203\":1,\"309\":1,\"371\":1,\"375\":1},\"1\":{\"45\":1,\"47\":1,\"49\":4,\"64\":2,\"68\":1,\"70\":1,\"71\":2,\"76\":1,\"78\":1,\"81\":2,\"147\":2,\"148\":7,\"150\":4,\"154\":4,\"155\":4,\"157\":6}}],[\"345不限制\",{\"1\":{\"155\":1}}],[\"345宽度限制7\",{\"1\":{\"155\":1}}],[\"345\",{\"1\":{\"155\":1}}],[\"345设置了\",{\"1\":{\"155\":1}}],[\"34\",{\"0\":{\"25\":1},\"1\":{\"25\":1,\"76\":1}}],[\"跨域资源共享\",{\"0\":{\"31\":1}}],[\"不允许重复数据存在\",{\"1\":{\"157\":1}}],[\"不然在完全读取之后\",{\"1\":{\"156\":1}}],[\"不然就加入栈\",{\"1\":{\"28\":1}}],[\"不传参表示默认读取全部\",{\"1\":{\"156\":1}}],[\"不传入参数\",{\"1\":{\"153\":1}}],[\"不存在就创建\",{\"1\":{\"156\":2}}],[\"不生效\",{\"1\":{\"155\":1}}],[\"不支持下标索引\",{\"1\":{\"157\":2}}],[\"不支持\",{\"1\":{\"152\":3}}],[\"不可使用关键字\",{\"1\":{\"155\":1}}],[\"不可以写多行数据\",{\"1\":{\"151\":1}}],[\"不可靠的\",{\"1\":{\"42\":1}}],[\"不接受的话就是一个临时函数\",{\"1\":{\"151\":1}}],[\"不会包含num2\",{\"1\":{\"149\":1,\"155\":1}}],[\"不重复的\",{\"1\":{\"80\":1}}],[\"不及格\",{\"1\":{\"78\":1}}],[\"不同的数据库有不同的实现\",{\"1\":{\"71\":1}}],[\"不参与分组\",{\"1\":{\"71\":1}}],[\"不满足where条件\",{\"1\":{\"71\":1}}],[\"不是\",{\"1\":{\"70\":1}}],[\"不等\",{\"1\":{\"70\":1}}],[\"不返回ack包\",{\"1\":{\"45\":1}}],[\"不能使用普通的等号\",{\"1\":{\"68\":1}}],[\"不能是函数参数\",{\"1\":{\"18\":1}}],[\"不能直接将参数n递给\",{\"1\":{\"18\":1}}],[\"当第一次握手丢失\",{\"0\":{\"317\":1}}],[\"当第一个字段值相同时\",{\"1\":{\"71\":1}}],[\"当前股价\",{\"1\":{\"155\":1}}],[\"当在父表中删除对应记录时\",{\"1\":{\"81\":1}}],[\"当在父表中删除\",{\"1\":{\"81\":3}}],[\"当拥塞窗口超过慢启动门限\",{\"1\":{\"49\":1}}],[\"当数据被读取\",{\"1\":{\"48\":1}}],[\"当传输层使用tcp协议时\",{\"1\":{\"46\":1}}],[\"当\",{\"1\":{\"28\":1}}],[\"利用栈的思想\",{\"1\":{\"28\":1}}],[\"顶出栈顶元素\",{\"1\":{\"28\":1}}],[\"订单最多的客户\",{\"0\":{\"27\":1},\"1\":{\"27\":1}}],[\"找到窗口中的最大值\",{\"1\":{\"26\":1}}],[\"找到窗口中的最小值\",{\"1\":{\"26\":1}}],[\"它基于\",{\"1\":{\"62\":1}}],[\"它发送数据的能力会呈指数形式增长\",{\"1\":{\"49\":1}}],[\"它返回在每个分区内按指定顺序的第一个值\",{\"1\":{\"26\":1}}],[\"它会进行额外的步骤来消除重复的行\",{\"1\":{\"22\":1}}],[\"后\",{\"1\":{\"49\":1}}],[\"后续的排名会跳过\",{\"1\":{\"26\":1}}],[\"后端技术\",{\"0\":{\"6\":1}}],[\"的对应关系\",{\"0\":{\"369\":1}}],[\"的工具\",{\"0\":{\"324\":1,\"325\":1}}],[\"的报错信息\",{\"0\":{\"264\":1}}],[\"的意义\",{\"0\":{\"251\":1}}],[\"的意思是确认有\",{\"1\":{\"49\":1}}],[\"的数据写入\",{\"0\":{\"98\":1}}],[\"的缓存命中率\",{\"0\":{\"87\":1}}],[\"的一方\",{\"1\":{\"60\":1}}],[\"的值\",{\"1\":{\"49\":1}}],[\"的行会得到相同的排名\",{\"1\":{\"26\":1}}],[\"的查询效率\",{\"1\":{\"25\":1}}],[\"即真和假\",{\"1\":{\"155\":1}}],[\"即元组中元素也可以是元组\",{\"1\":{\"150\":1}}],[\"即使存在并列排名\",{\"1\":{\"26\":1}}],[\"即并列\",{\"1\":{\"26\":1}}],[\"即只有1行或者为空\",{\"1\":{\"18\":1}}],[\"计网部分\",{\"1\":{\"41\":1}}],[\"计算机网络基础\",{\"0\":{\"394\":1}}],[\"计算机网络\",{\"0\":{\"391\":1}}],[\"计算机操作系统\",{\"0\":{\"387\":1}}],[\"计算机是怎么存小数的\",{\"0\":{\"140\":1}}],[\"计算机保存数据的形式\",{\"0\":{\"137\":1}}],[\"计算窗口内值的样本方差\",{\"1\":{\"26\":1}}],[\"计算窗口内值的样本标准差\",{\"1\":{\"26\":1}}],[\"计算窗口内值的总体方差\",{\"1\":{\"26\":1}}],[\"计算窗口内值的总体标准差\",{\"1\":{\"26\":1}}],[\"计算窗口中的平均值\",{\"1\":{\"26\":1}}],[\"计算窗口中的总和\",{\"1\":{\"26\":1}}],[\"计算当前行和前六行的数据的amount的总和\",{\"1\":{\"26\":1}}],[\"计数前六行和当前行的数据\",{\"1\":{\"26\":1}}],[\"6600\",{\"1\":{\"81\":1}}],[\"66\",{\"1\":{\"78\":1,\"81\":1,\"152\":2}}],[\"67\",{\"1\":{\"78\":1}}],[\"60\",{\"1\":{\"71\":1,\"77\":1,\"78\":1}}],[\"6\",{\"0\":{\"47\":1,\"181\":1,\"380\":1},\"1\":{\"26\":3,\"76\":1,\"148\":2,\"150\":1,\"154\":4,\"157\":6}}],[\"将小数点精度设置为2\",{\"1\":{\"155\":1}}],[\"将字符串str全部转为大写\",{\"1\":{\"75\":1}}],[\"将字符串str全部转为小写\",{\"1\":{\"75\":1}}],[\"将s1\",{\"1\":{\"75\":1}}],[\"将记录进行分组\",{\"1\":{\"70\":1}}],[\"将拥塞窗口减半\",{\"1\":{\"49\":1}}],[\"将每个包的长度固定\",{\"1\":{\"47\":1}}],[\"将接收到数据的信息放到ack包的这个字段\",{\"1\":{\"45\":1}}],[\"将结果集分为n个大致相等的组\",{\"1\":{\"26\":1}}],[\"将返回每个分区内第一个\",{\"1\":{\"26\":2}}],[\"将空值的情况返回一个null值\",{\"1\":{\"18\":1}}],[\"每日增长系数\",{\"1\":{\"155\":1}}],[\"每页显示记录数\",{\"1\":{\"71\":1}}],[\"每页展示十条数据\",{\"1\":{\"71\":2}}],[\"每当收到一个\",{\"1\":{\"49\":1}}],[\"每收到1次ack\",{\"1\":{\"49\":1}}],[\"每段数据都会被标记上一个序列号\",{\"1\":{\"46\":1}}],[\"每个不同的\",{\"1\":{\"26\":2}}],[\"每位教师所教授的科目种类的数量\",{\"0\":{\"24\":1},\"1\":{\"24\":1}}],[\"val1\",{\"1\":{\"78\":2}}],[\"value型的python数据集合\",{\"1\":{\"155\":1}}],[\"value集合\",{\"1\":{\"155\":1}}],[\"value6\",{\"1\":{\"153\":1}}],[\"value6=my\",{\"1\":{\"153\":1}}],[\"value5\",{\"1\":{\"153\":1}}],[\"value5=my\",{\"1\":{\"153\":1}}],[\"value4\",{\"1\":{\"153\":1}}],[\"value4=my\",{\"1\":{\"153\":1}}],[\"value3\",{\"1\":{\"153\":1}}],[\"value3=my\",{\"1\":{\"153\":1}}],[\"value=my\",{\"1\":{\"152\":2,\"153\":2,\"157\":1}}],[\"value2=\",{\"1\":{\"153\":1}}],[\"value2=my\",{\"1\":{\"153\":1}}],[\"value2\",{\"1\":{\"78\":1,\"153\":2}}],[\"value1\",{\"1\":{\"78\":1}}],[\"values\",{\"1\":{\"68\":3,\"78\":1,\"81\":2}}],[\"value\",{\"1\":{\"26\":6,\"68\":2,\"77\":2,\"78\":1,\"152\":5,\"153\":2,\"157\":1}}],[\"varchar\",{\"1\":{\"78\":1,\"80\":1,\"81\":3}}],[\"var\",{\"1\":{\"26\":2,\"28\":1,\"147\":5}}],[\"vip>3\",{\"1\":{\"149\":1,\"155\":1}}],[\"vip=int\",{\"1\":{\"149\":1,\"155\":1}}],[\"visited\",{\"1\":{\"26\":3}}],[\"viewer\",{\"1\":{\"16\":1}}],[\"views\",{\"1\":{\"16\":1}}],[\"易懂\",{\"1\":{\"26\":1}}],[\"易于理解但是不够快\",{\"1\":{\"25\":1}}],[\"简单分页\",{\"0\":{\"115\":1}}],[\"简短\",{\"1\":{\"26\":1}}],[\"简介\",{\"0\":{\"2\":1}}],[\"ping的工作原理\",{\"0\":{\"214\":1,\"215\":1}}],[\"python基础\",{\"0\":{\"389\":1}}],[\"python中使用最频繁的数据类型\",{\"1\":{\"155\":1}}],[\"python的数据类型\",{\"0\":{\"155\":1}}],[\"python\",{\"1\":{\"153\":1}}],[\"plus\",{\"1\":{\"147\":3}}],[\"player\",{\"1\":{\"26\":11}}],[\"price=stock\",{\"1\":{\"155\":1}}],[\"price=100\",{\"1\":{\"155\":1}}],[\"price\",{\"1\":{\"155\":5}}],[\"print\",{\"1\":{\"148\":21,\"149\":17,\"150\":3,\"151\":10,\"152\":11,\"153\":8,\"154\":6,\"155\":51,\"156\":2,\"157\":8}}],[\"println\",{\"1\":{\"28\":1,\"147\":6}}],[\"primary\",{\"1\":{\"80\":2,\"81\":2}}],[\"privileges\",{\"1\":{\"64\":1}}],[\"processstring\",{\"1\":{\"28\":3}}],[\"preceding\",{\"1\":{\"26\":2}}],[\"percent\",{\"1\":{\"26\":1}}],[\"pop\",{\"1\":{\"26\":2,\"148\":1,\"152\":1,\"157\":1}}],[\"packet\",{\"0\":{\"349\":1}}],[\"package\",{\"1\":{\"147\":1}}],[\"param\",{\"1\":{\"151\":1}}],[\"partition\",{\"1\":{\"26\":4}}],[\"panic\",{\"1\":{\"147\":2}}],[\"pad\",{\"1\":{\"75\":2}}],[\"password\",{\"1\":{\"64\":2}}],[\"past\",{\"1\":{\"26\":1}}],[\"patients\",{\"1\":{\"17\":1}}],[\"patient\",{\"1\":{\"17\":2}}],[\"5d\",{\"1\":{\"155\":2}}],[\"500\",{\"1\":{\"151\":1}}],[\"50000\",{\"1\":{\"23\":2}}],[\"50\",{\"1\":{\"81\":2}}],[\"56\",{\"1\":{\"78\":1}}],[\"5\",{\"0\":{\"46\":1,\"180\":1,\"378\":1,\"379\":1},\"1\":{\"71\":2,\"75\":1,\"81\":2,\"148\":4,\"150\":3,\"154\":4,\"155\":1,\"157\":7}}],[\"586\",{\"0\":{\"27\":1},\"1\":{\"27\":1}}],[\"551\",{\"0\":{\"26\":1},\"1\":{\"26\":1}}],[\"返回除法的余数b\",{\"1\":{\"155\":1}}],[\"返回商的整数部分9\",{\"1\":{\"155\":1}}],[\"返回res1\",{\"1\":{\"78\":2}}],[\"返回value1\",{\"1\":{\"78\":1}}],[\"返回起始时间date1和\",{\"1\":{\"77\":1}}],[\"返回一个日期\",{\"1\":{\"77\":1}}],[\"返回当前时间\",{\"1\":{\"77\":1}}],[\"返回当前日期和时间\",{\"1\":{\"77\":1}}],[\"返回当前日期\",{\"1\":{\"77\":1}}],[\"返回当前行及其之前所有行的累积分布\",{\"1\":{\"26\":1}}],[\"返回当前行之前第n行的数据\",{\"1\":{\"26\":1}}],[\"返回当前行之后第n行的数据\",{\"1\":{\"26\":1}}],[\"返回0~1内的随机数\",{\"1\":{\"76\":1}}],[\"返回x\",{\"1\":{\"76\":1}}],[\"返回从字符串str从start位置起的len个长度的字符串\",{\"1\":{\"75\":1}}],[\"返回限定的记录数\",{\"1\":{\"70\":1}}],[\"返回窗口中每行的百分比排名\",{\"1\":{\"26\":1}}],[\"返回窗口定义中指定的排序后最后一行的数据\",{\"1\":{\"26\":1}}],[\"返回每行所属的组号\",{\"1\":{\"26\":1}}],[\"返回第一个大于等于target的索引\",{\"1\":{\"25\":1}}],[\"返回接下来的1行数据\",{\"1\":{\"19\":1}}],[\"够快\",{\"1\":{\"25\":1}}],[\"继续去左边查询第一个元素\",{\"1\":{\"25\":1}}],[\"00有什么区别\",{\"0\":{\"222\":1}}],[\"003032\",{\"1\":{\"155\":1}}],[\"07\",{\"1\":{\"81\":1}}],[\"08\",{\"1\":{\"81\":1}}],[\"03\",{\"1\":{\"81\":1}}],[\"05\",{\"1\":{\"81\":2}}],[\"01234567\",{\"1\":{\"154\":2}}],[\"01\",{\"1\":{\"77\":1,\"81\":2}}],[\"09\",{\"1\":{\"77\":1,\"81\":1}}],[\"0\",{\"0\":{\"34\":1,\"35\":1,\"218\":2,\"219\":2,\"221\":2,\"222\":3},\"1\":{\"25\":2,\"28\":1,\"71\":1,\"75\":1,\"76\":3,\"80\":2,\"147\":5,\"148\":5,\"150\":1,\"151\":1,\"154\":4,\"155\":3}}],[\"记录元素第一次出现的位置\",{\"1\":{\"25\":1}}],[\"rst\",{\"0\":{\"341\":1}}],[\"r\",{\"1\":{\"156\":3}}],[\"rose\",{\"1\":{\"78\":1}}],[\"round\",{\"1\":{\"76\":4}}],[\"row\",{\"1\":{\"26\":4}}],[\"rows\",{\"1\":{\"26\":2}}],[\"rpad\",{\"1\":{\"75\":1}}],[\"rcvd\",{\"1\":{\"53\":1}}],[\"randint\",{\"1\":{\"149\":1,\"155\":1}}],[\"rand\",{\"1\":{\"76\":4}}],[\"range\",{\"1\":{\"28\":1,\"149\":5,\"155\":5}}],[\"rank\",{\"1\":{\"26\":3}}],[\"rune\",{\"1\":{\"28\":1}}],[\"rn\",{\"1\":{\"26\":1}}],[\"right=len\",{\"1\":{\"25\":1}}],[\"right=mid\",{\"1\":{\"25\":4}}],[\"right\",{\"1\":{\"25\":4}}],[\"ringht\",{\"1\":{\"25\":1}}],[\"readline\",{\"1\":{\"156\":1}}],[\"readlines\",{\"1\":{\"156\":1}}],[\"read\",{\"1\":{\"156\":3}}],[\"replace\",{\"1\":{\"153\":1}}],[\"renerse=true\",{\"1\":{\"152\":1}}],[\"remove\",{\"1\":{\"148\":1,\"157\":1}}],[\"references\",{\"1\":{\"81\":5}}],[\"revoke\",{\"1\":{\"64\":1}}],[\"result6\",{\"1\":{\"154\":2}}],[\"result5\",{\"1\":{\"154\":2}}],[\"result4\",{\"1\":{\"154\":2}}],[\"result3\",{\"1\":{\"154\":2}}],[\"result2\",{\"1\":{\"154\":2}}],[\"result1\",{\"1\":{\"154\":2}}],[\"result\",{\"1\":{\"151\":2}}],[\"result=compute\",{\"1\":{\"151\":1}}],[\"response\",{\"1\":{\"147\":5}}],[\"restrict\",{\"1\":{\"81\":1}}],[\"restrict一致\",{\"1\":{\"81\":1}}],[\"restful\",{\"1\":{\"62\":1}}],[\"res1\",{\"1\":{\"78\":2}}],[\"resource\",{\"0\":{\"31\":1}}],[\"res\",{\"1\":{\"25\":6}}],[\"return\",{\"1\":{\"18\":1,\"25\":5,\"28\":2,\"147\":1,\"151\":3}}],[\"returns\",{\"1\":{\"18\":1}}],[\"然后会\",{\"0\":{\"367\":1}}],[\"然后生产http请求消息\",{\"0\":{\"367\":1}}],[\"然后发送方就可以根据接收端和本端窗口大小继续发送数据\",{\"1\":{\"48\":1}}],[\"然后去查询第二次的位置\",{\"1\":{\"25\":1}}],[\"然后返回接下来的\",{\"1\":{\"20\":1}}],[\"具体要先查询第一次出现的位置\",{\"1\":{\"25\":1}}],[\"允许重复的行\",{\"1\":{\"23\":1}}],[\">=60\",{\"1\":{\"78\":1}}],[\">=85\",{\"1\":{\"78\":1}}],[\">=\",{\"1\":{\"70\":1,\"78\":2}}],[\">=target\",{\"1\":{\"25\":1}}],[\">target\",{\"1\":{\"25\":2}}],[\">\",{\"1\":{\"23\":1,\"28\":1,\"70\":2,\"71\":1,\"78\":2,\"80\":1,\"155\":4}}],[\"title\",{\"1\":{\"153\":1}}],[\"time\",{\"0\":{\"60\":1,\"236\":1,\"237\":1,\"238\":1,\"239\":1,\"240\":1,\"267\":1,\"341\":1},\"1\":{\"59\":1,\"60\":1}}],[\"tuple进行切片\",{\"1\":{\"154\":1}}],[\"tuple\",{\"1\":{\"152\":2,\"154\":5,\"155\":1}}],[\"tupel\",{\"1\":{\"150\":2}}],[\"test\",{\"1\":{\"151\":6}}],[\"teacher\",{\"1\":{\"24\":3}}],[\"t2\",{\"1\":{\"150\":3}}],[\"t1\",{\"1\":{\"150\":3}}],[\"tlb\",{\"0\":{\"117\":1}}],[\"type\",{\"1\":{\"77\":1,\"147\":6,\"148\":1,\"151\":3,\"152\":1,\"155\":9}}],[\"traceroute\",{\"0\":{\"217\":1}}],[\"trim\",{\"1\":{\"75\":1}}],[\"true本质上是一个数字记作1\",{\"1\":{\"155\":1}}],[\"true表示真\",{\"1\":{\"155\":1}}],[\"true降序\",{\"1\":{\"152\":1}}],[\"true\",{\"1\":{\"28\":1,\"78\":1,\"148\":1}}],[\"tcp四次挥手可以变成三次吗\",{\"0\":{\"334\":1}}],[\"tcp四次挥手性能的提升\",{\"0\":{\"271\":1}}],[\"tcp断开连接\",{\"0\":{\"328\":1}}],[\"tcpkill\",{\"0\":{\"325\":1}}],[\"tcp连接\",{\"0\":{\"344\":1}}],[\"tcp连接的断开\",{\"0\":{\"327\":1}}],[\"tcp连接的建立\",{\"0\":{\"311\":1,\"312\":1}}],[\"tcp连接会消失吗\",{\"0\":{\"285\":1}}],[\"tcp半连接队列和全连接队列\",{\"0\":{\"283\":1}}],[\"tcp工作在那一层\",{\"0\":{\"276\":1}}],[\"tcp基本认识\",{\"0\":{\"274\":1}}],[\"tcp传输数据的性能提升\",{\"0\":{\"272\":1}}],[\"tcp三次握手的性能提升\",{\"0\":{\"270\":1}}],[\"tcp和ping数据的区别\",{\"0\":{\"220\":1}}],[\"tcp和udp可以同时绑定相同的端口吗\",{\"0\":{\"260\":1,\"261\":1}}],[\"tcp和udp是传输层常见的两种传输协议\",{\"1\":{\"42\":1}}],[\"tcp和udp的区别\",{\"0\":{\"42\":1,\"245\":1,\"247\":1}}],[\"tcp\",{\"0\":{\"206\":1,\"264\":1,\"267\":1,\"282\":1,\"321\":1,\"351\":1,\"393\":1}}],[\"tcp与tls的握手延迟\",{\"0\":{\"184\":1}}],[\"tcp的四次挥手\",{\"0\":{\"329\":1}}],[\"tcp的重传机制\",{\"0\":{\"305\":1,\"306\":1}}],[\"tcp的流量控制\",{\"0\":{\"294\":1}}],[\"tcp的拥塞控制\",{\"0\":{\"288\":1}}],[\"tcp的头格式\",{\"0\":{\"275\":1}}],[\"tcp的基本认识\",{\"0\":{\"273\":1}}],[\"tcp的优化\",{\"0\":{\"268\":1}}],[\"tcp的socket编程\",{\"0\":{\"249\":1}}],[\"tcp的三次握手和四次挥手\",{\"0\":{\"50\":1}}],[\"tcp的特点是\",{\"1\":{\"42\":1}}],[\"tcp时一个面向字节流的协议\",{\"1\":{\"47\":1}}],[\"tcp是如何保证有序的\",{\"0\":{\"46\":1}}],[\"tcp是如何保证可靠的\",{\"0\":{\"44\":1}}],[\"tcp是如何做链接管理的\",{\"0\":{\"43\":1}}],[\"tcp在连接时使用三次握手\",{\"1\":{\"43\":1}}],[\"tom\",{\"1\":{\"78\":1,\"147\":4}}],[\"to\",{\"1\":{\"64\":1}}],[\"tool\",{\"0\":{\"40\":1}}],[\"todo\",{\"1\":{\"26\":1}}],[\"t\",{\"1\":{\"28\":2,\"78\":1,\"147\":11,\"149\":2,\"150\":1,\"155\":2}}],[\"tall<120\",{\"1\":{\"149\":1,\"155\":1}}],[\"tall=int\",{\"1\":{\"149\":1,\"155\":1}}],[\"target+1\",{\"1\":{\"25\":1}}],[\"target\",{\"1\":{\"25\":4}}],[\"table\",{\"1\":{\"78\":1,\"80\":1,\"81\":9}}],[\"table2\",{\"1\":{\"22\":2,\"23\":2}}],[\"table1\",{\"1\":{\"22\":2,\"23\":2}}],[\"then\",{\"1\":{\"23\":3,\"78\":6}}],[\"但元组中的list可以修改\",{\"1\":{\"150\":1}}],[\"但是字典\",{\"1\":{\"152\":1}}],[\"但是超时重传和快速重传都具有一个问题\",{\"1\":{\"45\":1}}],[\"但是排名不会跳过\",{\"1\":{\"26\":1}}],[\"但相对不可靠的数据传输\",{\"1\":{\"42\":1}}],[\"但它不会去除重复的行\",{\"1\":{\"23\":1}}],[\"但不包括重复的行\",{\"1\":{\"22\":1}}],[\"也可以查看变量的数据类型\",{\"1\":{\"155\":1}}],[\"也可以省去as\",{\"1\":{\"70\":1}}],[\"也可能多个小的数据包会被合并成一个大数据包发送\",{\"1\":{\"47\":1}}],[\"也即再次进入拥塞避免状态\",{\"1\":{\"49\":1}}],[\"也用于合并两个或多个查询的结果\",{\"1\":{\"23\":1}}],[\"也是一个整数\",{\"1\":{\"20\":1}}],[\"并发传输\",{\"0\":{\"180\":1}}],[\"并根据入职天数倒序排序\",{\"1\":{\"77\":1}}],[\"并根据序列号进行排序和重新组装\",{\"1\":{\"46\":1}}],[\"并对查询结果按年龄升序排序\",{\"1\":{\"71\":1}}],[\"并获取人数大于三的工作地址\",{\"1\":{\"71\":1}}],[\"并计算年龄平均值\",{\"1\":{\"71\":1}}],[\"并计算总和\",{\"1\":{\"71\":1}}],[\"并跟据本端剩余缓冲区大小通告对方当前能接受数据的缓冲区大小\",{\"1\":{\"48\":1}}],[\"并在tcp连接建立之后开辟出一片缓冲区\",{\"1\":{\"48\":1}}],[\"并且年龄在20\",{\"1\":{\"71\":1}}],[\"并且\",{\"1\":{\"70\":1}}],[\"并且在等最后的确认报文\",{\"1\":{\"60\":1}}],[\"并且在其中客户端还会选择一个isn\",{\"1\":{\"52\":1}}],[\"并且这个报文字段包含客户端收到的服务端的isn\",{\"1\":{\"54\":1}}],[\"并且重发这个包\",{\"1\":{\"45\":1}}],[\"并且结果集中的每行都是唯一的\",{\"1\":{\"22\":1}}],[\"并合并结果集\",{\"1\":{\"22\":1,\"23\":1}}],[\"和网络的负担\",{\"1\":{\"45\":1}}],[\"和\",{\"1\":{\"22\":1,\"23\":1}}],[\"示例\",{\"1\":{\"22\":1,\"23\":1,\"155\":1}}],[\"用了tcp传输数据就一定不会丢包吗\",{\"0\":{\"287\":1}}],[\"用for循环读取每一行\",{\"1\":{\"156\":1}}],[\"用for遍历\",{\"1\":{\"150\":1}}],[\"用三个空格补足\",{\"1\":{\"155\":1}}],[\"用key获取value\",{\"1\":{\"152\":1}}],[\"用while遍历元组\",{\"1\":{\"150\":1}}],[\"用补码的形式保存负数\",{\"0\":{\"138\":1}}],[\"用字符串pad对str的右边进行填充\",{\"1\":{\"75\":1}}],[\"用字符串pad对str的左边进行填充\",{\"1\":{\"75\":1}}],[\"用来让两张表的数据之间建立连接\",{\"1\":{\"80\":1}}],[\"用来查询数据库中表的记录\",{\"1\":{\"70\":1}}],[\"用来对数据库表中的数据进行增删改查\",{\"1\":{\"68\":1}}],[\"用来创建数据库用户\",{\"1\":{\"64\":1}}],[\"用于限制存储在表中的数据\",{\"1\":{\"80\":1}}],[\"用于通知发送方哪些数据被重复接收了\",{\"1\":{\"45\":1}}],[\"用于合并两个或多个查询的结果\",{\"1\":{\"22\":1}}],[\"用户态和内核态\",{\"0\":{\"360\":1}}],[\"用户表\",{\"1\":{\"80\":1}}],[\"用户名\",{\"1\":{\"64\":6}}],[\"用户扫码是如何实现的\",{\"0\":{\"36\":1}}],[\"用户登录\",{\"0\":{\"32\":1,\"33\":1}}],[\"用list的方法查询\",{\"1\":{\"148\":1}}],[\"用limit限制返回一行数据\",{\"1\":{\"27\":1}}],[\"用like查找含有diab1为前缀的conditions\",{\"1\":{\"17\":1}}],[\"用distinct去重\",{\"1\":{\"24\":1}}],[\"按分类统计薪水\",{\"0\":{\"21\":1},\"1\":{\"23\":1}}],[\"2个空格补足宽度\",{\"1\":{\"155\":1}}],[\"2f后\",{\"1\":{\"155\":1}}],[\"2f\",{\"1\":{\"155\":3}}],[\"2=\",{\"1\":{\"155\":1}}],[\"2输出结果\",{\"1\":{\"155\":1}}],[\"23\",{\"1\":{\"71\":1,\"78\":1}}],[\"23岁的员工信息\",{\"1\":{\"71\":1}}],[\"2356\",{\"0\":{\"24\":1},\"1\":{\"24\":1}}],[\"22\",{\"1\":{\"71\":2}}],[\"21\",{\"1\":{\"71\":2}}],[\"2006\",{\"1\":{\"155\":1}}],[\"2004\",{\"1\":{\"81\":2}}],[\"2002\",{\"1\":{\"81\":1}}],[\"2005\",{\"1\":{\"81\":1}}],[\"2000\",{\"1\":{\"81\":2}}],[\"20000\",{\"1\":{\"23\":2,\"81\":1}}],[\"2024\",{\"1\":{\"77\":1}}],[\"2018\",{\"1\":{\"77\":1}}],[\"20\",{\"1\":{\"70\":4,\"71\":1,\"78\":1,\"81\":2,\"151\":2}}],[\"2msl\",{\"0\":{\"236\":1},\"1\":{\"59\":1}}],[\"2状态\",{\"1\":{\"57\":1}}],[\"2\",{\"0\":{\"20\":1,\"35\":1,\"36\":1,\"43\":1,\"53\":1,\"57\":1,\"114\":1,\"172\":1,\"175\":1,\"184\":1,\"186\":1,\"188\":1,\"201\":1,\"208\":1,\"262\":1,\"308\":1,\"368\":1,\"374\":1},\"1\":{\"25\":3,\"45\":1,\"47\":1,\"49\":2,\"64\":2,\"68\":1,\"70\":1,\"71\":1,\"76\":2,\"78\":1,\"81\":4,\"147\":3,\"148\":11,\"149\":2,\"150\":3,\"151\":2,\"152\":1,\"153\":1,\"154\":7,\"155\":25,\"157\":8}}],[\"这是一个\",{\"1\":{\"155\":4}}],[\"这四类元素\",{\"1\":{\"155\":1}}],[\"这就要求该外键允许取null\",{\"1\":{\"81\":1}}],[\"这类sql开发人员操作的比较少\",{\"1\":{\"64\":1}}],[\"这个时候在tcp报文段中\",{\"1\":{\"46\":1}}],[\"这个示例将从\",{\"1\":{\"22\":1,\"23\":1}}],[\"这样如果出现数据丢失\",{\"1\":{\"45\":1}}],[\"这样外层查询在无数据查询的情况下会返回一个null\",{\"1\":{\"18\":1}}],[\"这表示在每个分区内\",{\"1\":{\"26\":2}}],[\"这表示窗口函数将按\",{\"1\":{\"26\":2}}],[\"这种语法用于跳过查询结果的前\",{\"1\":{\"20\":1}}],[\"这种语法用于从查询结果的第\",{\"1\":{\"19\":1}}],[\"这种语法通常用于分页或获取某一个特定位置的记录\",{\"1\":{\"19\":1}}],[\"这里的\",{\"1\":{\"19\":1}}],[\"赋值\",{\"1\":{\"18\":1}}],[\"声明了一个变量\",{\"1\":{\"18\":1}}],[\"子表将外键列设置成一个默认的值\",{\"1\":{\"81\":1}}],[\"子句中使用\",{\"1\":{\"18\":1}}],[\"子查询找到最大的\",{\"1\":{\"18\":1}}],[\"在委托操作系统发送消息时必须提供\",{\"0\":{\"368\":1}}],[\"在time\",{\"0\":{\"338\":1}}],[\"在tcp连接建立完成之后\",{\"1\":{\"49\":1}}],[\"在tcp建立连接的时候\",{\"1\":{\"48\":1}}],[\"在tcp头部加一个sack字段在每次接收完数据之后\",{\"1\":{\"45\":1}}],[\"在集合1里面删除与集合2相同的元素\",{\"1\":{\"157\":1}}],[\"在已有文件后面追加写\",{\"1\":{\"156\":1}}],[\"在查就没有数据了\",{\"1\":{\"156\":1}}],[\"在执行的时候要把上面的读取注释掉\",{\"1\":{\"156\":1}}],[\"在原有的内容该后面追加\",{\"1\":{\"156\":1}}],[\"在字符串内\",{\"1\":{\"155\":2}}],[\"在函数内部定义的是局部变量\",{\"1\":{\"151\":1}}],[\"在函数外面定义的是全局变量\",{\"1\":{\"151\":1}}],[\"在0到\",{\"1\":{\"149\":1,\"155\":1}}],[\"在指定的下标处插入某个元素\",{\"1\":{\"148\":1}}],[\"在python中一个list可以保存多个数据类型不同的元素\",{\"1\":{\"148\":1}}],[\"在in之后的列表中的值\",{\"1\":{\"70\":1}}],[\"在某个范围之内\",{\"1\":{\"70\":1}}],[\"在连接建立之后\",{\"1\":{\"48\":1}}],[\"在头部保存当前整个消息的长度\",{\"1\":{\"47\":1}}],[\"在发送之前\",{\"0\":{\"368\":1}}],[\"在发送数据的同时\",{\"1\":{\"47\":1}}],[\"在发送方接受到这些数据包的时候\",{\"1\":{\"46\":1}}],[\"在发送方\",{\"1\":{\"46\":1}}],[\"在传输层\",{\"1\":{\"47\":1}}],[\"在当使用tcp协议时\",{\"1\":{\"47\":1}}],[\"在一端\",{\"1\":{\"45\":1}}],[\"在断开时使用四次握手\",{\"1\":{\"43\":1}}],[\"在排序数组中查找元素的第一个位置和最后一个位置\",{\"0\":{\"25\":1},\"1\":{\"25\":1}}],[\"在\",{\"0\":{\"341\":1},\"1\":{\"18\":1}}],[\"e类\",{\"0\":{\"228\":1}}],[\"elif\",{\"1\":{\"149\":1,\"155\":1}}],[\"else\",{\"1\":{\"25\":7,\"28\":1,\"78\":4,\"149\":2,\"155\":2}}],[\"extend\",{\"1\":{\"148\":1}}],[\"expr\",{\"1\":{\"77\":1,\"78\":1}}],[\"explain\",{\"0\":{\"72\":1,\"73\":1}}],[\"err\",{\"1\":{\"147\":6}}],[\"error\",{\"1\":{\"78\":1}}],[\"emp\",{\"1\":{\"78\":1,\"81\":9}}],[\"employee\",{\"1\":{\"18\":5}}],[\"encoding=\",{\"1\":{\"156\":4}}],[\"encoding\",{\"1\":{\"147\":1,\"156\":2}}],[\"entrydate\",{\"1\":{\"81\":2}}],[\"entrydates\",{\"1\":{\"77\":2}}],[\"english\",{\"1\":{\"78\":2}}],[\"end=\",{\"1\":{\"149\":3,\"155\":3}}],[\"end\",{\"1\":{\"18\":1,\"23\":3,\"78\":4}}],[\"event\",{\"1\":{\"26\":11}}],[\"msg\",{\"1\":{\"147\":6}}],[\"my\",{\"0\":{\"386\":1},\"1\":{\"148\":36,\"151\":1,\"152\":11,\"153\":4,\"154\":12,\"157\":6}}],[\"mymap\",{\"1\":{\"147\":4}}],[\"myslice\",{\"1\":{\"147\":4}}],[\"mysql中是limit\",{\"1\":{\"71\":1}}],[\"mysql\",{\"1\":{\"64\":3}}],[\"myprint\",{\"1\":{\"147\":1}}],[\"mesi\",{\"0\":{\"103\":1}}],[\"month\",{\"1\":{\"77\":2}}],[\"model\",{\"1\":{\"156\":2}}],[\"mod\",{\"1\":{\"76\":3}}],[\"mac\",{\"0\":{\"378\":1}}],[\"map2\",{\"1\":{\"152\":1}}],[\"map1\",{\"1\":{\"152\":2}}],[\"map\",{\"1\":{\"147\":1,\"152\":3}}],[\"map的key只能是基本数据类型\",{\"1\":{\"147\":1}}],[\"marshal\",{\"1\":{\"147\":2}}],[\"managerid\",{\"1\":{\"81\":2}}],[\"math\",{\"1\":{\"78\":2}}],[\"main\",{\"1\":{\"28\":1,\"64\":2,\"147\":2}}],[\"max\",{\"1\":{\"18\":2,\"26\":1,\"71\":2}}],[\"mian\",{\"1\":{\"64\":2}}],[\"min\",{\"1\":{\"26\":2,\"71\":2}}],[\"mid+1\",{\"1\":{\"25\":1}}],[\"mid==len\",{\"1\":{\"25\":1}}],[\"mid==0\",{\"1\":{\"25\":1}}],[\"mid\",{\"1\":{\"25\":10}}],[\"m=n\",{\"1\":{\"18\":1}}],[\"m\",{\"1\":{\"18\":4,\"19\":2,\"155\":2}}],[\"backlog\",{\"0\":{\"251\":1}}],[\"backspacecompare\",{\"1\":{\"28\":2}}],[\"b为10的20次方\",{\"1\":{\"155\":1}}],[\"b输出结果200\",{\"1\":{\"155\":1}}],[\"b输出结果\",{\"1\":{\"155\":1}}],[\"b\",{\"0\":{\"227\":1},\"1\":{\"155\":2}}],[\"b=int\",{\"1\":{\"155\":1}}],[\"b=\",{\"1\":{\"150\":1}}],[\"b=list\",{\"1\":{\"148\":1}}],[\"brand\",{\"1\":{\"149\":1,\"155\":1}}],[\"break\",{\"1\":{\"25\":2}}],[\"body1\",{\"1\":{\"147\":2}}],[\"body\",{\"1\":{\"147\":2}}],[\"bob\",{\"1\":{\"68\":1}}],[\"bool\",{\"1\":{\"28\":1,\"155\":2}}],[\"between\",{\"1\":{\"23\":1,\"26\":2,\"70\":2}}],[\"begin\",{\"1\":{\"18\":1}}],[\"byte\",{\"1\":{\"147\":2}}],[\"by子句定义的顺序\",{\"1\":{\"26\":1}}],[\"by\",{\"1\":{\"16\":2,\"18\":3,\"24\":1,\"26\":12,\"27\":2,\"64\":5,\"70\":2,\"71\":10,\"77\":1}}],[\"go基础\",{\"0\":{\"388\":1}}],[\"global\",{\"1\":{\"151\":1}}],[\"gender=\",{\"1\":{\"151\":5}}],[\"gender\",{\"1\":{\"80\":1,\"151\":5}}],[\"get和post的方法都是安全和幂等的吗\",{\"0\":{\"165\":1}}],[\"get与post的区别\",{\"0\":{\"164\":1}}],[\"get与post请求\",{\"0\":{\"163\":1}}],[\"getindex\",{\"1\":{\"25\":1}}],[\"getnthhighestsalary\",{\"1\":{\"18\":2}}],[\"growth\",{\"1\":{\"155\":5}}],[\"growth=1\",{\"1\":{\"155\":1}}],[\"group\",{\"1\":{\"16\":1,\"24\":1,\"26\":1,\"27\":1,\"70\":1,\"71\":5}}],[\"grant\",{\"1\":{\"64\":1}}],[\"grants\",{\"1\":{\"64\":1}}],[\"c类\",{\"0\":{\"227\":1}}],[\"close\",{\"0\":{\"235\":1,\"241\":1,\"253\":1},\"1\":{\"156\":4}}],[\"clear\",{\"1\":{\"148\":1,\"152\":1,\"157\":1}}],[\"c=float\",{\"1\":{\"155\":1}}],[\"c=tuple\",{\"1\":{\"150\":1}}],[\"cpu如何执行任务的\",{\"0\":{\"89\":1}}],[\"cpu\",{\"0\":{\"82\":1,\"84\":1,\"87\":1,\"92\":1,\"95\":1,\"98\":1}}],[\"cheng\",{\"1\":{\"155\":1}}],[\"check\",{\"1\":{\"80\":2}}],[\"chinese\",{\"1\":{\"78\":2}}],[\"charlie\",{\"1\":{\"68\":1}}],[\"char\",{\"1\":{\"28\":3,\"80\":2}}],[\"ceil\",{\"1\":{\"76\":3}}],[\"cwnd\",{\"1\":{\"49\":5}}],[\"cross\",{\"0\":{\"31\":1}}],[\"create\",{\"1\":{\"18\":1,\"64\":4,\"78\":1,\"80\":1,\"81\":3}}],[\"c\",{\"1\":{\"28\":2,\"155\":1}}],[\"cup的缓存一致性\",{\"0\":{\"97\":1}}],[\"cup是如何执行任务的\",{\"0\":{\"88\":1}}],[\"cup\",{\"0\":{\"83\":1}}],[\"curtime\",{\"1\":{\"77\":2}}],[\"curdate\",{\"1\":{\"77\":3}}],[\"current\",{\"1\":{\"26\":2}}],[\"customer\",{\"1\":{\"27\":2}}],[\"cume\",{\"1\":{\"26\":1}}],[\"cnt\",{\"1\":{\"24\":1}}],[\"cache\",{\"0\":{\"82\":1,\"83\":1,\"90\":1,\"98\":1}}],[\"cascade\",{\"1\":{\"81\":5}}],[\"case\",{\"1\":{\"23\":3,\"78\":4}}],[\"category\",{\"1\":{\"23\":3}}],[\"cookies方案为什么不直接取代半连接队列\",{\"0\":{\"259\":1}}],[\"complex\",{\"1\":{\"155\":2}}],[\"compute\",{\"1\":{\"151\":6}}],[\"comment\",{\"1\":{\"78\":6,\"80\":6,\"81\":12}}],[\"cord\",{\"1\":{\"147\":4}}],[\"cors\",{\"0\":{\"31\":1}}],[\"cors策略\",{\"0\":{\"30\":1}}],[\"code=\",{\"1\":{\"155\":1}}],[\"code\",{\"1\":{\"147\":6,\"155\":1}}],[\"continue\",{\"1\":{\"149\":1,\"155\":1}}],[\"const\",{\"1\":{\"149\":1,\"155\":1}}],[\"const=const+1\",{\"1\":{\"149\":1,\"155\":1}}],[\"const=0\",{\"1\":{\"149\":1,\"155\":1}}],[\"constraint\",{\"1\":{\"81\":5}}],[\"concat\",{\"1\":{\"75\":1}}],[\"conditions\",{\"1\":{\"17\":3}}],[\"column\",{\"1\":{\"22\":2,\"23\":2,\"26\":2}}],[\"count+=1\",{\"1\":{\"149\":1,\"155\":1}}],[\"count=0\",{\"1\":{\"149\":1,\"155\":1}}],[\"count\",{\"1\":{\"20\":2,\"23\":6,\"24\":1,\"26\":2,\"27\":1,\"71\":7,\"148\":1,\"149\":1,\"150\":1,\"151\":3,\"153\":2,\"155\":1}}],[\"ip协议还可以\",{\"0\":{\"364\":1}}],[\"ip协议的寻址作用\",{\"0\":{\"363\":1}}],[\"ip协议的相关技术\",{\"0\":{\"209\":1}}],[\"ipv6的首部改进\",{\"0\":{\"234\":1}}],[\"ipv6\",{\"0\":{\"233\":1}}],[\"ip分片与重组\",{\"0\":{\"232\":1}}],[\"ip\",{\"0\":{\"230\":2,\"231\":1,\"377\":1,\"392\":1}}],[\"ip的分类\",{\"0\":{\"226\":1}}],[\"ip的基础知识\",{\"0\":{\"225\":1}}],[\"ip基本认识\",{\"0\":{\"224\":1}}],[\"icmp\",{\"0\":{\"213\":1}}],[\"i+1\",{\"1\":{\"149\":1,\"155\":1}}],[\"i+=1\",{\"1\":{\"149\":2,\"155\":2}}],[\"i<=9\",{\"1\":{\"149\":1,\"155\":1}}],[\"i<10\",{\"1\":{\"149\":1,\"155\":1}}],[\"i=0\",{\"1\":{\"149\":2,\"155\":2}}],[\"i\",{\"1\":{\"148\":2,\"149\":14,\"150\":2,\"151\":1,\"155\":14,\"157\":2}}],[\"itcast\",{\"1\":{\"149\":1,\"155\":1}}],[\"itheima\",{\"1\":{\"149\":1,\"155\":1}}],[\"it\",{\"1\":{\"148\":3,\"150\":1}}],[\"import\",{\"1\":{\"147\":1}}],[\"is\",{\"1\":{\"68\":2,\"70\":2,\"149\":1,\"155\":1}}],[\"if\",{\"1\":{\"25\":10,\"28\":2,\"78\":2,\"147\":2,\"149\":4,\"155\":4}}],[\"ifnull\",{\"1\":{\"18\":2,\"78\":2}}],[\"info\",{\"1\":{\"151\":12}}],[\"input\",{\"1\":{\"149\":2,\"155\":2}}],[\"input语句会将所有输入的数据当成字符串\",{\"1\":{\"149\":1,\"155\":1}}],[\"index+=1\",{\"1\":{\"150\":1}}],[\"index=0\",{\"1\":{\"150\":1}}],[\"index=my\",{\"1\":{\"148\":1}}],[\"index<len\",{\"1\":{\"148\":1,\"150\":1}}],[\"index\",{\"1\":{\"148\":4,\"150\":1,\"153\":1}}],[\"innodb不支持\",{\"1\":{\"81\":1}}],[\"increment\",{\"1\":{\"80\":1,\"81\":2}}],[\"income\",{\"1\":{\"23\":3}}],[\"in\",{\"0\":{\"264\":1},\"1\":{\"70\":2,\"71\":1,\"148\":1,\"149\":6,\"150\":1,\"151\":1,\"152\":2,\"155\":6,\"156\":2,\"157\":1}}],[\"insert\",{\"1\":{\"64\":1,\"68\":7,\"78\":1,\"81\":2,\"148\":1}}],[\"int64\",{\"1\":{\"147\":1}}],[\"interface\",{\"1\":{\"147\":1}}],[\"interval\",{\"1\":{\"77\":4}}],[\"into\",{\"1\":{\"68\":7,\"78\":1,\"81\":2}}],[\"int\",{\"1\":{\"18\":4,\"25\":12,\"78\":4,\"80\":2,\"81\":6,\"147\":9,\"155\":3}}],[\"identified\",{\"1\":{\"64\":5}}],[\"id\",{\"1\":{\"16\":6,\"17\":1,\"24\":3,\"26\":11,\"78\":4,\"80\":1,\"81\":14}}],[\"nmksadsi\",{\"1\":{\"151\":1}}],[\"ni\",{\"1\":{\"150\":1,\"153\":2}}],[\"nil\",{\"1\":{\"147\":2}}],[\"n2\",{\"1\":{\"147\":2}}],[\"n1\",{\"1\":{\"147\":2}}],[\"none\",{\"1\":{\"151\":1}}],[\"none在if中使false\",{\"1\":{\"151\":1}}],[\"no\",{\"1\":{\"81\":1}}],[\"now\",{\"1\":{\"77\":6}}],[\"not\",{\"1\":{\"70\":2,\"80\":2,\"81\":2,\"383\":1}}],[\"nat\",{\"0\":{\"212\":1}}],[\"native\",{\"1\":{\"64\":2}}],[\"name=\",{\"1\":{\"68\":1,\"149\":2,\"151\":3,\"155\":6}}],[\"name\",{\"1\":{\"17\":1,\"22\":2,\"23\":2,\"68\":1,\"78\":2,\"80\":1,\"81\":4,\"147\":10,\"149\":2,\"151\":5,\"155\":21,\"156\":2}}],[\"ntile\",{\"1\":{\"26\":1}}],[\"num3\",{\"1\":{\"151\":1}}],[\"num3=my\",{\"1\":{\"151\":1}}],[\"num1=my\",{\"1\":{\"151\":1}}],[\"num1\",{\"1\":{\"149\":1,\"151\":1,\"155\":4}}],[\"num=101\",{\"1\":{\"149\":1,\"155\":1}}],[\"num=random\",{\"1\":{\"149\":1,\"155\":1}}],[\"num=my\",{\"1\":{\"148\":1}}],[\"num2\",{\"1\":{\"148\":1,\"149\":1,\"151\":1,\"155\":4}}],[\"num2=my\",{\"1\":{\"148\":1,\"151\":1}}],[\"num\",{\"1\":{\"148\":1,\"149\":3,\"151\":4,\"155\":29}}],[\"number\",{\"1\":{\"26\":2,\"27\":2,\"147\":2,\"155\":1}}],[\"nums\",{\"1\":{\"25\":19}}],[\"null\",{\"1\":{\"18\":3,\"68\":4,\"70\":2,\"80\":2,\"81\":4}}],[\"n\",{\"1\":{\"18\":2,\"25\":1,\"26\":1,\"75\":2,\"155\":2}}],[\"时候参数\",{\"0\":{\"251\":1}}],[\"时间值加上一个时间间隔expr后的时间值\",{\"1\":{\"77\":1}}],[\"时的数据都已收到\",{\"1\":{\"49\":1}}],[\"时就将前面的字符顶出栈\",{\"1\":{\"28\":1}}],[\"时\",{\"1\":{\"18\":2,\"22\":1,\"49\":1}}],[\"使用转义字符\",{\"1\":{\"155\":1}}],[\"使用单引号进行包围\",{\"1\":{\"155\":1}}],[\"使用str\",{\"1\":{\"152\":1}}],[\"使用list\",{\"1\":{\"152\":1}}],[\"使用global关键字\",{\"1\":{\"151\":1}}],[\"使用for循环99乘法表\",{\"1\":{\"149\":1,\"155\":1}}],[\"使用for遍历list\",{\"1\":{\"148\":1}}],[\"使用while遍历list\",{\"1\":{\"148\":1}}],[\"使用逗号分隔\",{\"1\":{\"64\":1}}],[\"使用特殊符号标识边界\",{\"1\":{\"47\":1}}],[\"使用二分查找可以提供o\",{\"1\":{\"25\":1}}],[\"使用ifnull\",{\"1\":{\"18\":1}}],[\"使用\",{\"1\":{\"18\":1,\"22\":1,\"23\":2,\"64\":1}}],[\"open可以在执行之后自动对调用文件进行一个关闭\",{\"1\":{\"156\":1}}],[\"open\",{\"1\":{\"156\":5}}],[\"of\",{\"1\":{\"149\":1,\"155\":1}}],[\"offset\",{\"1\":{\"18\":6,\"20\":3,\"70\":1}}],[\"ok\",{\"1\":{\"78\":2}}],[\"oauth\",{\"0\":{\"35\":1}}],[\"on\",{\"1\":{\"26\":3,\"64\":2,\"81\":4}}],[\"over\",{\"1\":{\"26\":5}}],[\"origin\",{\"0\":{\"31\":1}}],[\"or\",{\"1\":{\"17\":1,\"70\":3}}],[\"orders\",{\"1\":{\"27\":1}}],[\"order\",{\"1\":{\"16\":1,\"18\":3,\"26\":7,\"27\":1,\"70\":1,\"71\":5,\"77\":1}}],[\"dns服务器\",{\"0\":{\"369\":1}}],[\"dnsajknd\",{\"1\":{\"151\":1}}],[\"dhcp\",{\"0\":{\"211\":1}}],[\"d\",{\"1\":{\"155\":2}}],[\"dbau\",{\"1\":{\"151\":1}}],[\"dql数据查询语言\",{\"1\":{\"70\":1}}],[\"dql\",{\"0\":{\"70\":1}}],[\"dml数据库操作语言\",{\"1\":{\"68\":1}}],[\"dml\",{\"0\":{\"68\":1}}],[\"ddl\",{\"0\":{\"66\":1}}],[\"drop\",{\"1\":{\"64\":3,\"81\":2}}],[\"dcl数据控制语言\",{\"1\":{\"64\":1}}],[\"dcl\",{\"0\":{\"64\":1}}],[\"duplicated\",{\"1\":{\"49\":1}}],[\"duplicate\",{\"0\":{\"310\":1},\"1\":{\"45\":1}}],[\"dasij\",{\"1\":{\"151\":1}}],[\"day=7\",{\"1\":{\"155\":1}}],[\"day\",{\"1\":{\"77\":3,\"155\":2}}],[\"days\",{\"1\":{\"26\":2}}],[\"data的长度\",{\"1\":{\"151\":1}}],[\"data\",{\"1\":{\"147\":8,\"151\":3}}],[\"database\",{\"1\":{\"64\":1}}],[\"date2\",{\"1\":{\"77\":1}}],[\"date1\",{\"1\":{\"77\":1}}],[\"datediff\",{\"1\":{\"77\":3}}],[\"date\",{\"1\":{\"26\":11,\"77\":10,\"81\":1}}],[\"def\",{\"1\":{\"148\":2,\"151\":9}}],[\"default\",{\"1\":{\"78\":3,\"80\":2,\"81\":1}}],[\"del\",{\"1\":{\"148\":1}}],[\"delete\",{\"1\":{\"64\":1,\"68\":2,\"81\":2}}],[\"dept\",{\"1\":{\"81\":12}}],[\"de\",{\"1\":{\"77\":1}}],[\"dense\",{\"1\":{\"26\":1}}],[\"declare\",{\"1\":{\"18\":2}}],[\"desc\",{\"1\":{\"18\":3,\"27\":1,\"71\":3}}],[\"difference\",{\"1\":{\"157\":2}}],[\"dictionary\",{\"1\":{\"155\":1}}],[\"dict\",{\"1\":{\"152\":15}}],[\"dias\",{\"1\":{\"151\":1}}],[\"diab1\",{\"1\":{\"17\":2}}],[\"dist\",{\"1\":{\"26\":1}}],[\"distinct\",{\"1\":{\"18\":3,\"24\":1,\"26\":1,\"70\":3}}],[\"<class\",{\"1\":{\"155\":4}}],[\"<>\",{\"1\":{\"70\":1}}],[\"<=\",{\"1\":{\"70\":1,\"80\":1}}],[\"<target\",{\"1\":{\"25\":3}}],[\"<\",{\"1\":{\"18\":1,\"23\":1,\"70\":2,\"71\":2,\"149\":1,\"155\":1}}],[\"syn非法\",{\"0\":{\"340\":1}}],[\"syn合法\",{\"0\":{\"339\":1}}],[\"syn报文在什么情况下会被丢弃\",{\"0\":{\"284\":1}}],[\"syn延时和泛洪攻击\",{\"0\":{\"242\":1}}],[\"split\",{\"1\":{\"153\":1}}],[\"spilt分割字符串\",{\"1\":{\"153\":1}}],[\"sorted\",{\"1\":{\"152\":1}}],[\"sorted给数据容器排序\",{\"1\":{\"152\":1}}],[\"s次循环\",{\"1\":{\"149\":1,\"155\":1}}],[\"score\",{\"1\":{\"78\":2,\"152\":4}}],[\"sn拼接成一个字符串\",{\"1\":{\"75\":1}}],[\"sn\",{\"1\":{\"75\":1}}],[\"s2\",{\"1\":{\"75\":2}}],[\"s1\",{\"1\":{\"75\":1}}],[\"sql\",{\"0\":{\"386\":1}}],[\"sql的约束\",{\"0\":{\"79\":1}}],[\"sql的dql\",{\"0\":{\"69\":1}}],[\"sql的dml\",{\"0\":{\"67\":1}}],[\"sql的ddl\",{\"0\":{\"65\":1}}],[\"sql的dcl\",{\"0\":{\"63\":1}}],[\"sql中的函数\",{\"0\":{\"74\":1}}],[\"sha\",{\"1\":{\"157\":1}}],[\"sharing\",{\"0\":{\"31\":1}}],[\"show\",{\"1\":{\"64\":1}}],[\"ssthresh\",{\"1\":{\"49\":2}}],[\"stock\",{\"1\":{\"155\":11}}],[\"studey\",{\"1\":{\"153\":1}}],[\"stud\",{\"1\":{\"152\":2}}],[\"step\",{\"1\":{\"149\":1,\"155\":1}}],[\"status\",{\"1\":{\"80\":1}}],[\"start\",{\"1\":{\"75\":1}}],[\"stack\",{\"1\":{\"28\":8}}],[\"strip\",{\"1\":{\"153\":2}}],[\"strip去除前后的空格\",{\"1\":{\"153\":1}}],[\"string\",{\"1\":{\"28\":5,\"147\":10,\"153\":2,\"155\":2}}],[\"str=\",{\"1\":{\"153\":2}}],[\"str3\",{\"1\":{\"151\":1}}],[\"str3=\",{\"1\":{\"151\":1}}],[\"str2\",{\"1\":{\"151\":1}}],[\"str2=\",{\"1\":{\"151\":1}}],[\"str1\",{\"1\":{\"151\":1}}],[\"str1=\",{\"1\":{\"151\":1}}],[\"struct\",{\"1\":{\"147\":3}}],[\"str\",{\"1\":{\"75\":6,\"153\":7,\"154\":5,\"155\":2}}],[\"stddev\",{\"1\":{\"26\":2}}],[\"sack方法\",{\"0\":{\"309\":1}}],[\"sack\",{\"0\":{\"310\":1},\"1\":{\"45\":3}}],[\"samp\",{\"1\":{\"26\":2}}],[\"salary\",{\"1\":{\"18\":9,\"23\":3,\"81\":2}}],[\"sub\",{\"1\":{\"77\":2}}],[\"substring\",{\"1\":{\"75\":1}}],[\"subject\",{\"1\":{\"24\":1}}],[\"sum\",{\"1\":{\"26\":3,\"71\":2}}],[\"s\",{\"1\":{\"22\":2,\"23\":2,\"28\":4,\"149\":2,\"155\":6}}],[\"sent状态\",{\"1\":{\"52\":1,\"53\":1}}],[\"second\",{\"1\":{\"25\":2}}],[\"secondhighestsalary\",{\"1\":{\"18\":3}}],[\"searchrange\",{\"1\":{\"25\":2}}],[\"set1\",{\"1\":{\"157\":4}}],[\"set1=\",{\"1\":{\"157\":3}}],[\"set3\",{\"1\":{\"157\":2}}],[\"set3=set1\",{\"1\":{\"157\":2}}],[\"set2\",{\"1\":{\"157\":3}}],[\"set2=\",{\"1\":{\"157\":2}}],[\"setn\",{\"1\":{\"157\":1}}],[\"set\",{\"1\":{\"18\":2,\"68\":1,\"75\":1,\"81\":2,\"152\":2,\"155\":3,\"157\":8}}],[\"select\",{\"1\":{\"16\":1,\"17\":1,\"18\":8,\"22\":1,\"23\":5,\"24\":1,\"26\":2,\"27\":1,\"64\":2,\"70\":15,\"71\":22,\"76\":6,\"77\":10,\"78\":4}}],[\"第\",{\"1\":{\"149\":1,\"155\":1}}],[\"第一个减第二个时间\",{\"1\":{\"77\":1}}],[\"第一点\",{\"1\":{\"60\":1}}],[\"第一次挥手丢失\",{\"0\":{\"330\":1}}],[\"第一次挥手\",{\"0\":{\"56\":1}}],[\"第一次握手之后\",{\"1\":{\"52\":1}}],[\"第一次握手\",{\"0\":{\"52\":1,\"373\":1}}],[\"第四次挥手丢失\",{\"0\":{\"333\":1}}],[\"第四次挥手\",{\"0\":{\"59\":1}}],[\"第三次挥手丢失\",{\"0\":{\"332\":1}}],[\"第三次挥手\",{\"0\":{\"58\":1}}],[\"第三次握手丢失\",{\"0\":{\"319\":1}}],[\"第三次握手之后\",{\"1\":{\"54\":1}}],[\"第三次握手\",{\"0\":{\"54\":1,\"375\":1}}],[\"第二个read将会从第一个read后面继续查询\",{\"1\":{\"156\":1}}],[\"第二点\",{\"1\":{\"60\":1}}],[\"第二次挥手丢失\",{\"0\":{\"331\":1}}],[\"第二次挥手\",{\"0\":{\"57\":1}}],[\"第二次握手丢失\",{\"0\":{\"318\":1}}],[\"第二次握手之后\",{\"1\":{\"53\":1}}],[\"第二次握手\",{\"0\":{\"53\":1,\"374\":1}}],[\"第二高的薪水\",{\"1\":{\"18\":1}}],[\"第n高的薪水\",{\"1\":{\"18\":1}}],[\"第n高的数据\",{\"0\":{\"18\":1}}],[\"l\",{\"1\":{\"157\":1}}],[\"l=\",{\"1\":{\"157\":1}}],[\"lpad\",{\"1\":{\"75\":2,\"76\":1}}],[\"lambda\",{\"1\":{\"151\":2}}],[\"last\",{\"1\":{\"26\":1}}],[\"lag\",{\"1\":{\"26\":1}}],[\"len\",{\"1\":{\"28\":2,\"75\":1,\"148\":1,\"150\":1,\"151\":4,\"152\":1,\"153\":2,\"157\":1}}],[\"lead\",{\"1\":{\"26\":1}}],[\"left<right\",{\"1\":{\"25\":1}}],[\"left<=right\",{\"1\":{\"25\":2}}],[\"left=right\",{\"1\":{\"25\":1}}],[\"left=mid+1\",{\"1\":{\"25\":4}}],[\"left\",{\"1\":{\"25\":6}}],[\"leetcode\",{\"0\":{\"29\":1},\"1\":{\"16\":1,\"17\":1,\"18\":1,\"23\":1,\"24\":1,\"25\":1,\"26\":1,\"27\":1,\"28\":1}}],[\"localhost\",{\"1\":{\"64\":2}}],[\"login\",{\"1\":{\"26\":2}}],[\"log\",{\"1\":{\"25\":1}}],[\"lower\",{\"1\":{\"75\":1}}],[\"low\",{\"1\":{\"23\":1}}],[\"line\",{\"1\":{\"156\":4}}],[\"lines=f\",{\"1\":{\"156\":1}}],[\"linux内存布局\",{\"0\":{\"119\":1}}],[\"listen\",{\"0\":{\"251\":1}}],[\"list2\",{\"1\":{\"148\":5}}],[\"list2=\",{\"1\":{\"148\":1}}],[\"list=\",{\"1\":{\"148\":1,\"153\":1}}],[\"list\",{\"0\":{\"148\":1},\"1\":{\"148\":37,\"153\":1,\"154\":5,\"155\":1}}],[\"limit\",{\"1\":{\"18\":5,\"27\":1,\"70\":1,\"71\":4}}],[\"like\",{\"1\":{\"17\":2,\"70\":2,\"71\":1}}],[\"患有某种疾病的患者\",{\"0\":{\"17\":1},\"1\":{\"17\":1}}],[\"1和localhost和0\",{\"0\":{\"222\":1}}],[\"1吗\",{\"0\":{\"218\":1}}],[\"1d\",{\"1\":{\"155\":1}}],[\"1+1\",{\"1\":{\"155\":1}}],[\"14复数\",{\"1\":{\"155\":1}}],[\"14\",{\"1\":{\"155\":1}}],[\"13\",{\"1\":{\"155\":2}}],[\"132\",{\"1\":{\"151\":1}}],[\"19\",{\"1\":{\"81\":1,\"155\":1}}],[\"1907\",{\"0\":{\"21\":1},\"1\":{\"23\":1}}],[\"16版本之后\",{\"1\":{\"80\":1}}],[\"127\",{\"0\":{\"222\":1}}],[\"123\",{\"1\":{\"155\":1}}],[\"1234\",{\"1\":{\"64\":1}}],[\"123456\",{\"1\":{\"64\":2}}],[\"12500\",{\"1\":{\"81\":1}}],[\"120\",{\"1\":{\"80\":1}}],[\"12\",{\"1\":{\"77\":1,\"81\":2,\"147\":1,\"148\":1,\"155\":2}}],[\"1内的随机数\",{\"1\":{\"76\":1}}],[\"1号员工的工号应该为00001\",{\"1\":{\"75\":1}}],[\"18\",{\"1\":{\"70\":2,\"77\":1,\"147\":4,\"149\":2,\"155\":2}}],[\"15\",{\"1\":{\"70\":2}}],[\"1527\",{\"0\":{\"17\":1},\"1\":{\"17\":1}}],[\"11000\",{\"1\":{\"81\":1}}],[\"11\",{\"0\":{\"61\":1},\"1\":{\"81\":1,\"155\":7}}],[\"1148\",{\"0\":{\"16\":1},\"1\":{\"16\":1}}],[\"10浮点数\",{\"1\":{\"155\":1}}],[\"100\",{\"1\":{\"151\":1}}],[\"100000000000000000000\",{\"1\":{\"155\":1}}],[\"1000000\",{\"1\":{\"76\":1}}],[\"10内的随机数\",{\"1\":{\"149\":1,\"155\":1}}],[\"10580\",{\"1\":{\"81\":1}}],[\"10\",{\"0\":{\"60\":1},\"1\":{\"71\":4,\"80\":1,\"81\":1,\"149\":2,\"155\":4,\"156\":1}}],[\"1状态\",{\"1\":{\"56\":1}}],[\"177\",{\"1\":{\"18\":1}}],[\"176\",{\"1\":{\"18\":1}}],[\"176`177\",{\"0\":{\"18\":1}}],[\"1\",{\"0\":{\"19\":1,\"34\":1,\"42\":1,\"52\":1,\"56\":1,\"108\":1,\"111\":2,\"114\":1,\"118\":1,\"171\":1,\"174\":1,\"175\":1,\"182\":1,\"183\":1,\"187\":1,\"192\":1,\"200\":1,\"207\":1,\"219\":1,\"221\":1,\"261\":1,\"307\":1,\"367\":1,\"373\":1},\"1\":{\"18\":9,\"23\":3,\"25\":13,\"27\":1,\"28\":1,\"45\":1,\"47\":1,\"49\":3,\"64\":2,\"70\":1,\"71\":3,\"76\":3,\"78\":1,\"80\":3,\"81\":7,\"147\":3,\"148\":15,\"149\":7,\"150\":3,\"151\":3,\"152\":1,\"154\":10,\"155\":17,\"157\":6}}],[\"=getindex\",{\"1\":{\"25\":2}}],[\"==0\",{\"1\":{\"149\":1,\"155\":1}}],[\"==\",{\"1\":{\"25\":1,\"28\":2,\"149\":1,\"155\":1}}],[\"=mid\",{\"1\":{\"25\":2}}],[\"=target\",{\"1\":{\"25\":3}}],[\"=left+\",{\"1\":{\"25\":3}}],[\"=len\",{\"1\":{\"25\":2}}],[\"=0\",{\"1\":{\"25\":2}}],[\"=\",{\"1\":{\"16\":1,\"18\":1,\"25\":1,\"28\":3,\"49\":1,\"68\":2,\"70\":2,\"71\":2,\"75\":1,\"147\":10,\"148\":6,\"149\":2,\"150\":3,\"151\":4,\"152\":9,\"154\":12,\"155\":33,\"156\":3,\"157\":2}}],[\"found\",{\"1\":{\"383\":1}}],[\"format\",{\"1\":{\"151\":2,\"155\":1}}],[\"for循环\",{\"1\":{\"149\":1,\"155\":1}}],[\"foreign\",{\"1\":{\"80\":1,\"81\":7}}],[\"for\",{\"1\":{\"25\":3,\"28\":1,\"64\":1,\"148\":3,\"149\":6,\"150\":1,\"151\":1,\"152\":2,\"155\":6,\"156\":2,\"157\":1}}],[\"finally\",{\"1\":{\"155\":2}}],[\"first\",{\"1\":{\"26\":7}}],[\"false记作0\",{\"1\":{\"155\":1}}],[\"false表示假\",{\"1\":{\"155\":1}}],[\"fk\",{\"1\":{\"81\":3}}],[\"f\",{\"1\":{\"78\":1,\"149\":3,\"152\":2,\"153\":1,\"154\":6,\"155\":8,\"156\":15}}],[\"flush\",{\"1\":{\"156\":1}}],[\"flush刷新\",{\"1\":{\"156\":1}}],[\"float\",{\"1\":{\"155\":3}}],[\"float32\",{\"1\":{\"147\":1}}],[\"float64\",{\"1\":{\"147\":1}}],[\"floor\",{\"1\":{\"76\":3}}],[\"flipped1001\",{\"1\":{\"149\":1,\"155\":1}}],[\"flipped\",{\"1\":{\"68\":1,\"147\":4,\"153\":2}}],[\"flipped的个人介绍页\",{\"0\":{\"0\":1}}],[\"fmt\",{\"1\":{\"28\":1,\"147\":7}}],[\"frame\",{\"0\":{\"350\":1}}],[\"frist>=len\",{\"1\":{\"25\":1}}],[\"frist\",{\"1\":{\"25\":3}}],[\"from\",{\"1\":{\"16\":1,\"17\":1,\"18\":5,\"22\":2,\"23\":5,\"24\":1,\"26\":2,\"27\":1,\"64\":2,\"68\":2,\"70\":15,\"71\":22,\"77\":1,\"78\":2}}],[\"func\",{\"1\":{\"25\":3,\"28\":3,\"147\":3,\"151\":4}}],[\"function\",{\"1\":{\"18\":1}}],[\"apr\",{\"0\":{\"210\":1}}],[\"append\",{\"1\":{\"28\":1,\"148\":1}}],[\"args\",{\"1\":{\"151\":3}}],[\"a=str\",{\"1\":{\"155\":1}}],[\"a=\",{\"1\":{\"148\":1,\"150\":1}}],[\"any\",{\"1\":{\"147\":2}}],[\"and\",{\"1\":{\"23\":1,\"26\":2,\"70\":4,\"71\":4,\"80\":1}}],[\"age=30\",{\"1\":{\"151\":1}}],[\"age=20\",{\"1\":{\"151\":4}}],[\"age=int\",{\"1\":{\"149\":1,\"155\":1}}],[\"age=input\",{\"1\":{\"149\":2,\"155\":2}}],[\"age\",{\"1\":{\"80\":3,\"81\":2,\"147\":9,\"149\":4,\"151\":6,\"155\":4}}],[\"auto\",{\"1\":{\"80\":1,\"81\":2}}],[\"author\",{\"1\":{\"16\":3}}],[\"alice\",{\"1\":{\"68\":3}}],[\"alter\",{\"1\":{\"64\":3,\"81\":6}}],[\"all\",{\"0\":{\"23\":1},\"1\":{\"23\":7,\"64\":2}}],[\"address\",{\"0\":{\"264\":1}}],[\"add\",{\"1\":{\"77\":2,\"81\":4,\"157\":1}}],[\"administrator\",{\"1\":{\"64\":1}}],[\"ad\",{\"1\":{\"28\":1}}],[\"ab\",{\"1\":{\"28\":1}}],[\"avg\",{\"1\":{\"26\":1,\"71\":3}}],[\"average\",{\"1\":{\"23\":1}}],[\"amount\",{\"1\":{\"26\":1}}],[\"a\",{\"0\":{\"35\":1},\"1\":{\"26\":12,\"149\":2,\"151\":2,\"153\":1,\"155\":6,\"156\":2}}],[\"accept\",{\"0\":{\"252\":1}}],[\"accounts\",{\"1\":{\"23\":6}}],[\"action\",{\"1\":{\"81\":2}}],[\"activity\",{\"1\":{\"26\":2}}],[\"ack状态\",{\"1\":{\"58\":1}}],[\"ack\",{\"1\":{\"49\":5}}],[\"asc\",{\"1\":{\"71\":4}}],[\"as\",{\"1\":{\"16\":1,\"18\":4,\"23\":6,\"24\":1,\"26\":6,\"70\":3,\"77\":1,\"78\":2,\"156\":1}}],[\"游戏玩法分析\",{\"0\":{\"16\":1,\"26\":1},\"1\":{\"26\":1}}],[\"兴趣爱好\",{\"0\":{\"14\":1}}],[\"证书优化\",{\"0\":{\"195\":1}}],[\"证书\",{\"0\":{\"13\":1}}],[\"教育背景\",{\"0\":{\"12\":1}}],[\"项目经理\",{\"1\":{\"81\":1}}],[\"项目经验\",{\"0\":{\"9\":1}}],[\"项目名称2\",{\"0\":{\"11\":1}}],[\"项目名称1\",{\"0\":{\"10\":1}}],[\"前端技术\",{\"0\":{\"5\":1}}],[\"🎨\",{\"0\":{\"14\":1}}],[\"🎖️\",{\"0\":{\"13\":1}}],[\"🎓\",{\"0\":{\"12\":1}}],[\"🌐\",{\"0\":{\"5\":1}}],[\"🌟\",{\"0\":{\"0\":2}}],[\"技能\",{\"0\":{\"3\":1}}],[\"💬\",{\"0\":{\"15\":1}}],[\"📦\",{\"0\":{\"10\":1}}],[\"📚\",{\"0\":{\"9\":1}}],[\"🔧\",{\"0\":{\"8\":1}}],[\"🗄️\",{\"0\":{\"7\":1}}],[\"🛠️\",{\"0\":{\"6\":1}}],[\"🖥️\",{\"0\":{\"4\":1}}],[\"🚀\",{\"0\":{\"3\":1}}],[\"📝\",{\"0\":{\"2\":1,\"11\":1}}],[\"📋\",{\"0\":{\"1\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n,id:o}})=>{const u=bt[s];e==="suggest"?self.postMessage([e,o,tt(t,u,n)]):e==="search"?self.postMessage([e,o,Z(t,u,n)]):self.postMessage({suggestions:[e,o,tt(t,u,n)],results:[e,o,Z(t,u,n)]})};
//# sourceMappingURL=index.js.map
